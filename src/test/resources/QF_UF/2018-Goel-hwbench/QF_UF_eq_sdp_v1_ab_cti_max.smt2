(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: eq_sdp_v1
query-maker: "Yices 2"
query-time: 0.686000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$8 0)
(declare-fun Add_8_8_8 (utt$8 utt$8 ) utt$8)
(declare-fun Sub_8_8_8 (utt$8 utt$8 ) utt$8)
(declare-fun y$10 () Bool)
(declare-fun y$104 () Bool)
(declare-fun y$105 () Bool)
(declare-fun y$107 () Bool)
(declare-fun y$108 () Bool)
(declare-fun y$12 () Bool)
(declare-fun y$120 () Bool)
(declare-fun y$121 () Bool)
(declare-fun y$122 () Bool)
(declare-fun y$123 () Bool)
(declare-fun y$124 () Bool)
(declare-fun y$125 () Bool)
(declare-fun y$138 () Bool)
(declare-fun y$14 () Bool)
(declare-fun y$144 () Bool)
(declare-fun y$151 () Bool)
(declare-fun y$152 () Bool)
(declare-fun y$153 () Bool)
(declare-fun y$154 () Bool)
(declare-fun y$155 () Bool)
(declare-fun y$156 () Bool)
(declare-fun y$157 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$178 () Bool)
(declare-fun y$179 () Bool)
(declare-fun y$18 () Bool)
(declare-fun y$180 () Bool)
(declare-fun y$181 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$20 () Bool)
(declare-fun y$22 () Bool)
(declare-fun y$24 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$6 () Bool)
(declare-fun y$60 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$68 () Bool)
(declare-fun y$72 () Bool)
(declare-fun y$76 () Bool)
(declare-fun y$8 () Bool)
(declare-fun y$80 () Bool)
(declare-fun y$90 () Bool)
(declare-fun y$94 () Bool)
(declare-fun y$a () utt$8)
(declare-fun y$b () utt$8)
(declare-fun y$c () utt$8)
(declare-fun y$ctl_1 () Bool)
(declare-fun y$ctl_2 () Bool)
(declare-fun y$im.p1_a () utt$8)
(declare-fun y$im.p1_a$next () utt$8)
(declare-fun y$im.p1_a$next_rhs () utt$8)
(declare-fun y$im.p1_a$next_rhs_op () utt$8)
(declare-fun y$im.p1_b () utt$8)
(declare-fun y$im.p1_b$next () utt$8)
(declare-fun y$im.p1_b$next_rhs () utt$8)
(declare-fun y$im.p1_b$next_rhs_op () utt$8)
(declare-fun y$im.p1_c () utt$8)
(declare-fun y$im.p1_c$next () utt$8)
(declare-fun y$im.p1_c$next_rhs () utt$8)
(declare-fun y$im.p1_c$next_rhs_op () utt$8)
(declare-fun y$im.p1_ctl_1 () Bool)
(declare-fun y$im.p1_ctl_1$next () Bool)
(declare-fun y$im.p1_ctl_1$next_rhs () Bool)
(declare-fun y$im.p1_ctl_1$next_rhs_op () Bool)
(declare-fun y$im.p1_ctl_2 () Bool)
(declare-fun y$im.p1_ctl_2$next () Bool)
(declare-fun y$im.p1_ctl_2$next_rhs () Bool)
(declare-fun y$im.p1_ctl_2$next_rhs_op () Bool)
(declare-fun y$im.p2_c () utt$8)
(declare-fun y$im.p2_c$next () utt$8)
(declare-fun y$im.p2_c$next_rhs () utt$8)
(declare-fun y$im.p2_c$next_rhs_op () utt$8)
(declare-fun y$im.p2_ctl_2 () Bool)
(declare-fun y$im.p2_ctl_2$next () Bool)
(declare-fun y$im.p2_ctl_2$next_rhs () Bool)
(declare-fun y$im.p2_ctl_2$next_rhs_op () Bool)
(declare-fun y$im.p2_m () utt$8)
(declare-fun y$im.p2_m$next () utt$8)
(declare-fun y$im.p2_m$next_rhs () utt$8)
(declare-fun y$im.p2_m$next_rhs_op () utt$8)
(declare-fun y$im.p3_n () utt$8)
(declare-fun y$im.p3_n$next () utt$8)
(declare-fun y$im.p3_n$next_rhs () utt$8)
(declare-fun y$im.p3_n$next_rhs_op () utt$8)
(declare-fun y$im.reset () Bool)
(declare-fun y$n0s1 () Bool)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$s$13 () utt$8)
(declare-fun y$s$13_op () utt$8)
(declare-fun y$s$14 () utt$8)
(declare-fun y$s$14_op () utt$8)
(declare-fun y$s$16 () utt$8)
(declare-fun y$s$16_op () utt$8)
(declare-fun y$s$17 () utt$8)
(declare-fun y$s$17$next () utt$8)
(declare-fun y$s$17$next_op () utt$8)
(declare-fun y$s$17_op () utt$8)
(declare-fun y$s$18 () utt$8)
(declare-fun y$s$18_op () utt$8)
(declare-fun y$s$19 () utt$8)
(declare-fun y$s$19_op () utt$8)
(declare-fun y$s$20 () utt$8)
(declare-fun y$s$20_op () utt$8)
(declare-fun y$s$21 () utt$8)
(declare-fun y$s$21_op () utt$8)
(declare-fun y$s$22 () utt$8)
(declare-fun y$s$22_op () utt$8)
(declare-fun y$s$23 () utt$8)
(declare-fun y$s$23_op () utt$8)
(declare-fun y$s1 () utt$8)
(declare-fun y$s1$next () utt$8)
(declare-fun y$s1$next_rhs () utt$8)
(declare-fun y$s1$next_rhs_op () utt$8)
(declare-fun y$s2 () utt$8)
(declare-fun y$s2$next () utt$8)
(declare-fun y$s2$next_rhs () utt$8)
(declare-fun y$s2$next_rhs_op () utt$8)
(declare-fun y$s3 () utt$8)
(declare-fun y$s3$next () utt$8)
(declare-fun y$s3$next_rhs () utt$8)
(declare-fun y$s3$next_rhs_op () utt$8)
(declare-fun y$s_out () utt$8)
(declare-fun y$s_out_op () utt$8)
(declare-fun y$sp.m () utt$8)
(declare-fun y$sp.m_op () utt$8)
(assert (not (= y$n0s8 y$n1s8)))
(assert (= y$107 (= y$im.p3_n y$s3)))
(assert (= y$108 (= y$prop y$107)))
(assert (= y$s$20_op (Add_8_8_8 y$a y$b)))
(assert (= y$s$22_op (Sub_8_8_8 y$a y$b)))
(assert (= y$sp.m_op (ite y$ctl_1 y$s$20_op y$s$22_op)))
(assert (= y$s$21_op (Add_8_8_8 y$sp.m_op y$c)))
(assert (= y$s$23_op (Sub_8_8_8 y$sp.m_op y$c)))
(assert (= y$s_out_op (ite y$ctl_2 y$s$21_op y$s$23_op)))
(assert (= y$s1$next_rhs_op (ite y$im.reset y$n0s8 y$s_out_op)))
(assert (= y$47 (= y$s1$next y$s1$next_rhs_op)))
(assert (= y$s2$next_rhs_op (ite y$im.reset y$n0s8 y$s1)))
(assert (= y$51 (= y$s2$next y$s2$next_rhs_op)))
(assert (= y$s3$next_rhs_op (ite y$im.reset y$n0s8 y$s2)))
(assert (= y$55 (= y$s3$next y$s3$next_rhs_op)))
(assert (= y$im.p1_ctl_1$next_rhs_op (and (not y$im.reset) y$ctl_1)))
(assert (= y$60 (= y$im.p1_ctl_1$next y$im.p1_ctl_1$next_rhs_op)))
(assert (= y$im.p1_ctl_2$next_rhs_op (and (not y$im.reset) y$ctl_2)))
(assert (= y$64 (= y$im.p1_ctl_2$next y$im.p1_ctl_2$next_rhs_op)))
(assert (= y$im.p1_a$next_rhs_op (ite y$im.reset y$n0s8 y$a)))
(assert (= y$68 (= y$im.p1_a$next y$im.p1_a$next_rhs_op)))
(assert (= y$im.p1_b$next_rhs_op (ite y$im.reset y$n0s8 y$b)))
(assert (= y$72 (= y$im.p1_b$next y$im.p1_b$next_rhs_op)))
(assert (= y$im.p1_c$next_rhs_op (ite y$im.reset y$n0s8 y$c)))
(assert (= y$76 (= y$im.p1_c$next y$im.p1_c$next_rhs_op)))
(assert (= y$im.p2_ctl_2$next_rhs_op (and y$im.p1_ctl_2 (not y$im.reset))))
(assert (= y$80 (= y$im.p2_ctl_2$next y$im.p2_ctl_2$next_rhs_op)))
(assert (= y$s$13_op (Add_8_8_8 y$im.p1_a y$im.p1_b)))
(assert (= y$s$16_op (Sub_8_8_8 y$im.p1_a y$im.p1_b)))
(assert (= y$s$18_op (ite y$im.p1_ctl_1 y$s$13_op y$s$16_op)))
(assert (= y$im.p2_m$next_rhs_op (ite y$im.reset y$n0s8 y$s$18_op)))
(assert (= y$90 (= y$im.p2_m$next y$im.p2_m$next_rhs_op)))
(assert (= y$im.p2_c$next_rhs_op (ite y$im.reset y$n0s8 y$im.p1_c)))
(assert (= y$94 (= y$im.p2_c$next y$im.p2_c$next_rhs_op)))
(assert (= y$s$14_op (Add_8_8_8 y$im.p2_m y$im.p2_c)))
(assert (= y$s$17_op (Sub_8_8_8 y$im.p2_m y$im.p2_c)))
(assert (= y$s$19_op (ite y$im.p2_ctl_2 y$s$14_op y$s$17_op)))
(assert (= y$im.p3_n$next_rhs_op (ite y$im.reset y$n0s8 y$s$19_op)))
(assert (= y$104 (= y$im.p3_n$next y$im.p3_n$next_rhs_op)))
(assert (= y$105 (and y$47 y$51 y$55 y$60 y$64 y$68 y$72 y$76 y$80 y$90 y$94 y$104)))
(assert (= y$122 (= y$s3$next y$im.p3_n$next)))
(assert (= y$123 (= y$prop$next y$122)))
(assert (= y$prop$next (not y$121)))
(assert (= y$s$17$next_op (Sub_8_8_8 y$im.p2_m$next y$im.p2_c$next)))
(assert (= y$144 (not (= y$s2$next y$s$17$next_op))))
(assert (= y$152 (= y$n0s8 y$s2$next)))
(assert (= y$153 (= y$n0s8 y$im.p2_m$next)))
(assert (= y$154 (= y$n0s8 y$im.p2_c$next)))
(assert (= y$155 (and y$144 y$152 y$153 y$154)))
(assert (= y$155 (not y$157)))
(assert (= y$138 (not (= y$s2 y$s$17_op))))
(assert (= y$22 (= y$n0s8 y$s2)))
(assert (= y$16 (= y$n0s8 y$im.p2_m)))
(assert (= y$12 (= y$n0s8 y$im.p2_c)))
(assert (= y$151 (and y$12 y$16 y$22 y$138)))
(assert (= y$151 (not y$156)))
(assert (= y$179 (and y$prop y$108 y$105 y$123 y$121 y$157 y$156)))
(assert y$179)
(assert (not (= y$n0s8 y$n1s8)))
(check-sat)
(exit)
