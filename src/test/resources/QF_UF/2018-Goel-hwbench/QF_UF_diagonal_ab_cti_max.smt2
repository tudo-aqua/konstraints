(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: diagonal
query-maker: "Yices 2"
query-time: 0.367000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$4 0)
(declare-fun Add_4_4_4 (utt$4 utt$4 ) utt$4)
(declare-fun Gr_1_4_4 (utt$4 utt$4 ) Bool)
(declare-fun Le_1_4_4 (utt$4 utt$4 ) Bool)
(declare-fun ShiftR_4_4_4 (utt$4 utt$4 ) utt$4)
(declare-fun y$108 () Bool)
(declare-fun y$109 () Bool)
(declare-fun y$110 () Bool)
(declare-fun y$111 () Bool)
(declare-fun y$115 () Bool)
(declare-fun y$116 () Bool)
(declare-fun y$117 () Bool)
(declare-fun y$118 () Bool)
(declare-fun y$119 () Bool)
(declare-fun y$125 () Bool)
(declare-fun y$126 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$131 () Bool)
(declare-fun y$142 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$162 () Bool)
(declare-fun y$163 () Bool)
(declare-fun y$164 () Bool)
(declare-fun y$165 () Bool)
(declare-fun y$166 () Bool)
(declare-fun y$175 () Bool)
(declare-fun y$176 () Bool)
(declare-fun y$194 () Bool)
(declare-fun y$195 () Bool)
(declare-fun y$196 () Bool)
(declare-fun y$197 () Bool)
(declare-fun y$198 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$201 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$58 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$62 () Bool)
(declare-fun y$63 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$68 () Bool)
(declare-fun y$69 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$71 () Bool)
(declare-fun y$72 () Bool)
(declare-fun y$8 () Bool)
(declare-fun y$82 () Bool)
(declare-fun y$83 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$X () utt$4)
(declare-fun y$X$next () utt$4)
(declare-fun y$X$next_rhs () utt$4)
(declare-fun y$X$next_rhs_op () utt$4)
(declare-fun y$Y () utt$4)
(declare-fun y$Y$next () utt$4)
(declare-fun y$Y$next_rhs () utt$4)
(declare-fun y$Y$next_rhs_op () utt$4)
(declare-fun y$n0s4 () utt$4)
(declare-fun y$n14s4 () utt$4)
(declare-fun y$n15s4 () utt$4)
(declare-fun y$n1s4 () utt$4)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$reset () Bool)
(declare-fun y$reset$next () Bool)
(declare-fun y$s$14 () Bool)
(declare-fun y$s$14_op () Bool)
(declare-fun y$s$15 () Bool)
(declare-fun y$s$15_op () Bool)
(declare-fun y$s$17 () Bool)
(declare-fun y$s$17$next () Bool)
(declare-fun y$s$17$next_op () Bool)
(declare-fun y$s$17_op () Bool)
(declare-fun y$s$2 () utt$4)
(declare-fun y$s$2$next () utt$4)
(declare-fun y$s$2$next_op () utt$4)
(declare-fun y$s$20 () utt$4)
(declare-fun y$s$20_op () utt$4)
(declare-fun y$s$21 () utt$4)
(declare-fun y$s$21_op () utt$4)
(declare-fun y$s$22 () utt$4)
(declare-fun y$s$22_op () utt$4)
(declare-fun y$s$23 () utt$4)
(declare-fun y$s$23_op () utt$4)
(declare-fun y$s$24 () utt$4)
(declare-fun y$s$24_op () utt$4)
(declare-fun y$s$2_op () utt$4)
(declare-fun y$s$3 () utt$4)
(declare-fun y$s$3_op () utt$4)
(declare-fun y$s$4 () utt$4)
(declare-fun y$s$4_op () utt$4)
(declare-fun y$s$8 () Bool)
(declare-fun y$s$8$next () Bool)
(declare-fun y$s$8$next_op () Bool)
(declare-fun y$s$8_op () Bool)
(declare-fun y$s$9 () Bool)
(declare-fun y$s$9_op () Bool)
(assert (distinct y$n0s4 y$n15s4 y$n1s4))
(assert (= y$s$17_op (Le_1_4_4 y$X y$Y)))
(assert (= y$s$17_op (not y$49)))
(assert (= y$50 (= y$prop y$49)))
(assert (= y$reset (not y$8)))
(assert (= y$s$8_op (Gr_1_4_4 y$X y$Y)))
(assert (= y$s$9_op (and y$8 y$s$8_op)))
(assert (= y$s$8_op (not y$13)))
(assert (= y$15 (not (= y$n15s4 y$X))))
(assert (= y$s$15_op (or y$13 y$15)))
(assert (= y$s$4_op (Add_4_4_4 y$Y y$n1s4)))
(assert (= y$s$24_op (ite y$s$15_op y$s$4_op y$X)))
(assert (= y$Y$next_rhs_op (ite y$s$9_op y$Y y$s$24_op)))
(assert (= y$25 (= y$Y$next y$Y$next_rhs_op)))
(assert (= y$s$20_op (ShiftR_4_4_4 y$n15s4 y$n1s4)))
(assert (= y$s$21_op (ShiftR_4_4_4 y$X y$n1s4)))
(assert (= y$s$3_op (Add_4_4_4 y$s$20_op y$s$21_op)))
(assert (= y$35 (= y$X y$Y)))
(assert (= y$s$14_op (or y$15 y$35)))
(assert (= y$s$2_op (Add_4_4_4 y$X y$n1s4)))
(assert (= y$s$22_op (ite y$s$14_op y$s$2_op y$Y)))
(assert (= y$s$23_op (ite y$s$17_op y$X y$s$22_op)))
(assert (= y$X$next_rhs_op (ite y$s$9_op y$s$3_op y$s$23_op)))
(assert (= y$46 (= y$X$next y$X$next_rhs_op)))
(assert (= y$47 (and y$25 y$46)))
(assert (= y$s$17$next_op (Le_1_4_4 y$X$next y$Y$next)))
(assert (= y$s$17$next_op (not y$62)))
(assert (= y$63 (= y$prop$next y$62)))
(assert (= y$prop$next (not y$59)))
(assert (= y$68 (= y$n0s4 y$Y$next)))
(assert (= y$69 (and y$s$17$next_op y$68)))
(assert (= y$69 (not y$71)))
(assert (= y$4 (= y$n0s4 y$Y)))
(assert (= y$67 (and y$4 y$s$17_op)))
(assert (= y$67 (not y$70)))
(assert (= y$109 (and y$s$17_op y$35)))
(assert (= y$109 (not y$111)))
(assert (= y$86 (= y$X$next y$Y$next)))
(assert (= y$108 (and y$s$17$next_op y$86)))
(assert (= y$108 (not y$110)))
(assert (= y$117 (and y$prop y$50 y$71 y$70 y$47 y$63 y$59 y$111 y$110)))
(assert y$117)
(assert (distinct y$n0s4 y$n15s4 y$n1s4))
(assert (= y$2 (= y$n0s4 y$X)))
(assert (= y$4 (= y$n0s4 y$Y)))
(assert (= y$s$2_op (Add_4_4_4 y$X y$n1s4)))
(assert (= y$131 (= y$Y y$s$2_op)))
(assert (= y$162 (and y$2 y$4 y$131)))
(assert (= y$162 (not y$165)))
(assert y$165)
(assert (= y$163 (= y$n0s4 y$X$next)))
(assert (= y$68 (= y$n0s4 y$Y$next)))
(assert (= y$s$2$next_op (Add_4_4_4 y$X$next y$n1s4)))
(assert (= y$142 (= y$Y$next y$s$2$next_op)))
(assert (= y$164 (and y$68 y$163 y$142)))
(assert (= y$164 (not y$175)))
(assert y$175)
(assert (distinct y$n0s4 y$n15s4 y$n1s4 y$n14s4))
(assert (= y$163 (= y$n0s4 y$X$next)))
(assert (= y$s$8$next_op (Gr_1_4_4 y$X$next y$Y$next)))
(assert (= y$195 (and y$s$8$next_op y$163)))
(assert (= y$195 (not y$197)))
(assert y$197)
(assert (= y$2 (= y$n0s4 y$X)))
(assert (= y$s$8_op (Gr_1_4_4 y$X y$Y)))
(assert (= y$194 (and y$2 y$s$8_op)))
(assert (= y$194 (not y$196)))
(assert y$196)
(assert (distinct y$n0s4 y$n15s4 y$n1s4 y$n14s4))
(check-sat)
(exit)
