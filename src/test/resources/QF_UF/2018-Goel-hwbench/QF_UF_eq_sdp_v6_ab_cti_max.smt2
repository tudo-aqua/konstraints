(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: eq_sdp_v6
query-maker: "Yices 2"
query-time: 1.930000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$8 0)
(declare-fun Add_8_8_8 (utt$8 utt$8 ) utt$8)
(declare-fun BitWiseAnd_8_8_8 (utt$8 utt$8 ) utt$8)
(declare-fun Extract_1_0_0_8 (utt$8 ) Bool)
(declare-fun Sub_8_8_8 (utt$8 utt$8 ) utt$8)
(declare-fun y$1 () Bool)
(declare-fun y$10 () Bool)
(declare-fun y$101 () Bool)
(declare-fun y$103 () Bool)
(declare-fun y$107 () Bool)
(declare-fun y$112 () Bool)
(declare-fun y$12 () Bool)
(declare-fun y$121 () Bool)
(declare-fun y$125 () Bool)
(declare-fun y$135 () Bool)
(declare-fun y$136 () Bool)
(declare-fun y$138 () Bool)
(declare-fun y$14 () Bool)
(declare-fun y$152 () Bool)
(declare-fun y$153 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$164 () Bool)
(declare-fun y$165 () Bool)
(declare-fun y$166 () Bool)
(declare-fun y$18 () Bool)
(declare-fun y$180 () Bool)
(declare-fun y$181 () Bool)
(declare-fun y$182 () Bool)
(declare-fun y$191 () Bool)
(declare-fun y$196 () Bool)
(declare-fun y$197 () Bool)
(declare-fun y$198 () Bool)
(declare-fun y$199 () Bool)
(declare-fun y$20 () Bool)
(declare-fun y$200 () Bool)
(declare-fun y$201 () Bool)
(declare-fun y$202 () Bool)
(declare-fun y$219 () Bool)
(declare-fun y$22 () Bool)
(declare-fun y$233 () Bool)
(declare-fun y$234 () Bool)
(declare-fun y$235 () Bool)
(declare-fun y$236 () Bool)
(declare-fun y$24 () Bool)
(declare-fun y$240 () Bool)
(declare-fun y$241 () Bool)
(declare-fun y$242 () Bool)
(declare-fun y$243 () Bool)
(declare-fun y$244 () Bool)
(declare-fun y$248 () Bool)
(declare-fun y$251 () Bool)
(declare-fun y$26 () Bool)
(declare-fun y$28 () Bool)
(declare-fun y$280 () Bool)
(declare-fun y$284 () Bool)
(declare-fun y$287 () Bool)
(declare-fun y$289 () Bool)
(declare-fun y$290 () Bool)
(declare-fun y$291 () Bool)
(declare-fun y$292 () Bool)
(declare-fun y$293 () Bool)
(declare-fun y$296 () Bool)
(declare-fun y$297 () Bool)
(declare-fun y$298 () Bool)
(declare-fun y$299 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$30 () Bool)
(declare-fun y$300 () Bool)
(declare-fun y$301 () Bool)
(declare-fun y$302 () Bool)
(declare-fun y$303 () Bool)
(declare-fun y$304 () Bool)
(declare-fun y$305 () Bool)
(declare-fun y$306 () Bool)
(declare-fun y$307 () Bool)
(declare-fun y$308 () Bool)
(declare-fun y$314 () Bool)
(declare-fun y$316 () Bool)
(declare-fun y$318 () Bool)
(declare-fun y$32 () Bool)
(declare-fun y$321 () Bool)
(declare-fun y$324 () Bool)
(declare-fun y$327 () Bool)
(declare-fun y$330 () Bool)
(declare-fun y$333 () Bool)
(declare-fun y$337 () Bool)
(declare-fun y$34 () Bool)
(declare-fun y$36 () Bool)
(declare-fun y$361 () Bool)
(declare-fun y$38 () Bool)
(declare-fun y$385 () Bool)
(declare-fun y$386 () Bool)
(declare-fun y$387 () Bool)
(declare-fun y$388 () Bool)
(declare-fun y$389 () Bool)
(declare-fun y$390 () Bool)
(declare-fun y$399 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$405 () Bool)
(declare-fun y$408 () Bool)
(declare-fun y$410 () Bool)
(declare-fun y$411 () Bool)
(declare-fun y$414 () Bool)
(declare-fun y$417 () Bool)
(declare-fun y$422 () Bool)
(declare-fun y$429 () Bool)
(declare-fun y$432 () Bool)
(declare-fun y$435 () Bool)
(declare-fun y$451 () Bool)
(declare-fun y$452 () Bool)
(declare-fun y$453 () Bool)
(declare-fun y$454 () Bool)
(declare-fun y$455 () Bool)
(declare-fun y$456 () Bool)
(declare-fun y$459 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$460 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$63 () Bool)
(declare-fun y$69 () Bool)
(declare-fun y$73 () Bool)
(declare-fun y$77 () Bool)
(declare-fun y$8 () Bool)
(declare-fun y$82 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$90 () Bool)
(declare-fun y$95 () Bool)
(declare-fun y$97 () Bool)
(declare-fun y$99 () Bool)
(declare-fun y$a () utt$8)
(declare-fun y$b () utt$8)
(declare-fun y$c () utt$8)
(declare-fun y$ctl_b () Bool)
(declare-fun y$ctl_b1 () Bool)
(declare-fun y$ctl_b1$next () Bool)
(declare-fun y$ctl_b2 () Bool)
(declare-fun y$ctl_b2$next () Bool)
(declare-fun y$ctl_b2$next_rhs () Bool)
(declare-fun y$ctl_b2$next_rhs_op () Bool)
(declare-fun y$ctl_b3 () Bool)
(declare-fun y$ctl_b3$next () Bool)
(declare-fun y$ctl_b3$next_rhs () Bool)
(declare-fun y$ctl_b3$next_rhs_op () Bool)
(declare-fun y$im.p1_a () utt$8)
(declare-fun y$im.p1_a$next () utt$8)
(declare-fun y$im.p1_a$next_rhs () utt$8)
(declare-fun y$im.p1_a$next_rhs_op () utt$8)
(declare-fun y$im.p1_b () utt$8)
(declare-fun y$im.p1_b$next () utt$8)
(declare-fun y$im.p1_b$next_rhs () utt$8)
(declare-fun y$im.p1_b$next_rhs_op () utt$8)
(declare-fun y$im.p1_c () utt$8)
(declare-fun y$im.p1_c$next () utt$8)
(declare-fun y$im.p1_c$next_rhs () utt$8)
(declare-fun y$im.p1_c$next_rhs_op () utt$8)
(declare-fun y$im.p1_ctl_2 () Bool)
(declare-fun y$im.p1_ctl_2$next () Bool)
(declare-fun y$im.p1_ctl_2$next_rhs () Bool)
(declare-fun y$im.p1_ctl_2$next_rhs_op () Bool)
(declare-fun y$im.p2_c () utt$8)
(declare-fun y$im.p2_c$next () utt$8)
(declare-fun y$im.p2_c$next_rhs () utt$8)
(declare-fun y$im.p2_c$next_rhs_op () utt$8)
(declare-fun y$im.p2_ctl_2 () Bool)
(declare-fun y$im.p2_ctl_2$next () Bool)
(declare-fun y$im.p2_ctl_2$next_rhs () Bool)
(declare-fun y$im.p2_ctl_2$next_rhs_op () Bool)
(declare-fun y$im.p2_m () utt$8)
(declare-fun y$im.p2_m$next () utt$8)
(declare-fun y$im.p2_m$next_rhs () utt$8)
(declare-fun y$im.p2_m$next_rhs_op () utt$8)
(declare-fun y$im.p3_n () utt$8)
(declare-fun y$im.p3_n$next () utt$8)
(declare-fun y$im.p3_n$next_rhs () utt$8)
(declare-fun y$im.p3_n$next_rhs_op () utt$8)
(declare-fun y$im.reset () Bool)
(declare-fun y$im.reset$next () Bool)
(declare-fun y$n0s1 () Bool)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n10s8 () utt$8)
(declare-fun y$n16s8 () utt$8)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n248s8 () utt$8)
(declare-fun y$n252s8 () utt$8)
(declare-fun y$n2s8 () utt$8)
(declare-fun y$n4s8 () utt$8)
(declare-fun y$n5s8 () utt$8)
(declare-fun y$n8s8 () utt$8)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$ra1 () utt$8)
(declare-fun y$ra1$next () utt$8)
(declare-fun y$ra2 () utt$8)
(declare-fun y$ra2$next () utt$8)
(declare-fun y$ra2$next_rhs () utt$8)
(declare-fun y$ra2$next_rhs_op () utt$8)
(declare-fun y$ra3 () utt$8)
(declare-fun y$ra3$next () utt$8)
(declare-fun y$ra3$next_rhs () utt$8)
(declare-fun y$ra3$next_rhs_op () utt$8)
(declare-fun y$rb1 () utt$8)
(declare-fun y$rb1$next () utt$8)
(declare-fun y$rb2 () utt$8)
(declare-fun y$rb2$next () utt$8)
(declare-fun y$rb2$next_rhs () utt$8)
(declare-fun y$rb2$next_rhs_op () utt$8)
(declare-fun y$rb3 () utt$8)
(declare-fun y$rb3$next () utt$8)
(declare-fun y$rb3$next_rhs () utt$8)
(declare-fun y$rb3$next_rhs_op () utt$8)
(declare-fun y$rc1 () utt$8)
(declare-fun y$rc1$next () utt$8)
(declare-fun y$rc2 () utt$8)
(declare-fun y$rc2$next () utt$8)
(declare-fun y$rc2$next_rhs () utt$8)
(declare-fun y$rc2$next_rhs_op () utt$8)
(declare-fun y$rc3 () utt$8)
(declare-fun y$rc3$next () utt$8)
(declare-fun y$rc3$next_rhs () utt$8)
(declare-fun y$rc3$next_rhs_op () utt$8)
(declare-fun y$s$21 () utt$8)
(declare-fun y$s$21_op () utt$8)
(declare-fun y$s$22 () utt$8)
(declare-fun y$s$22$next () utt$8)
(declare-fun y$s$22$next_op () utt$8)
(declare-fun y$s$22_op () utt$8)
(declare-fun y$s$23 () utt$8)
(declare-fun y$s$23$next () utt$8)
(declare-fun y$s$23$next_op () utt$8)
(declare-fun y$s$23_op () utt$8)
(declare-fun y$s$26 () utt$8)
(declare-fun y$s$26_op () utt$8)
(declare-fun y$s$27 () utt$8)
(declare-fun y$s$27$next () utt$8)
(declare-fun y$s$27$next_op () utt$8)
(declare-fun y$s$27_op () utt$8)
(declare-fun y$s$28 () utt$8)
(declare-fun y$s$28_op () utt$8)
(declare-fun y$s$29 () utt$8)
(declare-fun y$s$29_op () utt$8)
(declare-fun y$s$30 () utt$8)
(declare-fun y$s$30$next () utt$8)
(declare-fun y$s$30$next_op () utt$8)
(declare-fun y$s$30_op () utt$8)
(declare-fun y$s$31 () utt$8)
(declare-fun y$s$31$next () utt$8)
(declare-fun y$s$31$next_op () utt$8)
(declare-fun y$s$31_op () utt$8)
(declare-fun y$s$32 () utt$8)
(declare-fun y$s$32$next () utt$8)
(declare-fun y$s$32$next_op () utt$8)
(declare-fun y$s$32_op () utt$8)
(declare-fun y$s$33 () utt$8)
(declare-fun y$s$33$next () utt$8)
(declare-fun y$s$33$next_op () utt$8)
(declare-fun y$s$33_op () utt$8)
(declare-fun y$s_out () utt$8)
(declare-fun y$s_out$next () utt$8)
(declare-fun y$s_out$next_op () utt$8)
(declare-fun y$s_out_op () utt$8)
(declare-fun y$sp.m () utt$8)
(declare-fun y$sp.m$next () utt$8)
(declare-fun y$sp.m$next_op () utt$8)
(declare-fun y$sp.m_op () utt$8)
(declare-fun y$w$1 () Bool)
(declare-fun y$w$1$next () Bool)
(assert (not (= y$n0s8 y$n1s8)))
(assert (= y$138 (Extract_1_0_0_8 y$ra3)))
(assert (= y$s$31_op (Add_8_8_8 y$ra3 y$rb3)))
(assert (= y$s$33_op (Sub_8_8_8 y$ra3 y$rb3)))
(assert (= y$sp.m_op (ite y$138 y$s$31_op y$s$33_op)))
(assert (= y$s$30_op (Add_8_8_8 y$sp.m_op y$rc3)))
(assert (= y$s$32_op (Sub_8_8_8 y$sp.m_op y$rc3)))
(assert (= y$s_out_op (ite y$ctl_b3 y$s$30_op y$s$32_op)))
(assert (= y$152 (= y$im.p3_n y$s_out_op)))
(assert (= y$153 (= y$prop y$152)))
(assert (= y$rb2$next_rhs_op (ite y$im.reset y$n0s8 y$rb1)))
(assert (= y$46 (= y$rb2$next y$rb2$next_rhs_op)))
(assert (= y$rb3$next_rhs_op (ite y$im.reset y$n0s8 y$rb2)))
(assert (= y$50 (= y$rb3$next y$rb3$next_rhs_op)))
(assert (= y$im.p1_c$next_rhs_op (ite y$im.reset y$n0s8 y$c)))
(assert (= y$55 (= y$rc1$next y$im.p1_c$next_rhs_op)))
(assert (= y$rc2$next_rhs_op (ite y$im.reset y$n0s8 y$rc1)))
(assert (= y$59 (= y$rc2$next y$rc2$next_rhs_op)))
(assert (= y$rc3$next_rhs_op (ite y$im.reset y$n0s8 y$rc2)))
(assert (= y$63 (= y$rc3$next y$rc3$next_rhs_op)))
(assert (= y$im.p1_ctl_2$next_rhs_op (and (not y$im.reset) y$ctl_b)))
(assert (= y$69 (= y$ctl_b1$next y$im.p1_ctl_2$next_rhs_op)))
(assert (= y$ctl_b2$next_rhs_op (and y$ctl_b1 (not y$im.reset))))
(assert (= y$73 (= y$ctl_b2$next y$ctl_b2$next_rhs_op)))
(assert (= y$ctl_b3$next_rhs_op (and y$ctl_b2 (not y$im.reset))))
(assert (= y$77 (= y$ctl_b3$next y$ctl_b3$next_rhs_op)))
(assert (= y$im.p1_a$next_rhs_op (ite y$im.reset y$n0s8 y$a)))
(assert (= y$82 (= y$ra1$next y$im.p1_a$next_rhs_op)))
(assert (= y$ra2$next_rhs_op (ite y$im.reset y$n0s8 y$ra1)))
(assert (= y$86 (= y$ra2$next y$ra2$next_rhs_op)))
(assert (= y$ra3$next_rhs_op (ite y$im.reset y$n0s8 y$ra2)))
(assert (= y$90 (= y$ra3$next y$ra3$next_rhs_op)))
(assert (= y$im.p1_b$next_rhs_op (ite y$im.reset y$n0s8 y$b)))
(assert (= y$95 (= y$rb1$next y$im.p1_b$next_rhs_op)))
(assert (= y$97 (= y$im.p1_ctl_2$next_rhs_op y$im.p1_ctl_2$next)))
(assert (= y$99 (= y$im.p1_a$next_rhs_op y$im.p1_a$next)))
(assert (= y$101 (= y$im.p1_b$next_rhs_op y$im.p1_b$next)))
(assert (= y$103 (= y$im.p1_c$next_rhs_op y$im.p1_c$next)))
(assert (= y$im.p2_ctl_2$next_rhs_op (and y$im.p1_ctl_2 (not y$im.reset))))
(assert (= y$107 (= y$im.p2_ctl_2$next y$im.p2_ctl_2$next_rhs_op)))
(assert (= y$s$23_op (BitWiseAnd_8_8_8 y$im.p1_a y$n1s8)))
(assert (= y$112 (= y$n1s8 y$s$23_op)))
(assert (= y$s$21_op (Add_8_8_8 y$im.p1_a y$im.p1_b)))
(assert (= y$s$26_op (Sub_8_8_8 y$im.p1_a y$im.p1_b)))
(assert (= y$s$28_op (ite y$112 y$s$21_op y$s$26_op)))
(assert (= y$im.p2_m$next_rhs_op (ite y$im.reset y$n0s8 y$s$28_op)))
(assert (= y$121 (= y$im.p2_m$next y$im.p2_m$next_rhs_op)))
(assert (= y$im.p2_c$next_rhs_op (ite y$im.reset y$n0s8 y$im.p1_c)))
(assert (= y$125 (= y$im.p2_c$next y$im.p2_c$next_rhs_op)))
(assert (= y$s$22_op (Add_8_8_8 y$im.p2_m y$im.p2_c)))
(assert (= y$s$27_op (Sub_8_8_8 y$im.p2_m y$im.p2_c)))
(assert (= y$s$29_op (ite y$im.p2_ctl_2 y$s$22_op y$s$27_op)))
(assert (= y$im.p3_n$next_rhs_op (ite y$im.reset y$n0s8 y$s$29_op)))
(assert (= y$135 (= y$im.p3_n$next y$im.p3_n$next_rhs_op)))
(assert (= y$136 (and y$46 y$50 y$55 y$59 y$63 y$69 y$73 y$77 y$82 y$86 y$90 y$95 y$97 y$99 y$101 y$103 y$107 y$121 y$125 y$135)))
(assert (= y$166 (Extract_1_0_0_8 y$ra3$next)))
(assert (= y$s$31$next_op (Add_8_8_8 y$ra3$next y$rb3$next)))
(assert (= y$s$33$next_op (Sub_8_8_8 y$ra3$next y$rb3$next)))
(assert (= y$sp.m$next_op (ite y$166 y$s$31$next_op y$s$33$next_op)))
(assert (= y$s$30$next_op (Add_8_8_8 y$sp.m$next_op y$rc3$next)))
(assert (= y$s$32$next_op (Sub_8_8_8 y$sp.m$next_op y$rc3$next)))
(assert (= y$s_out$next_op (ite y$ctl_b3$next y$s$30$next_op y$s$32$next_op)))
(assert (= y$180 (= y$im.p3_n$next y$s_out$next_op)))
(assert (= y$181 (= y$prop$next y$180)))
(assert (= y$prop$next (not y$165)))
(assert (= y$197 (not (= y$n0s8 y$s$33$next_op))))
(assert (= y$198 (= y$n0s8 y$rb3$next)))
(assert (= y$199 (= y$n0s8 y$ra3$next)))
(assert (= y$200 (and y$197 y$198 y$199)))
(assert (= y$200 (not y$202)))
(assert (= y$191 (not (= y$n0s8 y$s$33_op))))
(assert (= y$34 (= y$n0s8 y$rb3)))
(assert (= y$28 (= y$n0s8 y$ra3)))
(assert (= y$196 (and y$28 y$34 y$191)))
(assert (= y$196 (not y$201)))
(assert (= y$234 (and y$199 y$166)))
(assert (= y$234 (not y$236)))
(assert (= y$233 (and y$28 y$138)))
(assert (= y$233 (not y$235)))
(assert (= y$242 (and y$prop y$153 y$202 y$201 y$236 y$235 y$136 y$181 y$165)))
(assert y$242)
(assert (not (= y$n0s8 y$n1s8)))
(assert (= (= y$im.p2_c y$rb2) y$316))
(assert y$316)
(assert (= (= y$im.p2_c y$rc2) y$324))
(assert y$324)
(assert (= (= y$im.p2_c y$ra2) y$333))
(assert y$333)
(assert (= y$s$23$next_op (BitWiseAnd_8_8_8 y$im.p1_a$next y$n1s8)))
(assert (= y$361 (= y$n1s8 y$s$23$next_op)))
(assert (= y$386 (= y$n0s8 y$im.p1_a$next)))
(assert (= y$387 (and y$361 y$386)))
(assert (= y$387 (not y$389)))
(assert y$389)
(assert (= y$s$23_op (BitWiseAnd_8_8_8 y$im.p1_a y$n1s8)))
(assert (= y$112 (= y$n1s8 y$s$23_op)))
(assert (= y$8 (= y$n0s8 y$im.p1_a)))
(assert (= y$385 (and y$8 y$112)))
(assert (= y$385 (not y$388)))
(assert y$388)
(assert (distinct y$n0s8 y$n1s8 y$n2s8 y$n5s8 y$n8s8 y$n10s8 y$n252s8 y$n248s8 y$n4s8 y$n16s8))
(assert (= (= y$im.p2_c y$im.p2_m) y$408))
(assert y$408)
(assert (= y$s$27_op (Sub_8_8_8 y$im.p2_m y$im.p2_c)))
(assert (= (= y$im.p2_c y$s$27_op) y$417))
(assert y$417)
(assert (= y$ctl_b2 (not y$3)))
(assert y$3)
(assert (= y$166 (Extract_1_0_0_8 y$ra3$next)))
(assert (= y$s$33$next_op (Sub_8_8_8 y$ra3$next y$rb3$next)))
(assert (= y$410 (= y$s$33$next_op y$im.p3_n$next)))
(assert (= y$422 (= y$rb3$next y$im.p3_n$next)))
(assert (= y$451 (and y$166 y$410 y$422)))
(assert (= y$451 (not y$455)))
(assert y$455)
(assert (= y$138 (Extract_1_0_0_8 y$ra3)))
(assert (= y$s$33_op (Sub_8_8_8 y$ra3 y$rb3)))
(assert (= y$452 (= y$im.p3_n y$s$33_op)))
(assert (= y$453 (= y$im.p3_n y$rb3)))
(assert (= y$454 (and y$138 y$452 y$453)))
(assert (= y$454 (not y$459)))
(assert y$459)
(assert (distinct y$n0s8 y$n1s8 y$n2s8 y$n5s8 y$n8s8 y$n10s8 y$n252s8 y$n248s8 y$n4s8 y$n16s8))
(check-sat)
(exit)
