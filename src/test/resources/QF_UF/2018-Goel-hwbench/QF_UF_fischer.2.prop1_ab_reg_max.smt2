(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: fischer.2.prop1
query-maker: "Yices 2"
query-time: 0.108000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$8 0)
(declare-sort utt$32 0)
(declare-fun Add_32_32_32 (utt$32 utt$32 ) utt$32)
(declare-fun GrEq_1_32_32 (utt$32 utt$32 ) Bool)
(declare-fun y$1 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$1181 () Bool)
(declare-fun y$1184 () Bool)
(declare-fun y$1185 () Bool)
(declare-fun y$1217 () Bool)
(declare-fun y$1241 () Bool)
(declare-fun y$1251 () Bool)
(declare-fun y$1259 () Bool)
(declare-fun y$1260 () Bool)
(declare-fun y$1261 () Bool)
(declare-fun y$1262 () Bool)
(declare-fun y$1263 () Bool)
(declare-fun y$1264 () Bool)
(declare-fun y$1265 () Bool)
(declare-fun y$1274 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$27 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$33 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$38 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$44 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$a_CS_P_0 () Bool)
(declare-fun y$a_CS_P_0$next () Bool)
(declare-fun y$a_CS_P_1 () Bool)
(declare-fun y$a_CS_P_1$next () Bool)
(declare-fun y$a_CS_P_2 () Bool)
(declare-fun y$a_CS_P_3 () Bool)
(declare-fun y$a_NCS_P_0 () Bool)
(declare-fun y$a_NCS_P_1 () Bool)
(declare-fun y$a_NCS_P_2 () Bool)
(declare-fun y$a_NCS_P_3 () Bool)
(declare-fun y$a_q () Bool)
(declare-fun y$a_try_P_0 () Bool)
(declare-fun y$a_try_P_1 () Bool)
(declare-fun y$a_try_P_2 () Bool)
(declare-fun y$a_try_P_3 () Bool)
(declare-fun y$a_wait_P_0 () Bool)
(declare-fun y$a_wait_P_1 () Bool)
(declare-fun y$a_wait_P_2 () Bool)
(declare-fun y$a_wait_P_3 () Bool)
(declare-fun y$dve_invalid () Bool)
(declare-fun y$id35 () Bool)
(declare-fun y$id35_op () Bool)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n255s32 () utt$32)
(declare-fun y$n255s8 () utt$8)
(declare-fun y$n2s8 () utt$8)
(declare-fun y$n3s8 () utt$8)
(declare-fun y$n4s8 () utt$8)
(declare-fun y$prop () Bool)
(declare-fun y$v3_1517448497_26 () utt$32)
(declare-fun y$v3_1517448497_26$next () utt$32)
(declare-fun y$v3_1517448497_26$next_op () utt$32)
(declare-fun y$v3_1517448497_26_op () utt$32)
(declare-fun y$v3_1517448497_27 () utt$32)
(declare-fun y$v3_1517448497_27$next () utt$32)
(declare-fun y$v3_1517448497_27$next_op () utt$32)
(declare-fun y$v3_1517448497_27_op () utt$32)
(declare-fun y$v3_1517448497_28 () utt$32)
(declare-fun y$v3_1517448497_28$next () utt$32)
(declare-fun y$v3_1517448497_28$next_op () utt$32)
(declare-fun y$v3_1517448497_28_op () utt$32)
(declare-fun y$v3_1517448497_29 () utt$32)
(declare-fun y$v3_1517448497_29_op () utt$32)
(declare-fun y$v3_1517448497_30 () utt$32)
(declare-fun y$v3_1517448497_30_op () utt$32)
(declare-fun y$v3_1517448497_31 () utt$32)
(declare-fun y$v3_1517448497_31_op () utt$32)
(declare-fun y$v3_1517448497_32 () utt$32)
(declare-fun y$v3_1517448497_32_op () utt$32)
(declare-fun y$v3_1517448497_33 () Bool)
(declare-fun y$v3_1517448497_33_op () Bool)
(declare-fun y$v_id () utt$8)
(declare-fun y$v_t_0 () utt$8)
(declare-fun y$v_t_1 () utt$8)
(declare-fun y$v_t_2 () utt$8)
(declare-fun y$v_t_3 () utt$8)
(assert (distinct y$n0s8 y$n4s8 y$n3s8 y$n2s8 y$n1s8 y$n255s8))
(assert (distinct y$n1s32 y$n255s32 y$n0s32))
(assert (= y$a_CS_P_0 (not y$1)))
(assert (= y$a_CS_P_1 (not y$3)))
(assert (= y$a_CS_P_2 (not y$5)))
(assert (= y$a_CS_P_3 (not y$7)))
(assert (= y$a_NCS_P_0 (not y$9)))
(assert (= y$a_NCS_P_1 (not y$11)))
(assert (= y$a_NCS_P_2 (not y$13)))
(assert (= y$a_NCS_P_3 (not y$15)))
(assert (= y$a_q (not y$17)))
(assert (= y$a_try_P_0 (not y$19)))
(assert (= y$a_try_P_1 (not y$21)))
(assert (= y$a_try_P_2 (not y$23)))
(assert (= y$a_try_P_3 (not y$25)))
(assert (= y$a_wait_P_0 (not y$27)))
(assert (= y$a_wait_P_1 (not y$29)))
(assert (= y$a_wait_P_2 (not y$31)))
(assert (= y$a_wait_P_3 (not y$33)))
(assert (= y$dve_invalid (not y$35)))
(assert (= y$38 (= y$n0s8 y$v_id)))
(assert (= y$40 (= y$n0s8 y$v_t_0)))
(assert (= y$42 (= y$n0s8 y$v_t_1)))
(assert (= y$44 (= y$n0s8 y$v_t_2)))
(assert (= y$46 (= y$n0s8 y$v_t_3)))
(assert (= y$prop (not y$1217)))
(assert (= y$v3_1517448497_26_op (ite y$a_CS_P_0 y$n1s32 y$n0s32)))
(assert (= y$v3_1517448497_27_op (ite y$a_CS_P_1 y$n1s32 y$n0s32)))
(assert (= y$v3_1517448497_28_op (Add_32_32_32 y$v3_1517448497_26_op y$v3_1517448497_27_op)))
(assert (= y$v3_1517448497_29_op (ite y$a_CS_P_2 y$n1s32 y$n0s32)))
(assert (= y$v3_1517448497_30_op (Add_32_32_32 y$v3_1517448497_28_op y$v3_1517448497_29_op)))
(assert (= y$v3_1517448497_31_op (ite y$a_CS_P_3 y$n1s32 y$n0s32)))
(assert (= y$v3_1517448497_32_op (Add_32_32_32 y$v3_1517448497_30_op y$v3_1517448497_31_op)))
(assert (= y$v3_1517448497_33_op (GrEq_1_32_32 y$n1s32 y$v3_1517448497_32_op)))
(assert (= y$v3_1517448497_33_op (not y$1181)))
(assert (= y$id35_op (and y$35 y$1181)))
(assert (= y$id35_op (not y$1184)))
(assert (= y$1185 (= y$prop y$1184)))
(assert (= y$a_CS_P_0$next (not y$1260)))
(assert (= y$a_CS_P_1$next (not y$1261)))
(assert (= y$v3_1517448497_26$next_op (ite y$a_CS_P_0$next y$n1s32 y$n0s32)))
(assert (= y$v3_1517448497_27$next_op (ite y$a_CS_P_1$next y$n1s32 y$n0s32)))
(assert (= y$v3_1517448497_28$next_op (Add_32_32_32 y$v3_1517448497_26$next_op y$v3_1517448497_27$next_op)))
(assert (= y$1262 (not (= y$n0s32 y$v3_1517448497_28$next_op))))
(assert (= y$1263 (and y$1260 y$1261 y$1262)))
(assert (= y$1263 (not y$1265)))
(assert (= y$1251 (not (= y$n0s32 y$v3_1517448497_28_op))))
(assert (= y$1259 (and y$1 y$3 y$1251)))
(assert (= y$1259 (not y$1264)))
(assert (= y$1274 (and y$1 y$3 y$5 y$7 y$9 y$11 y$13 y$15 y$17 y$19 y$21 y$23 y$25 y$27 y$29 y$31 y$33 y$35 y$38 y$40 y$42 y$44 y$46 y$1217 y$1185 y$1265 y$1264)))
(assert y$1274)
(check-sat)
(exit)
