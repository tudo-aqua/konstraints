(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: resistance.1.prop2
query-maker: "Yices 2"
query-time: 0.001000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$16 0)
(declare-sort utt$32 0)
(declare-fun BitWiseNot_32_32 (utt$32 ) utt$32)
(declare-fun Concat_32_16_16 (utt$16 utt$16 ) utt$32)
(declare-fun Extract_1_15_15_16 (utt$16 ) Bool)
(declare-fun ShiftR_32_32_32 (utt$32 utt$32 ) utt$32)
(declare-fun y$1 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$111 () Bool)
(declare-fun y$1275 () Bool)
(declare-fun y$1278 () Bool)
(declare-fun y$1283 () Bool)
(declare-fun y$1284 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$1317 () Bool)
(declare-fun y$1344 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$27 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$33 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$39 () Bool)
(declare-fun y$41 () Bool)
(declare-fun y$44 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$a_S1 () Bool)
(declare-fun y$a_S2 () Bool)
(declare-fun y$a_cage_opened () Bool)
(declare-fun y$a_correct_value () Bool)
(declare-fun y$a_err7 () Bool)
(declare-fun y$a_finished_measuring () Bool)
(declare-fun y$a_initial_Device_state () Bool)
(declare-fun y$a_initial_Measuring_0 () Bool)
(declare-fun y$a_large_resistance () Bool)
(declare-fun y$a_measure_done () Bool)
(declare-fun y$a_measure_in_progress () Bool)
(declare-fun y$a_measured () Bool)
(declare-fun y$a_new_range () Bool)
(declare-fun y$a_small_resistance () Bool)
(declare-fun y$a_start () Bool)
(declare-fun y$a_state0 () Bool)
(declare-fun y$a_state1 () Bool)
(declare-fun y$a_state_request () Bool)
(declare-fun y$a_too_large_resistance () Bool)
(declare-fun y$a_too_small_resistance () Bool)
(declare-fun y$dve_invalid () Bool)
(declare-fun y$id37 () Bool)
(declare-fun y$id37_op () Bool)
(declare-fun y$n0s16 () utt$16)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n1000s32 () utt$32)
(declare-fun y$n16s32 () utt$32)
(declare-fun y$n1s16 () utt$16)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n3s16 () utt$16)
(declare-fun y$n5800s32 () utt$32)
(declare-fun y$n5999s32 () utt$32)
(declare-fun y$n5s32 () utt$32)
(declare-fun y$n6200s32 () utt$32)
(declare-fun y$n999s32 () utt$32)
(declare-fun y$prop () Bool)
(declare-fun y$s$198 () utt$32)
(declare-fun y$s$198_op () utt$32)
(declare-fun y$s$199 () utt$32)
(declare-fun y$s$199_op () utt$32)
(declare-fun y$v3_1517448506_30 () utt$32)
(declare-fun y$v3_1517448506_30_op () utt$32)
(declare-fun y$v3_1517448506_31 () utt$32)
(declare-fun y$v3_1517448506_31_op () utt$32)
(declare-fun y$v3_1517448506_32 () utt$32)
(declare-fun y$v3_1517448506_32_op () utt$32)
(declare-fun y$v3_1517448506_36 () utt$32)
(declare-fun y$v3_1517448506_36_op () utt$32)
(declare-fun y$v3_1517448506_38 () Bool)
(declare-fun y$v3_1517448506_38_op () Bool)
(declare-fun y$v_actual_resistance () utt$16)
(declare-fun y$v_cage_safe () utt$16)
(declare-fun y$v_range () utt$16)
(declare-fun y$w$5 () Bool)
(declare-fun y$w$6 () utt$32)
(declare-fun y$w$6_op () utt$32)
(assert (distinct y$n0s16 y$n1s16 y$n3s16))
(assert (distinct y$n16s32 y$n1s32 y$n6200s32 y$n0s32 y$n999s32 y$n5999s32 y$n1000s32 y$n5800s32 y$n5s32))
(assert (= y$a_S1 (not y$1)))
(assert (= y$a_S2 (not y$3)))
(assert (= y$a_cage_opened (not y$5)))
(assert (= y$a_correct_value (not y$7)))
(assert (= y$a_err7 (not y$9)))
(assert (= y$a_finished_measuring (not y$11)))
(assert (= y$a_initial_Device_state (not y$13)))
(assert (= y$a_initial_Measuring_0 (not y$15)))
(assert (= y$a_large_resistance (not y$17)))
(assert (= y$a_measure_done (not y$19)))
(assert (= y$a_measure_in_progress (not y$21)))
(assert (= y$a_measured (not y$23)))
(assert (= y$a_new_range (not y$25)))
(assert (= y$a_small_resistance (not y$27)))
(assert (= y$a_start (not y$29)))
(assert (= y$a_state0 (not y$31)))
(assert (= y$a_state1 (not y$33)))
(assert (= y$a_state_request (not y$35)))
(assert (= y$a_too_large_resistance (not y$37)))
(assert (= y$a_too_small_resistance (not y$39)))
(assert (= y$dve_invalid (not y$41)))
(assert (= y$44 (= y$n0s16 y$v_actual_resistance)))
(assert (= y$46 (= y$n0s16 y$v_cage_safe)))
(assert (= y$48 (= y$n0s16 y$v_range)))
(assert (= y$prop (not y$1317)))
(assert (= y$111 (Extract_1_15_15_16 y$v_range)))
(assert (= y$w$6_op (Concat_32_16_16 y$n0s16 y$v_range)))
(assert (= y$s$199_op (BitWiseNot_32_32 y$w$6_op)))
(assert (= y$v3_1517448506_32_op (ShiftR_32_32_32 y$s$199_op y$n16s32)))
(assert (= y$s$198_op (BitWiseNot_32_32 y$v3_1517448506_32_op)))
(assert (= y$v3_1517448506_31_op (ShiftR_32_32_32 y$w$6_op y$n16s32)))
(assert (= y$v3_1517448506_30_op (ite y$111 y$s$198_op y$v3_1517448506_31_op)))
(assert (= y$1275 (not (= y$n0s32 y$v3_1517448506_30_op))))
(assert (= y$v3_1517448506_36_op (ite y$a_too_small_resistance y$n1s32 y$n0s32)))
(assert (= y$1278 (= y$n1s32 y$v3_1517448506_36_op)))
(assert (= y$v3_1517448506_38_op (and y$1275 y$1278)))
(assert (= y$id37_op (and y$41 y$v3_1517448506_38_op)))
(assert (= y$id37_op (not y$1283)))
(assert (= y$1284 (= y$prop y$1283)))
(assert (= y$1344 (and y$1 y$3 y$5 y$7 y$9 y$11 y$13 y$15 y$17 y$19 y$21 y$23 y$25 y$27 y$29 y$31 y$33 y$35 y$37 y$39 y$41 y$44 y$46 y$48 y$1317 y$1284)))
(assert y$1344)
(check-sat)
(exit)
