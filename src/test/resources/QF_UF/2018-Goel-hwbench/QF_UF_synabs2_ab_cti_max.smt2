(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: synabs2
query-maker: "Yices 2"
query-time: 0.186000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$5 0)
(declare-sort utt$27 0)
(declare-sort utt$32 0)
(declare-fun Add_32_32_32 (utt$32 utt$32 ) utt$32)
(declare-fun Concat_32_5_27 (utt$5 utt$27 ) utt$32)
(declare-fun Extract_5_4_0_32 (utt$32 ) utt$5)
(declare-fun Le_1_5_5 (utt$5 utt$5 ) Bool)
(declare-fun y$108 () Bool)
(declare-fun y$109 () Bool)
(declare-fun y$110 () Bool)
(declare-fun y$111 () Bool)
(declare-fun y$113 () Bool)
(declare-fun y$121 () Bool)
(declare-fun y$122 () Bool)
(declare-fun y$128 () Bool)
(declare-fun y$129 () Bool)
(declare-fun y$130 () Bool)
(declare-fun y$131 () Bool)
(declare-fun y$137 () Bool)
(declare-fun y$138 () Bool)
(declare-fun y$14 () utt$5)
(declare-fun y$144 () Bool)
(declare-fun y$145 () Bool)
(declare-fun y$153 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$161 () Bool)
(declare-fun y$162 () Bool)
(declare-fun y$173 () Bool)
(declare-fun y$180 () Bool)
(declare-fun y$181 () Bool)
(declare-fun y$183 () Bool)
(declare-fun y$187 () Bool)
(declare-fun y$196 () Bool)
(declare-fun y$197 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$203 () Bool)
(declare-fun y$204 () Bool)
(declare-fun y$205 () Bool)
(declare-fun y$206 () Bool)
(declare-fun y$22 () utt$5)
(declare-fun y$24 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$36 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$41 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$63 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$71 () Bool)
(declare-fun y$80 () Bool)
(declare-fun y$97 () Bool)
(declare-fun y$98 () Bool)
(declare-fun y$a () utt$5)
(declare-fun y$a$next () utt$5)
(declare-fun y$a$next_rhs () utt$5)
(declare-fun y$b () utt$5)
(declare-fun y$b$next () utt$5)
(declare-fun y$b$next_rhs () utt$5)
(declare-fun y$n0s27 () utt$27)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s5 () utt$5)
(declare-fun y$n1s5 () utt$5)
(declare-fun y$n28s5 () utt$5)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n2s5 () utt$5)
(declare-fun y$n30s32 () utt$32)
(declare-fun y$n30s5 () utt$5)
(declare-fun y$n31s5 () utt$5)
(declare-fun y$n32s32 () utt$32)
(declare-fun y$n4s32 () utt$32)
(declare-fun y$n6s32 () utt$32)
(declare-fun y$n6s5 () utt$5)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0$next () Bool)
(declare-fun y$prop0$next_op () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$w$1 () utt$32)
(declare-fun y$w$1_op () utt$32)
(declare-fun y$w$2 () utt$32)
(declare-fun y$w$2_op () utt$32)
(declare-fun y$w$3 () utt$32)
(declare-fun y$w$3$next () utt$32)
(declare-fun y$w$3$next_op () utt$32)
(declare-fun y$w$3_op () utt$32)
(declare-fun y$w$4 () utt$32)
(declare-fun y$w$4$next () utt$32)
(declare-fun y$w$4$next_op () utt$32)
(declare-fun y$w$4_op () utt$32)
(assert (distinct y$n0s5 y$n6s5 y$n31s5 y$n30s5 y$n28s5 y$n1s5 y$n2s5))
(assert (distinct y$n2s32 y$n0s32 y$n32s32 y$n30s32 y$n6s32 y$n4s32))
(assert (= y$prop0_op (Le_1_5_5 y$a y$b)))
(assert (= y$29 (= y$prop y$prop0_op)))
(assert (= y$w$1_op (Concat_32_5_27 y$b y$n0s27)))
(assert (= y$w$2_op (Add_32_32_32 y$w$1_op y$n2s32)))
(assert (= y$14 (Extract_5_4_0_32 y$w$2_op)))
(assert (= y$16 (= y$b$next y$14)))
(assert (= y$w$3_op (Concat_32_5_27 y$a y$n0s27)))
(assert (= y$w$4_op (Add_32_32_32 y$w$3_op y$n2s32)))
(assert (= y$22 (Extract_5_4_0_32 y$w$4_op)))
(assert (= y$24 (= y$a$next y$22)))
(assert (= y$25 (and y$16 y$24)))
(assert (= y$prop0$next_op (Le_1_5_5 y$a$next y$b$next)))
(assert (= y$40 (= y$prop0$next_op y$prop$next)))
(assert (= y$prop$next (not y$37)))
(assert (= y$47 (= y$n6s5 y$b$next)))
(assert (= y$48 (= y$n0s5 y$a$next)))
(assert (= y$prop0$next_op (not y$49)))
(assert (= y$50 (and y$47 y$48 y$49)))
(assert (= y$50 (not y$52)))
(assert (= y$5 (= y$n6s5 y$b)))
(assert (= y$2 (= y$n0s5 y$a)))
(assert (= y$prop0_op (not y$42)))
(assert (= y$46 (and y$2 y$5 y$42)))
(assert (= y$46 (not y$51)))
(assert (= y$w$3$next_op (Concat_32_5_27 y$a$next y$n0s27)))
(assert (= y$w$4$next_op (Add_32_32_32 y$w$3$next_op y$n2s32)))
(assert (= y$98 (not (= y$n2s32 y$w$4$next_op))))
(assert (= y$109 (and y$48 y$98)))
(assert (= y$109 (not y$111)))
(assert (= y$80 (not (= y$n2s32 y$w$4_op))))
(assert (= y$108 (and y$2 y$80)))
(assert (= y$108 (not y$110)))
(assert (= (= y$n2s32 y$w$4_op) y$121))
(assert (= y$71 (not (= y$a y$b))))
(assert (= y$129 (and y$42 y$121 y$71)))
(assert (= y$129 (not y$131)))
(assert (= (= y$n2s32 y$w$4$next_op) y$113))
(assert (= y$70 (not (= y$b$next y$a$next))))
(assert (= y$128 (and y$49 y$113 y$70)))
(assert (= y$128 (not y$130)))
(assert (= y$144 (and y$24 y$121 y$113)))
(assert (= y$144 (not y$145)))
(assert (= (= y$b$next y$a$next) y$137))
(assert (= y$161 (and y$5 y$16 y$24 y$121 y$137)))
(assert (= y$161 (not y$162)))
(assert (= y$97 (not (= y$n2s32 y$w$3$next_op))))
(assert (= y$180 (and y$24 y$121 y$97)))
(assert (= y$180 (not y$181)))
(assert (= (= y$n2s32 y$w$3$next_op) y$183))
(assert (= y$196 (and y$5 y$49 y$16 y$183)))
(assert (= y$196 (not y$197)))
(assert (= y$204 (and y$prop y$29 y$52 y$51 y$25 y$40 y$37 y$111 y$110 y$131 y$130 y$145 y$162 y$181 y$197)))
(assert y$204)
(assert (distinct y$n0s5 y$n6s5 y$n31s5 y$n30s5 y$n28s5 y$n1s5 y$n2s5))
(assert (distinct y$n2s32 y$n0s32 y$n32s32 y$n30s32 y$n6s32 y$n4s32))
(check-sat)
(exit)
