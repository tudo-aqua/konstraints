(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: sw_loop
query-maker: "Yices 2"
query-time: 0.477000 ms
query-class: abstract
query-category: incremental
query-type: fp
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$3 0)
(declare-fun Add_3_3_3 (utt$3 utt$3 ) utt$3)
(declare-fun Le_1_3_3 (utt$3 utt$3 ) Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$10 () Bool)
(declare-fun p$11 () Bool)
(declare-fun p$12 () Bool)
(declare-fun p$13 () Bool)
(declare-fun p$14 () Bool)
(declare-fun p$2 () Bool)
(declare-fun p$3 () Bool)
(declare-fun p$4 () Bool)
(declare-fun p$5 () Bool)
(declare-fun p$6 () Bool)
(declare-fun p$7 () Bool)
(declare-fun p$8 () Bool)
(declare-fun p$9 () Bool)
(declare-fun y$10 () Bool)
(declare-fun y$12 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$164 () Bool)
(declare-fun y$165 () Bool)
(declare-fun y$167 () Bool)
(declare-fun y$174 () Bool)
(declare-fun y$175 () Bool)
(declare-fun y$176 () Bool)
(declare-fun y$177 () Bool)
(declare-fun y$178 () Bool)
(declare-fun y$179 () Bool)
(declare-fun y$180 () Bool)
(declare-fun y$181 () Bool)
(declare-fun y$182 () Bool)
(declare-fun y$183 () Bool)
(declare-fun y$184 () Bool)
(declare-fun y$185 () Bool)
(declare-fun y$187 () Bool)
(declare-fun y$188 () Bool)
(declare-fun y$189 () Bool)
(declare-fun y$190 () Bool)
(declare-fun y$191 () Bool)
(declare-fun y$193 () Bool)
(declare-fun y$195 () Bool)
(declare-fun y$196 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$200 () Bool)
(declare-fun y$201 () Bool)
(declare-fun y$211 () Bool)
(declare-fun y$212 () Bool)
(declare-fun y$213 () Bool)
(declare-fun y$216 () Bool)
(declare-fun y$217 () Bool)
(declare-fun y$219 () Bool)
(declare-fun y$224 () Bool)
(declare-fun y$225 () Bool)
(declare-fun y$226 () Bool)
(declare-fun y$227 () Bool)
(declare-fun y$228 () Bool)
(declare-fun y$229 () Bool)
(declare-fun y$230 () Bool)
(declare-fun y$234 () Bool)
(declare-fun y$236 () Bool)
(declare-fun y$237 () Bool)
(declare-fun y$238 () Bool)
(declare-fun y$239 () Bool)
(declare-fun y$240 () Bool)
(declare-fun y$243 () Bool)
(declare-fun y$245 () Bool)
(declare-fun y$246 () Bool)
(declare-fun y$247 () Bool)
(declare-fun y$248 () Bool)
(declare-fun y$249 () Bool)
(declare-fun y$250 () Bool)
(declare-fun y$251 () Bool)
(declare-fun y$252 () Bool)
(declare-fun y$253 () Bool)
(declare-fun y$256 () Bool)
(declare-fun y$258 () Bool)
(declare-fun y$263 () Bool)
(declare-fun y$265 () Bool)
(declare-fun y$266 () Bool)
(declare-fun y$267 () Bool)
(declare-fun y$268 () Bool)
(declare-fun y$269 () Bool)
(declare-fun y$271 () Bool)
(declare-fun y$273 () Bool)
(declare-fun y$274 () Bool)
(declare-fun y$275 () Bool)
(declare-fun y$276 () Bool)
(declare-fun y$277 () Bool)
(declare-fun y$282 () Bool)
(declare-fun y$287 () Bool)
(declare-fun y$288 () Bool)
(declare-fun y$289 () Bool)
(declare-fun y$303 () Bool)
(declare-fun y$304 () Bool)
(declare-fun y$305 () Bool)
(declare-fun y$306 () Bool)
(declare-fun y$307 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$310 () Bool)
(declare-fun y$312 () Bool)
(declare-fun y$330 () Bool)
(declare-fun y$331 () Bool)
(declare-fun y$332 () Bool)
(declare-fun y$333 () Bool)
(declare-fun y$334 () Bool)
(declare-fun y$335 () Bool)
(declare-fun y$342 () Bool)
(declare-fun y$352 () Bool)
(declare-fun y$353 () Bool)
(declare-fun y$355 () Bool)
(declare-fun y$356 () Bool)
(declare-fun y$359 () Bool)
(declare-fun y$36 () Bool)
(declare-fun y$360 () Bool)
(declare-fun y$362 () Bool)
(declare-fun y$363 () Bool)
(declare-fun y$366 () Bool)
(declare-fun y$367 () Bool)
(declare-fun y$368 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$57 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$6 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$72 () Bool)
(declare-fun y$74 () Bool)
(declare-fun y$8 () Bool)
(declare-fun y$85 () Bool)
(declare-fun y$99 () Bool)
(declare-fun y$L0 () Bool)
(declare-fun y$L0$next () Bool)
(declare-fun y$L0$next_rhs () Bool)
(declare-fun y$L0$next_rhs_op () Bool)
(declare-fun y$L1 () Bool)
(declare-fun y$L1$next () Bool)
(declare-fun y$L1$next_rhs () Bool)
(declare-fun y$L1$next_rhs_op () Bool)
(declare-fun y$L2 () Bool)
(declare-fun y$L2$next () Bool)
(declare-fun y$L2$next_rhs () Bool)
(declare-fun y$L2$next_rhs_op () Bool)
(declare-fun y$L3 () Bool)
(declare-fun y$L3$next () Bool)
(declare-fun y$L3$next_rhs () Bool)
(declare-fun y$L3$next_rhs_op () Bool)
(declare-fun y$L4 () Bool)
(declare-fun y$L4$next () Bool)
(declare-fun y$L4$next_rhs () Bool)
(declare-fun y$L4$next_rhs_op () Bool)
(declare-fun y$L5 () Bool)
(declare-fun y$L5$next () Bool)
(declare-fun y$L5$next_rhs () Bool)
(declare-fun y$L5$next_rhs_op () Bool)
(declare-fun y$L6 () Bool)
(declare-fun y$L6$next () Bool)
(declare-fun y$L6$next_rhs () Bool)
(declare-fun y$L6$next_rhs_op () Bool)
(declare-fun y$LoneHot () Bool)
(declare-fun y$LoneHot$next () Bool)
(declare-fun y$LoneHot$next_rhs () Bool)
(declare-fun y$LoneHot$next_rhs_op () Bool)
(declare-fun y$X () utt$3)
(declare-fun y$X$next () utt$3)
(declare-fun y$X$next_rhs () utt$3)
(declare-fun y$X$next_rhs_op () utt$3)
(declare-fun y$n0s1 () Bool)
(declare-fun y$n0s3 () utt$3)
(declare-fun y$n3s3 () utt$3)
(declare-fun y$n4s3 () utt$3)
(declare-fun y$n5s3 () utt$3)
(declare-fun y$n7s3 () utt$3)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$s$10 () Bool)
(declare-fun y$s$103 () Bool)
(declare-fun y$s$103_op () Bool)
(declare-fun y$s$104 () Bool)
(declare-fun y$s$104_op () Bool)
(declare-fun y$s$105 () Bool)
(declare-fun y$s$105_op () Bool)
(declare-fun y$s$106 () Bool)
(declare-fun y$s$106_op () Bool)
(declare-fun y$s$107 () Bool)
(declare-fun y$s$107_op () Bool)
(declare-fun y$s$108 () Bool)
(declare-fun y$s$108_op () Bool)
(declare-fun y$s$109 () Bool)
(declare-fun y$s$109_op () Bool)
(declare-fun y$s$10_op () Bool)
(declare-fun y$s$11 () Bool)
(declare-fun y$s$110 () Bool)
(declare-fun y$s$110_op () Bool)
(declare-fun y$s$111 () Bool)
(declare-fun y$s$111_op () Bool)
(declare-fun y$s$115 () Bool)
(declare-fun y$s$115$next () Bool)
(declare-fun y$s$115$next_op () Bool)
(declare-fun y$s$115_op () Bool)
(declare-fun y$s$118 () Bool)
(declare-fun y$s$118$next () Bool)
(declare-fun y$s$118$next_op () Bool)
(declare-fun y$s$118_op () Bool)
(declare-fun y$s$119 () utt$3)
(declare-fun y$s$119_op () utt$3)
(declare-fun y$s$11_op () Bool)
(declare-fun y$s$12 () Bool)
(declare-fun y$s$120 () utt$3)
(declare-fun y$s$120_op () utt$3)
(declare-fun y$s$12_op () Bool)
(declare-fun y$s$13 () Bool)
(declare-fun y$s$13_op () Bool)
(declare-fun y$s$14 () Bool)
(declare-fun y$s$14_op () Bool)
(declare-fun y$s$15 () Bool)
(declare-fun y$s$15_op () Bool)
(declare-fun y$s$16 () Bool)
(declare-fun y$s$16_op () Bool)
(declare-fun y$s$17 () Bool)
(declare-fun y$s$17_op () Bool)
(declare-fun y$s$18 () Bool)
(declare-fun y$s$18_op () Bool)
(declare-fun y$s$19 () Bool)
(declare-fun y$s$19_op () Bool)
(declare-fun y$s$20 () Bool)
(declare-fun y$s$20_op () Bool)
(declare-fun y$s$21 () Bool)
(declare-fun y$s$21_op () Bool)
(declare-fun y$s$23 () Bool)
(declare-fun y$s$23_op () Bool)
(declare-fun y$s$24 () Bool)
(declare-fun y$s$24_op () Bool)
(declare-fun y$s$25 () Bool)
(declare-fun y$s$25_op () Bool)
(declare-fun y$s$26 () Bool)
(declare-fun y$s$26_op () Bool)
(declare-fun y$s$27 () Bool)
(declare-fun y$s$27_op () Bool)
(declare-fun y$s$30 () Bool)
(declare-fun y$s$30_op () Bool)
(declare-fun y$s$31 () Bool)
(declare-fun y$s$31_op () Bool)
(declare-fun y$s$32 () Bool)
(declare-fun y$s$32_op () Bool)
(declare-fun y$s$33 () Bool)
(declare-fun y$s$33_op () Bool)
(declare-fun y$s$37 () Bool)
(declare-fun y$s$37_op () Bool)
(declare-fun y$s$38 () Bool)
(declare-fun y$s$38_op () Bool)
(declare-fun y$s$39 () Bool)
(declare-fun y$s$39_op () Bool)
(declare-fun y$s$44 () Bool)
(declare-fun y$s$44_op () Bool)
(declare-fun y$s$45 () Bool)
(declare-fun y$s$45_op () Bool)
(declare-fun y$s$46 () Bool)
(declare-fun y$s$46_op () Bool)
(declare-fun y$s$47 () Bool)
(declare-fun y$s$47_op () Bool)
(declare-fun y$s$48 () Bool)
(declare-fun y$s$48_op () Bool)
(declare-fun y$s$49 () Bool)
(declare-fun y$s$49_op () Bool)
(declare-fun y$s$50 () Bool)
(declare-fun y$s$50_op () Bool)
(declare-fun y$s$51 () Bool)
(declare-fun y$s$51_op () Bool)
(declare-fun y$s$52 () Bool)
(declare-fun y$s$52_op () Bool)
(declare-fun y$s$53 () Bool)
(declare-fun y$s$53_op () Bool)
(declare-fun y$s$54 () Bool)
(declare-fun y$s$54_op () Bool)
(declare-fun y$s$55 () Bool)
(declare-fun y$s$55_op () Bool)
(declare-fun y$s$56 () Bool)
(declare-fun y$s$56_op () Bool)
(declare-fun y$s$57 () Bool)
(declare-fun y$s$57_op () Bool)
(declare-fun y$s$9 () utt$3)
(declare-fun y$s$9$next () utt$3)
(declare-fun y$s$9$next_op () utt$3)
(declare-fun y$s$9_op () utt$3)
(assert (distinct y$n0s3 y$n7s3 y$n3s3 y$n5s3 y$n4s3))
(assert (= y$L4 (not y$8)))
(assert (= y$s$118_op (Le_1_3_3 y$X y$n7s3)))
(assert (= y$s$118_op (not y$183)))
(assert (= (and y$L4 y$LoneHot y$183) y$238))
(assert (= y$238 (not y$239)))
(assert (= (and y$L1 y$LoneHot y$183) y$247))
(assert (= y$247 (not y$248)))
(assert (= y$s$9_op (Add_3_3_3 y$X y$n3s3)))
(assert (= (not (= y$n7s3 y$s$9_op)) y$312))
(assert (= y$L2 (not y$4)))
(assert (= y$s$118_op (not y$74)))
(assert (= (and y$4 y$74) y$267))
(assert (= y$267 (not y$268)))
(assert (= y$L6 (not y$12)))
(assert (= y$167 (= y$12 y$prop)))
(assert (= y$L6$next (not y$176)))
(assert (= y$177 (= y$prop$next y$176)))
(assert (= y$191 (not (= y$n7s3 y$X))))
(assert (= y$211 (and y$183 y$191)))
(assert (= y$211 (not y$213)))
(assert (= y$s$118$next_op (Le_1_3_3 y$X$next y$n7s3)))
(assert (= y$s$118$next_op (not y$193)))
(assert (= y$196 (not (= y$n7s3 y$X$next))))
(assert (= y$212 (and y$193 y$196)))
(assert (= y$212 (not y$216)))
(assert (= y$s$115$next_op (Le_1_3_3 y$X$next y$n5s3)))
(assert (= y$s$115$next_op (not y$258)))
(assert (= y$s$9$next_op (Add_3_3_3 y$X$next y$n3s3)))
(assert (= y$287 (= y$n7s3 y$s$9$next_op)))
(assert (= y$304 (and y$258 y$287)))
(assert (= y$304 (not y$306)))
(assert (= y$s$115_op (Le_1_3_3 y$X y$n5s3)))
(assert (= y$s$115_op (not y$59)))
(assert (= y$282 (= y$n7s3 y$s$9_op)))
(assert (= y$303 (and y$59 y$282)))
(assert (= y$303 (not y$305)))
(assert (= y$331 (= y$n0s3 y$X$next)))
(assert (= y$332 (and y$287 y$331)))
(assert (= y$332 (not y$334)))
(assert (= y$16 (= y$n0s3 y$X)))
(assert (= y$330 (and y$16 y$282)))
(assert (= y$330 (not y$333)))
(assert (= y$368 (and y$8 y$prop y$167 y$s$118_op y$prop$next y$177 y$213 y$216 y$239 y$248 y$268 y$306 y$305 y$334 y$333 y$312)))
(assert y$368)
(assert (= y$s$9$next_op (Add_3_3_3 y$X$next y$n3s3)))
(assert (= y$287 (= y$n7s3 y$s$9$next_op)))
(assert y$287)
(assert (= y$s$118_op (Le_1_3_3 y$X y$n7s3)))
(assert (= y$s$9_op (Add_3_3_3 y$X y$n3s3)))
(assert (= y$s$119_op (ite y$s$118_op y$s$9_op y$X)))
(assert (= y$s$120_op (ite y$L1 y$s$119_op y$X)))
(assert (= y$X$next_rhs_op (ite y$LoneHot y$s$120_op y$X)))
(assert (= y$31 (= y$X$next y$X$next_rhs_op)))
(assert y$31)
(check-sat)
(exit)
