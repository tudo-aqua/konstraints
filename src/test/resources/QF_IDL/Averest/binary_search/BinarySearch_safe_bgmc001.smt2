(set-info :smt-lib-version 2.6)
(set-logic QF_IDL)
(set-info :source |The Averest Framework (http://www.averest.org)|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun cvclZero () Int)
(declare-fun F0 () Int)
(declare-fun F2 () Int)
(declare-fun F4 () Int)
(declare-fun F6 () Int)
(declare-fun F8 () Int)
(declare-fun F14 () Int)
(declare-fun F16 () Int)
(declare-fun F18 () Int)
(declare-fun F20 () Int)
(declare-fun F22 () Int)
(declare-fun P10 () Bool)
(declare-fun P12 () Bool)
(declare-fun P24 () Bool)
(declare-fun P26 () Bool)
(declare-fun P28 () Bool)
(declare-fun P30 () Bool)
(declare-fun P32 () Bool)
(declare-fun P34 () Bool)
(assert (let ((?v_0 (not P10))) (not (or (not (and (and (and (and (and (and (and (= (- cvclZero F22) 0) (and (= (- cvclZero F20) 0) (and (= (- cvclZero F18) 0) (and (and (= (- cvclZero F14) 0) (and ?v_0 (not P12))) (= (- cvclZero F16) 0))))) (not P24)) (not P26)) (not P28)) (not P30)) (not P32)) (not P34))) (not (and (and (and (or (and P10 (<= (- F18 F16) 0)) (and ?v_0 (<= (- F6 F4) 0))) (or (and P10 (<= (- F16 F14) 0)) (and ?v_0 (<= (- F4 F2) 0)))) (or (and ?v_0 (<= (- F8 F6) 0)) (and P10 (<= (- F20 F18) 0)))) (or (or (and P10 (= (- F22 F20) 0)) (and ?v_0 (= (- F8 F0) 0))) (or (or (or (and ?v_0 (= (- F2 F0) 0)) (and P10 (= (- F22 F14) 0))) (or (and ?v_0 (= (- F4 F0) 0)) (and P10 (= (- F22 F16) 0)))) (or (and P10 (= (- F22 F18) 0)) (and ?v_0 (= (- F6 F0) 0)))))))))))
(check-sat)
(exit)
