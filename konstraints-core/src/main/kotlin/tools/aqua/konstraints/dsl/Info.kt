/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2023-2025 The Konstraints Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tools.aqua.konstraints.dsl

import java.math.BigDecimal
import java.math.BigInteger
import tools.aqua.konstraints.smt.BinaryConstant
import tools.aqua.konstraints.smt.ConstantAttributeValue
import tools.aqua.konstraints.smt.DecimalConstant
import tools.aqua.konstraints.smt.HexConstant
import tools.aqua.konstraints.smt.NumeralConstant
import tools.aqua.konstraints.smt.SatStatus
import tools.aqua.konstraints.smt.SetInfo
import tools.aqua.konstraints.smt.StringConstant
import tools.aqua.konstraints.smt.Symbol
import tools.aqua.konstraints.smt.SymbolAttributeValue
import tools.aqua.konstraints.smt.toSymbolWithQuotes

enum class BenchmarkCategory {
  /** hand-crafted benchmark */
  CRAFTED,

  /** benchmark generated by a random process */
  RANDOM,

  /** benchmarks that do not classify as [CRAFTED] or [RANDOM] */
  INDUSTRIAL;

  override fun toString() =
      when (this) {
        CRAFTED -> "crafted"
        RANDOM -> "random"
        INDUSTRIAL -> "industrial"
      }
}

/**
 * Build [infos.add(SetInfo] commands in program dsl.
 * - Implements a function for each stand info flag, refer to the
 *   [smt-lib-reference 4.2.9](https://smt-lib.org/papers/smt-lib-reference-v2.7-r2025-07-07.pdf#page=75)
 *   for more information on standard flags
 * - All custom info flags can be set using [InfoBuilder.set_to]
 * - For Binary and Hexadecimal values use [InfoBuilder.set_to_bin] and [InfoBuilder.set_to_hex]
 *   respectively
 */
class InfoBuilder {
  val infos = mutableListOf<SetInfo>()

  /**
   * Set `smt-lib-version` flag to [version].
   * - version must be a valid decimal (so format `Numeral`.`Numeral` without leading zeros)
   */
  fun smtLibVersion(version: String) =
      this.apply {
        require(version.all { ch -> ch.isDigit() || ch == '.' })
        infos.add(
            SetInfo(
                ":smt-lib-version",
                ConstantAttributeValue(DecimalConstant(BigDecimal(version))),
            )
        )
      }

  /**
   * Shorthand for setting `smt-lib-version` flag to [version].
   * - version must be a valid decimal (so format `Numeral`.`Numeral` without leading zeros)
   */
  fun version(version: String) =
      this.apply {
        require(version.all { ch -> ch.isDigit() || ch == '.' })
        infos.add(
            SetInfo(
                ":smt-lib-version",
                ConstantAttributeValue(DecimalConstant(BigDecimal(version))),
            )
        )
      }

  /**
   * Set `source` flag to [source].
   * - [source] must be a valid [Symbol] and will be automatically quoted.
   */
  fun source(source: String) =
      this.apply {
        infos.add(
            SetInfo(
                ":smt-lib-source",
                SymbolAttributeValue("|${source.removeSurrounding("|")}|".toSymbolWithQuotes()),
            )
        )
      }

  /**
   * Set `license` flag to [license].
   * - [license] must be a valid smt string.
   */
  fun license(license: String) =
      this.apply { infos.add(SetInfo(":license", ConstantAttributeValue(StringConstant(license)))) }

  /** Set `category` flag */
  fun category(category: BenchmarkCategory) =
      this.apply {
        infos.add(SetInfo(":category", ConstantAttributeValue(StringConstant(category.toString()))))
      }

  /** Set `status` flag */
  fun status(status: SatStatus) =
      this.apply {
        infos.add(SetInfo(":status", ConstantAttributeValue(StringConstant(status.toString()))))
      }

  /**
   * Set info flag [this] to [symbol].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(symbol: Symbol): InfoBuilder {
    infos.add(SetInfo(":${this.removePrefix(":")}", SymbolAttributeValue(symbol)))
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [numeral].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(numeral: Byte): InfoBuilder {
    infos.add(
        SetInfo(
            ":${this.removePrefix(":")}",
            ConstantAttributeValue(NumeralConstant(numeral.toInt().toBigInteger())),
        )
    )
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [numeral].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(numeral: Short): InfoBuilder {
    infos.add(
        SetInfo(
            ":${this.removePrefix(":")}",
            ConstantAttributeValue(NumeralConstant(numeral.toInt().toBigInteger())),
        )
    )
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [numeral].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(numeral: Int): InfoBuilder {
    infos.add(
        SetInfo(
            ":${this.removePrefix(":")}",
            ConstantAttributeValue(NumeralConstant(numeral.toBigInteger())),
        )
    )
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [numeral].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(numeral: Long): InfoBuilder {
    infos.add(
        SetInfo(
            ":${this.removePrefix(":")}",
            ConstantAttributeValue(NumeralConstant(numeral.toBigInteger())),
        )
    )
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [numeral].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(numeral: BigInteger): InfoBuilder {
    infos.add(
        SetInfo(":${this.removePrefix(":")}", ConstantAttributeValue(NumeralConstant(numeral)))
    )
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [numeral].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(numeral: Float): InfoBuilder {
    infos.add(
        SetInfo(
            ":${this.removePrefix(":")}",
            ConstantAttributeValue(DecimalConstant(numeral.toBigDecimal())),
        )
    )
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [numeral].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(numeral: Double): InfoBuilder {
    infos.add(
        SetInfo(
            ":${this.removePrefix(":")}",
            ConstantAttributeValue(DecimalConstant(numeral.toBigDecimal())),
        )
    )
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [numeral].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(numeral: BigDecimal): InfoBuilder {
    infos.add(
        SetInfo(":${this.removePrefix(":")}", ConstantAttributeValue(DecimalConstant(numeral)))
    )
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [string].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to(string: String): InfoBuilder {
    infos.add(SetInfo(":${this.removePrefix(":")}", ConstantAttributeValue(StringConstant(string))))
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [hex].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to_hex(hex: String): InfoBuilder {
    infos.add(SetInfo(":${this.removePrefix(":")}", ConstantAttributeValue(HexConstant(hex))))
    return this@InfoBuilder
  }

  /**
   * Set info flag [this] to [binary].
   * - Prefix ':' is automatically added to [this] if not already present
   */
  infix fun String.set_to_bin(binary: String): InfoBuilder {
    infos.add(SetInfo(":${this.removePrefix(":")}", ConstantAttributeValue(BinaryConstant(binary))))
    return this@InfoBuilder
  }
}
