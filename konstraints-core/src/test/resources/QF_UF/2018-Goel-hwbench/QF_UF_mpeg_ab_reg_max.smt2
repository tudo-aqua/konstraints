(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: mpeg
query-maker: "Yices 2"
query-time: 0.063000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$2 0)
(declare-sort utt$3 0)
(declare-sort utt$4 0)
(declare-sort utt$8 0)
(declare-sort utt$16 0)
(declare-sort utt$31 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_1_31 (Bool utt$31 ) utt$32)
(declare-fun y$1025 () Bool)
(declare-fun y$1028 () Bool)
(declare-fun y$1036 () Bool)
(declare-fun y$1047 () Bool)
(declare-fun y$1049 () Bool)
(declare-fun y$1059 () Bool)
(declare-fun y$1060 () Bool)
(declare-fun y$1061 () Bool)
(declare-fun y$1062 () Bool)
(declare-fun y$1063 () Bool)
(declare-fun y$1064 () Bool)
(declare-fun y$1072 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$147 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$24 () Bool)
(declare-fun y$26 () Bool)
(declare-fun y$28 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$34 () Bool)
(declare-fun y$36 () Bool)
(declare-fun y$38 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$45 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$54 () Bool)
(declare-fun y$56 () Bool)
(declare-fun y$58 () Bool)
(declare-fun y$60 () Bool)
(declare-fun y$63 () Bool)
(declare-fun y$65 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$69 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$mod1.output_buffer () utt$8)
(declare-fun y$mod2.count_over () Bool)
(declare-fun y$mod2.count_value () utt$3)
(declare-fun y$mod3.state () utt$3)
(declare-fun y$mod3.stop () Bool)
(declare-fun y$mod3.stop$next () Bool)
(declare-fun y$mod4.count () utt$3)
(declare-fun y$mod4.stop () Bool)
(declare-fun y$mod5.state () utt$3)
(declare-fun y$mod5.stop () Bool)
(declare-fun y$mod6.count () utt$3)
(declare-fun y$mod6.count1 () utt$2)
(declare-fun y$mod6.flag () Bool)
(declare-fun y$mod6.stop () Bool)
(declare-fun y$mod6.stream_id_temp () utt$8)
(declare-fun y$mod7.NumBytes () utt$16)
(declare-fun y$mod7.done () Bool)
(declare-fun y$mod7.module1.done () Bool)
(declare-fun y$mod7.module1.state () utt$2)
(declare-fun y$mod7.module2.done () Bool)
(declare-fun y$mod7.module2.state () utt$4)
(declare-fun y$mod7.module2.timeBytes () utt$4)
(declare-fun y$mod7.packet_length () utt$16)
(declare-fun y$mod7.state () utt$4)
(declare-fun y$mod7.stream_done () Bool)
(declare-fun y$mod7.stream_id () utt$8)
(declare-fun y$mod7.timeStampFlag () Bool)
(declare-fun y$mod7.time_stamp_start () Bool)
(declare-fun y$n0s16 () utt$16)
(declare-fun y$n0s2 () utt$2)
(declare-fun y$n0s3 () utt$3)
(declare-fun y$n0s31 () utt$31)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s4 () utt$4)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n10s4 () utt$4)
(declare-fun y$n11s4 () utt$4)
(declare-fun y$n128s8 () utt$8)
(declare-fun y$n12s4 () utt$4)
(declare-fun y$n131s8 () utt$8)
(declare-fun y$n13s4 () utt$4)
(declare-fun y$n15s4 () utt$4)
(declare-fun y$n15s8 () utt$8)
(declare-fun y$n185s8 () utt$8)
(declare-fun y$n186s8 () utt$8)
(declare-fun y$n191s8 () utt$8)
(declare-fun y$n195s8 () utt$8)
(declare-fun y$n1s2 () utt$2)
(declare-fun y$n1s3 () utt$3)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s4 () utt$4)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n221s8 () utt$8)
(declare-fun y$n255s8 () utt$8)
(declare-fun y$n2s2 () utt$2)
(declare-fun y$n2s3 () utt$3)
(declare-fun y$n2s4 () utt$4)
(declare-fun y$n3s2 () utt$2)
(declare-fun y$n3s3 () utt$3)
(declare-fun y$n3s4 () utt$4)
(declare-fun y$n3s8 () utt$8)
(declare-fun y$n4s3 () utt$3)
(declare-fun y$n4s4 () utt$4)
(declare-fun y$n5s3 () utt$3)
(declare-fun y$n5s4 () utt$4)
(declare-fun y$n67s8 () utt$8)
(declare-fun y$n6s3 () utt$3)
(declare-fun y$n6s4 () utt$4)
(declare-fun y$n7s3 () utt$3)
(declare-fun y$n7s4 () utt$4)
(declare-fun y$n7s8 () utt$8)
(declare-fun y$n8s4 () utt$4)
(declare-fun y$n93s8 () utt$8)
(declare-fun y$n9s4 () utt$4)
(declare-fun y$packHeadStart () Bool)
(declare-fun y$packParseStart () Bool)
(declare-fun y$packetStart () Bool)
(declare-fun y$prop () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$sysHeadParseStart () Bool)
(declare-fun y$sysHeadStart () Bool)
(declare-fun y$w$26 () utt$32)
(declare-fun y$w$26$next () utt$32)
(declare-fun y$w$26$next_op () utt$32)
(declare-fun y$w$26_op () utt$32)
(declare-fun y$w$27 () utt$32)
(declare-fun y$w$27_op () utt$32)
(assert (distinct y$n0s2 y$n2s2 y$n1s2 y$n3s2))
(assert (distinct y$n0s3 y$n7s3 y$n3s3 y$n2s3 y$n1s3 y$n4s3 y$n5s3 y$n6s3))
(assert (distinct y$n0s4 y$n15s4 y$n4s4 y$n5s4 y$n6s4 y$n7s4 y$n8s4 y$n2s4 y$n3s4 y$n9s4 y$n10s4 y$n11s4 y$n12s4 y$n13s4 y$n1s4))
(assert (distinct y$n255s8 y$n0s8 y$n93s8 y$n1s8 y$n221s8 y$n128s8 y$n67s8 y$n195s8 y$n7s8 y$n131s8 y$n3s8 y$n191s8 y$n186s8 y$n185s8 y$n15s8))
(assert (not (= y$n1s32 y$n0s32)))
(assert (= y$2 (= y$n255s8 y$mod1.output_buffer)))
(assert (= y$mod2.count_over (not y$4)))
(assert (= y$7 (= y$n0s3 y$mod2.count_value)))
(assert (= y$9 (= y$n0s3 y$mod3.state)))
(assert (= y$mod3.stop (not y$11)))
(assert (= y$13 (= y$n0s3 y$mod4.count)))
(assert (= y$mod4.stop (not y$15)))
(assert (= y$17 (= y$n0s3 y$mod5.state)))
(assert (= y$mod5.stop (not y$19)))
(assert (= y$21 (= y$n0s3 y$mod6.count)))
(assert (= y$24 (= y$n0s2 y$mod6.count1)))
(assert (= y$mod6.flag (not y$26)))
(assert (= y$mod6.stop (not y$28)))
(assert (= y$31 (= y$n0s8 y$mod6.stream_id_temp)))
(assert (= y$34 (= y$mod7.NumBytes y$n0s16)))
(assert (= y$mod7.done (not y$36)))
(assert (= y$mod7.module1.done (not y$38)))
(assert (= y$40 (= y$n0s2 y$mod7.module1.state)))
(assert (= y$mod7.module2.done (not y$42)))
(assert (= y$45 (= y$n0s4 y$mod7.module2.state)))
(assert (= y$47 (= y$n0s4 y$mod7.module2.timeBytes)))
(assert (= y$49 (= y$n0s16 y$mod7.packet_length)))
(assert (= y$52 (= y$n15s4 y$mod7.state)))
(assert (= y$mod7.stream_done (not y$54)))
(assert (= y$56 (= y$n0s8 y$mod7.stream_id)))
(assert (= y$mod7.timeStampFlag (not y$58)))
(assert (= y$mod7.time_stamp_start (not y$60)))
(assert (= y$packParseStart (not y$63)))
(assert (= y$packetStart (not y$65)))
(assert (= y$sysHeadParseStart (not y$67)))
(assert (= y$sysHeadStart (not y$69)))
(assert (= y$prop (not y$1036)))
(assert (= y$w$26_op (Concat_32_1_31 y$mod3.stop y$n0s31)))
(assert (= y$1025 (= y$n0s32 y$w$26_op)))
(assert (= y$w$27_op (Concat_32_1_31 y$packHeadStart y$n0s31)))
(assert (= y$147 (= y$n1s32 y$w$27_op)))
(assert (= y$prop0_op (and y$1025 y$147)))
(assert (= y$1028 (= y$prop y$prop0_op)))
(assert (= y$mod3.stop$next (not y$1060)))
(assert (= y$w$26$next_op (Concat_32_1_31 y$mod3.stop$next y$n0s31)))
(assert (= y$1061 (not (= y$n0s32 y$w$26$next_op))))
(assert (= y$1062 (and y$1060 y$1061)))
(assert (= y$1062 (not y$1064)))
(assert (= (not (= y$n0s32 y$w$26_op)) y$1049))
(assert (= y$1059 (and y$11 y$1049)))
(assert (= y$1059 (not y$1063)))
(assert (= y$1072 (and y$2 y$4 y$7 y$9 y$11 y$13 y$15 y$17 y$19 y$21 y$24 y$26 y$28 y$31 y$34 y$36 y$38 y$40 y$42 y$45 y$47 y$49 y$52 y$54 y$56 y$58 y$60 y$packHeadStart y$63 y$65 y$67 y$69 y$1036 y$1028 y$1064 y$1063)))
(assert y$1072)
(check-sat)
(exit)
