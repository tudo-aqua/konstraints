(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: elevator_planning.2.prop1
query-maker: "Yices 2"
query-time: 0.001000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$8 0)
(declare-sort utt$32 0)
(declare-fun y$1 () Bool)
(declare-fun y$10 () Bool)
(declare-fun y$12 () Bool)
(declare-fun y$1318 () Bool)
(declare-fun y$1319 () Bool)
(declare-fun y$1348 () Bool)
(declare-fun y$1355 () Bool)
(declare-fun y$14 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$18 () Bool)
(declare-fun y$20 () Bool)
(declare-fun y$22 () Bool)
(declare-fun y$24 () Bool)
(declare-fun y$26 () Bool)
(declare-fun y$28 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$30 () Bool)
(declare-fun y$32 () Bool)
(declare-fun y$34 () Bool)
(declare-fun y$36 () Bool)
(declare-fun y$38 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$44 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$54 () Bool)
(declare-fun y$56 () Bool)
(declare-fun y$58 () Bool)
(declare-fun y$60 () Bool)
(declare-fun y$62 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$66 () Bool)
(declare-fun y$68 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$72 () Bool)
(declare-fun y$8 () Bool)
(declare-fun y$a_done () Bool)
(declare-fun y$a_q () Bool)
(declare-fun y$dve_invalid () Bool)
(declare-fun y$id39 () Bool)
(declare-fun y$id39_op () Bool)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n255s8 () utt$8)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n2s8 () utt$8)
(declare-fun y$n3s32 () utt$32)
(declare-fun y$n3s8 () utt$8)
(declare-fun y$n4s8 () utt$8)
(declare-fun y$n5s8 () utt$8)
(declare-fun y$n6s8 () utt$8)
(declare-fun y$prop () Bool)
(declare-fun y$v_alone () utt$8)
(declare-fun y$v_at () utt$8)
(declare-fun y$v_conflictA_0 () utt$8)
(declare-fun y$v_conflictA_1 () utt$8)
(declare-fun y$v_conflictA_2 () utt$8)
(declare-fun y$v_conflictA_3 () utt$8)
(declare-fun y$v_conflictA_4 () utt$8)
(declare-fun y$v_conflictA_5 () utt$8)
(declare-fun y$v_conflictA_6 () utt$8)
(declare-fun y$v_conflictB_0 () utt$8)
(declare-fun y$v_conflictB_1 () utt$8)
(declare-fun y$v_conflictB_2 () utt$8)
(declare-fun y$v_conflictB_3 () utt$8)
(declare-fun y$v_conflictB_4 () utt$8)
(declare-fun y$v_conflictB_5 () utt$8)
(declare-fun y$v_conflictB_6 () utt$8)
(declare-fun y$v_in () utt$8)
(declare-fun y$v_inA () utt$8)
(declare-fun y$v_inB () utt$8)
(declare-fun y$v_not_alone_0 () utt$8)
(declare-fun y$v_not_alone_1 () utt$8)
(declare-fun y$v_not_alone_2 () utt$8)
(declare-fun y$v_not_alone_3 () utt$8)
(declare-fun y$v_not_alone_4 () utt$8)
(declare-fun y$v_not_alone_5 () utt$8)
(declare-fun y$v_not_alone_6 () utt$8)
(declare-fun y$v_person_0 () utt$8)
(declare-fun y$v_person_1 () utt$8)
(declare-fun y$v_person_2 () utt$8)
(declare-fun y$v_person_3 () utt$8)
(declare-fun y$v_person_4 () utt$8)
(declare-fun y$v_person_5 () utt$8)
(declare-fun y$v_person_6 () utt$8)
(assert (distinct y$n0s8 y$n255s8 y$n1s8 y$n2s8 y$n3s8 y$n4s8 y$n6s8 y$n5s8))
(assert (distinct y$n1s32 y$n3s32 y$n0s32 y$n2s32))
(assert (= y$a_done (not y$1)))
(assert (= y$a_q (not y$3)))
(assert (= y$dve_invalid (not y$5)))
(assert (= y$8 (= y$n0s8 y$v_alone)))
(assert (= y$10 (= y$n0s8 y$v_at)))
(assert (= y$12 (= y$n0s8 y$v_conflictA_0)))
(assert (= y$14 (= y$n0s8 y$v_conflictA_1)))
(assert (= y$16 (= y$n0s8 y$v_conflictA_2)))
(assert (= y$18 (= y$n0s8 y$v_conflictA_3)))
(assert (= y$20 (= y$n0s8 y$v_conflictA_4)))
(assert (= y$22 (= y$n0s8 y$v_conflictA_5)))
(assert (= y$24 (= y$n0s8 y$v_conflictA_6)))
(assert (= y$26 (= y$n0s8 y$v_conflictB_0)))
(assert (= y$28 (= y$n0s8 y$v_conflictB_1)))
(assert (= y$30 (= y$n0s8 y$v_conflictB_2)))
(assert (= y$32 (= y$n0s8 y$v_conflictB_3)))
(assert (= y$34 (= y$n0s8 y$v_conflictB_4)))
(assert (= y$36 (= y$n0s8 y$v_conflictB_5)))
(assert (= y$38 (= y$n0s8 y$v_conflictB_6)))
(assert (= y$40 (= y$n0s8 y$v_in)))
(assert (= y$42 (= y$n0s8 y$v_inA)))
(assert (= y$44 (= y$n0s8 y$v_inB)))
(assert (= y$46 (= y$n0s8 y$v_not_alone_0)))
(assert (= y$48 (= y$n0s8 y$v_not_alone_1)))
(assert (= y$50 (= y$n0s8 y$v_not_alone_2)))
(assert (= y$52 (= y$n0s8 y$v_not_alone_3)))
(assert (= y$54 (= y$n0s8 y$v_not_alone_4)))
(assert (= y$56 (= y$n0s8 y$v_not_alone_5)))
(assert (= y$58 (= y$n0s8 y$v_not_alone_6)))
(assert (= y$60 (= y$n0s8 y$v_person_0)))
(assert (= y$62 (= y$n0s8 y$v_person_1)))
(assert (= y$64 (= y$n0s8 y$v_person_2)))
(assert (= y$66 (= y$n0s8 y$v_person_3)))
(assert (= y$68 (= y$n0s8 y$v_person_4)))
(assert (= y$70 (= y$n0s8 y$v_person_5)))
(assert (= y$72 (= y$n0s8 y$v_person_6)))
(assert (= y$prop (not y$1348)))
(assert (= y$id39_op (and y$a_done y$5)))
(assert (= y$id39_op (not y$1318)))
(assert (= y$1319 (= y$prop y$1318)))
(assert (= y$1355 (and y$1 y$3 y$5 y$8 y$10 y$12 y$14 y$16 y$18 y$20 y$22 y$24 y$26 y$28 y$30 y$32 y$34 y$36 y$38 y$40 y$42 y$44 y$46 y$48 y$50 y$52 y$54 y$56 y$58 y$60 y$62 y$64 y$66 y$68 y$70 y$72 y$1348 y$1319)))
(assert y$1355)
(check-sat)
(exit)
