(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_b05
query-maker: "Yices 2"
query-time: 0.001000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$3 0)
(declare-sort utt$5 0)
(declare-sort utt$9 0)
(declare-sort utt$31 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_1_31 (Bool utt$31 ) utt$32)
(declare-fun y$1 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$1278 () Bool)
(declare-fun y$1282 () Bool)
(declare-fun y$1286 () Bool)
(declare-fun y$1287 () Bool)
(declare-fun y$1292 () Bool)
(declare-fun y$1298 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$1313 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$18 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$6 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$EN_DISP () Bool)
(declare-fun y$FLAG () Bool)
(declare-fun y$MAR () utt$5)
(declare-fun y$MAX () utt$9)
(declare-fun y$NUM () utt$5)
(declare-fun y$RES_DISP () Bool)
(declare-fun y$STATO () utt$3)
(declare-fun y$TEMP () utt$9)
(declare-fun y$n0s3 () utt$3)
(declare-fun y$n0s31 () utt$31)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s5 () utt$5)
(declare-fun y$n0s9 () utt$9)
(declare-fun y$n100s9 () utt$9)
(declare-fun y$n10s32 () utt$32)
(declare-fun y$n10s9 () utt$9)
(declare-fun y$n11s32 () utt$32)
(declare-fun y$n125s9 () utt$9)
(declare-fun y$n12s32 () utt$32)
(declare-fun y$n13s32 () utt$32)
(declare-fun y$n14s32 () utt$32)
(declare-fun y$n151s9 () utt$9)
(declare-fun y$n15s32 () utt$32)
(declare-fun y$n16s32 () utt$32)
(declare-fun y$n17s32 () utt$32)
(declare-fun y$n181s9 () utt$9)
(declare-fun y$n186s9 () utt$9)
(declare-fun y$n18s32 () utt$32)
(declare-fun y$n19s32 () utt$32)
(declare-fun y$n1s3 () utt$3)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n20s32 () utt$32)
(declare-fun y$n21s32 () utt$32)
(declare-fun y$n229s9 () utt$9)
(declare-fun y$n22s32 () utt$32)
(declare-fun y$n23s32 () utt$32)
(declare-fun y$n24s32 () utt$32)
(declare-fun y$n25s32 () utt$32)
(declare-fun y$n26s32 () utt$32)
(declare-fun y$n27s32 () utt$32)
(declare-fun y$n28s32 () utt$32)
(declare-fun y$n29s32 () utt$32)
(declare-fun y$n2s3 () utt$3)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n31s32 () utt$32)
(declare-fun y$n3s3 () utt$3)
(declare-fun y$n3s32 () utt$32)
(declare-fun y$n40s9 () utt$9)
(declare-fun y$n462s9 () utt$9)
(declare-fun y$n483s9 () utt$9)
(declare-fun y$n490s9 () utt$9)
(declare-fun y$n494s9 () utt$9)
(declare-fun y$n4s3 () utt$3)
(declare-fun y$n4s32 () utt$32)
(declare-fun y$n501s9 () utt$9)
(declare-fun y$n502s9 () utt$9)
(declare-fun y$n50s9 () utt$9)
(declare-fun y$n5s32 () utt$32)
(declare-fun y$n6s32 () utt$32)
(declare-fun y$n75s9 () utt$9)
(declare-fun y$n7s32 () utt$32)
(declare-fun y$n8s32 () utt$32)
(declare-fun y$n9s32 () utt$32)
(declare-fun y$prop () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$prop_1 () Bool)
(declare-fun y$prop_1_op () Bool)
(declare-fun y$prop_2 () Bool)
(declare-fun y$prop_2_op () Bool)
(declare-fun y$w$7 () utt$32)
(declare-fun y$w$7_op () utt$32)
(assert (distinct y$n0s3 y$n2s3 y$n3s3 y$n4s3 y$n1s3))
(assert (distinct y$n0s9 y$n50s9 y$n40s9 y$n229s9 y$n502s9 y$n75s9 y$n181s9 y$n186s9 y$n501s9 y$n483s9 y$n494s9 y$n151s9 y$n100s9 y$n125s9 y$n10s9 y$n462s9 y$n490s9))
(assert (distinct y$n31s32 y$n1s32 y$n0s32 y$n2s32 y$n3s32 y$n4s32 y$n5s32 y$n6s32 y$n7s32 y$n8s32 y$n9s32 y$n10s32 y$n11s32 y$n12s32 y$n13s32 y$n14s32 y$n15s32 y$n16s32 y$n17s32 y$n18s32 y$n19s32 y$n20s32 y$n21s32 y$n22s32 y$n23s32 y$n24s32 y$n25s32 y$n26s32 y$n27s32 y$n28s32 y$n29s32))
(assert (= y$EN_DISP (not y$1)))
(assert (= y$FLAG (not y$3)))
(assert (= y$6 (= y$MAR y$n0s5)))
(assert (= y$9 (= y$n0s9 y$MAX)))
(assert (= y$11 (= y$n0s5 y$NUM)))
(assert (= y$RES_DISP (not y$13)))
(assert (= y$16 (= y$n0s3 y$STATO)))
(assert (= y$18 (= y$n0s9 y$TEMP)))
(assert (= y$prop (not y$1298)))
(assert (= y$1278 (not (= y$n2s3 y$STATO))))
(assert (= y$w$7_op (Concat_32_1_31 y$RES_DISP y$n0s31)))
(assert (= y$1282 (= y$n1s32 y$w$7_op)))
(assert (= y$prop_1_op (or y$1278 y$1282)))
(assert (= y$1286 (not (= y$n3s3 y$STATO))))
(assert (= y$1287 (= y$MAX y$TEMP)))
(assert (= y$prop_2_op (or y$1286 y$1287)))
(assert (= y$prop0_op (and y$prop_1_op y$prop_2_op)))
(assert (= y$1292 (= y$prop y$prop0_op)))
(assert (= y$1313 (and y$1 y$3 y$6 y$9 y$11 y$13 y$16 y$18 y$1298 y$1292)))
(assert y$1313)
(check-sat)
(exit)
