(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_Barrel
query-maker: "Yices 2"
query-time: 0.218000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$2 0)
(declare-fun y$105 () Bool)
(declare-fun y$106 () Bool)
(declare-fun y$107 () Bool)
(declare-fun y$108 () Bool)
(declare-fun y$109 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$110 () Bool)
(declare-fun y$111 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$18 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$20 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$34 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$45 () Bool)
(declare-fun y$56 () Bool)
(declare-fun y$6 () Bool)
(declare-fun y$63 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$65 () Bool)
(declare-fun y$66 () Bool)
(declare-fun y$69 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$8 () Bool)
(declare-fun y$81 () Bool)
(declare-fun y$82 () Bool)
(declare-fun y$93 () Bool)
(declare-fun y$94 () Bool)
(declare-fun y$b0 () utt$2)
(declare-fun y$b0$next () utt$2)
(declare-fun y$b1 () utt$2)
(declare-fun y$b1$next () utt$2)
(declare-fun y$b2 () utt$2)
(declare-fun y$b2$next () utt$2)
(declare-fun y$b3 () utt$2)
(declare-fun y$b3$next () utt$2)
(declare-fun y$n0s2 () utt$2)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0$next () Bool)
(declare-fun y$prop0$next_op () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$s$18 () Bool)
(declare-fun y$s$18$next () Bool)
(declare-fun y$s$18$next_op () Bool)
(declare-fun y$s$18_op () Bool)
(declare-fun y$s$19 () Bool)
(declare-fun y$s$19$next () Bool)
(declare-fun y$s$19$next_op () Bool)
(declare-fun y$s$19_op () Bool)
(declare-fun y$s$20 () Bool)
(declare-fun y$s$20$next () Bool)
(declare-fun y$s$20$next_op () Bool)
(declare-fun y$s$20_op () Bool)
(declare-fun y$s$21 () Bool)
(declare-fun y$s$21$next () Bool)
(declare-fun y$s$21$next_op () Bool)
(declare-fun y$s$21_op () Bool)
(declare-fun y$s$22 () Bool)
(declare-fun y$s$22$next () Bool)
(declare-fun y$s$22$next_op () Bool)
(declare-fun y$s$22_op () Bool)
(declare-fun y$s$23 () Bool)
(declare-fun y$s$23$next () Bool)
(declare-fun y$s$23$next_op () Bool)
(declare-fun y$s$23_op () Bool)
(declare-fun y$s$24 () Bool)
(declare-fun y$s$24$next () Bool)
(declare-fun y$s$24$next_op () Bool)
(declare-fun y$s$24_op () Bool)
(declare-fun y$s$25 () Bool)
(declare-fun y$s$25$next () Bool)
(declare-fun y$s$25$next_op () Bool)
(declare-fun y$s$25_op () Bool)
(declare-fun y$s$26 () Bool)
(declare-fun y$s$26$next () Bool)
(declare-fun y$s$26$next_op () Bool)
(declare-fun y$s$26_op () Bool)
(declare-fun y$s$27 () Bool)
(declare-fun y$s$27$next () Bool)
(declare-fun y$s$27$next_op () Bool)
(declare-fun y$s$27_op () Bool)
(declare-fun y$s$28 () Bool)
(declare-fun y$s$28$next () Bool)
(declare-fun y$s$28$next_op () Bool)
(declare-fun y$s$28_op () Bool)
(declare-fun y$s$29 () Bool)
(declare-fun y$s$29$next () Bool)
(declare-fun y$s$29$next_op () Bool)
(declare-fun y$s$29_op () Bool)
(declare-fun y$s$37 () Bool)
(declare-fun y$s$37$next () Bool)
(declare-fun y$s$37$next_op () Bool)
(declare-fun y$s$37_op () Bool)
(declare-fun y$s$41 () Bool)
(declare-fun y$s$41$next () Bool)
(declare-fun y$s$41$next_op () Bool)
(declare-fun y$s$41_op () Bool)
(declare-fun y$s$45 () Bool)
(declare-fun y$s$45$next () Bool)
(declare-fun y$s$45$next_op () Bool)
(declare-fun y$s$45_op () Bool)
(assert (= (not (= y$b0 y$n0s2)) y$20))
(assert (= y$4 (= y$n0s2 y$b1)))
(assert (= y$s$18_op (or y$4 y$20)))
(assert (= (not (= y$n0s2 y$b1)) y$23))
(assert (= y$6 (= y$n0s2 y$b2)))
(assert (= y$s$37_op (or y$6 y$23)))
(assert (= y$s$19_op (and y$s$18_op y$s$37_op)))
(assert (= y$s$20_op (and y$s$37_op y$s$19_op)))
(assert (= y$s$21_op (and y$s$37_op y$s$20_op)))
(assert (= y$s$22_op (and y$s$37_op y$s$21_op)))
(assert (= (not (= y$n0s2 y$b2)) y$34))
(assert (= y$8 (= y$n0s2 y$b3)))
(assert (= y$s$41_op (or y$8 y$34)))
(assert (= y$s$23_op (and y$s$22_op y$s$41_op)))
(assert (= y$s$24_op (and y$s$41_op y$s$23_op)))
(assert (= y$s$25_op (and y$s$41_op y$s$24_op)))
(assert (= y$s$26_op (and y$s$41_op y$s$25_op)))
(assert (= (not (= y$n0s2 y$b3)) y$45))
(assert (= y$2 (= y$b0 y$n0s2)))
(assert (= y$s$45_op (or y$2 y$45)))
(assert (= y$s$27_op (and y$s$26_op y$s$45_op)))
(assert (= y$s$28_op (and y$s$45_op y$s$27_op)))
(assert (= y$s$29_op (and y$s$45_op y$s$28_op)))
(assert (= y$prop0_op (and y$s$45_op y$s$29_op)))
(assert (= y$56 (= y$prop y$prop0_op)))
(assert (= y$11 (= y$b1 y$b0$next)))
(assert (= y$13 (= y$b2 y$b1$next)))
(assert (= y$15 (= y$b3 y$b2$next)))
(assert (= y$17 (= y$b1 y$b3$next)))
(assert (= y$18 (and y$11 y$13 y$15 y$17)))
(assert (= y$65 (not (= y$n0s2 y$b0$next))))
(assert (= y$66 (= y$n0s2 y$b1$next)))
(assert (= y$s$18$next_op (or y$65 y$66)))
(assert (= (not (= y$n0s2 y$b1$next)) y$69))
(assert (= y$70 (= y$n0s2 y$b2$next)))
(assert (= y$s$37$next_op (or y$69 y$70)))
(assert (= y$s$19$next_op (and y$s$18$next_op y$s$37$next_op)))
(assert (= y$s$20$next_op (and y$s$37$next_op y$s$19$next_op)))
(assert (= y$s$21$next_op (and y$s$37$next_op y$s$20$next_op)))
(assert (= y$s$22$next_op (and y$s$37$next_op y$s$21$next_op)))
(assert (= (not (= y$n0s2 y$b2$next)) y$81))
(assert (= y$82 (= y$n0s2 y$b3$next)))
(assert (= y$s$41$next_op (or y$81 y$82)))
(assert (= y$s$23$next_op (and y$s$22$next_op y$s$41$next_op)))
(assert (= y$s$24$next_op (and y$s$41$next_op y$s$23$next_op)))
(assert (= y$s$25$next_op (and y$s$41$next_op y$s$24$next_op)))
(assert (= y$s$26$next_op (and y$s$41$next_op y$s$25$next_op)))
(assert (= (not (= y$n0s2 y$b3$next)) y$93))
(assert (= (= y$n0s2 y$b0$next) y$94))
(assert (= y$s$45$next_op (or y$93 y$94)))
(assert (= y$s$27$next_op (and y$s$26$next_op y$s$45$next_op)))
(assert (= y$s$28$next_op (and y$s$45$next_op y$s$27$next_op)))
(assert (= y$s$29$next_op (and y$s$45$next_op y$s$28$next_op)))
(assert (= y$prop0$next_op (and y$s$45$next_op y$s$29$next_op)))
(assert (= y$105 (= y$prop$next y$prop0$next_op)))
(assert (= y$prop$next (not y$64)))
(assert (= y$108 (and y$prop y$56 y$18 y$105 y$64)))
(assert y$108)
(check-sat)
(exit)
