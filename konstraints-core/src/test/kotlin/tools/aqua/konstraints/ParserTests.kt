/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2023-2025 The Konstraints Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tools.aqua.konstraints

import java.lang.Exception
import java.util.stream.Stream
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.TestInstance
import org.junit.jupiter.api.assertThrows
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.Arguments.arguments
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.params.provider.ValueSource
import org.petitparser.context.ParseError
import tools.aqua.konstraints.parser.*
import tools.aqua.konstraints.smt.*

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class ParserTests {
  @ParameterizedTest
  @ValueSource(
      strings =
          [
              "(declare-const A Bool)",
              "(declare-const B (_ BitVec 32))",
              "(declare-fun A () Bool)",
              "(declare-fun B () Bool)",
              "(declare-fun C () Bool)",
              "(assert (and (or (not A) (not B)) (xor A B (not C)) (and B (or A C))))",
              "(check-sat)",
              "(declare-fun A (Bool (_ BitVec 32)) (_ BitVec 16))",
              /* QF_BV 20190311-bv-small-term-rw-Noetzli / bv-term-small-rw_1.smt */
              "(declare-fun s () (_ BitVec 32))",
              "(declare-fun t () (_ BitVec 32))",
              "(assert (not (= (bvand s s) s)))",
              /* QF_BV 20190311-bv-small-term-rw-Noetzli / bv-term-small-rw_100.smt */
              "(assert (not (= (bvlshr s (bvshl t #b00000000000000000000000000000000)) (bvlshr s t))))",
              "(assert (forall (( x ( List Int )) ( y ( List Int ))) (= ( append x y ) ( ite (= x ( as nil ( List Int ))) y ( let (( h ( head x )) ( t ( tail x ))) ( insert h ( append t y )))))))",
              "(assert (bvult ((_ extract 15 0) foo) bar))",
              "(assert (= A B))",
              "(set-info :info 1)",
              "(set-info :smt-lib-version 2.6)",
              "(set-info :source |\n" +
                  "Generated by: Andres Noetzli, Andrew Reynolds, Haniel Barbosa, Aina Niemetz, Mathias Preiner, Clark Barrett, Cesare Tinelli\n" +
                  "Generated on: 2018-11-08\n" +
                  "Generator: CVC4\n" +
                  "Application: Rewrite rule verification\n" +
                  "Publications: \"Syntax-Guided Rewrite Rule Enumeration for SMT Solvers\" by A. Noetzli, A. Reynolds, H. Barbosa, A. Niemetz, M. Preiner, C. Barrett, and C. Tinelli, SAT 2019.\n" +
                  "|)",
              "(set-info :license \"https://creativecommons.org/licenses/by/4.0/\")",
              "(set-info :category \"industrial\")",
              "(set-info :status unsat)",
              "(set-logic QF_BV)",
              "(set-logic QF_UF)"])
  fun testCommandParsing(statement: String) {
    val result = Parser.command.parse(statement)

    if (result.isSuccess) {
      println(result.get<String>())
    } else {
      throw ParseError(result.failure(result.message))
    }
  }

  @ParameterizedTest
  @ValueSource(
      strings =
          [
              "(set-logic QF_UF)(set-info :status sat)(declare-fun A () Bool)(push 1)(declare-fun B () Bool)(assert (= A B))(pop 1)(assert (= A B))(check-sat)"])
  fun testPushPopFails(program: String) {
    assertThrows<IllegalStateException> { Parser.parse(program) }
  }

  @ParameterizedTest
  @ValueSource(
      strings =
          [
              "(declare-fun A Bool)",
              "(assert (not (= (bvlshr s (bvshl t #b00000000000000000000000000000000)) (bvlshr s t)))"])
  fun testIllegalCommands(command: String) {
    val result = Parser.command.parse(command)
    assert(result.isFailure)

    println(result.message)
    println(result.position)
    println(result.buffer)
  }

  @ParameterizedTest
  @ValueSource(
      strings =
          [
              "Bool",
              "(_ BitVec 32)",
              "(List (Array Int Real))",
              "((_ FixedSizeList 4) Real)",
              "(Set (_ BitVec 32))"])
  fun testSortParsing(input: String) {
    val result = Parser.sort.parse(input)

    if (result.isSuccess) println(result.get<Any>()) else throw Exception()
  }

  @ParameterizedTest
  @ValueSource(
      strings =
          [
              "(set-info :info 1)(declare-fun s () (_ BitVec 32))(declare-fun t () (_ BitVec 32))(assert (not (= (bvand s s) s)))(check-sat)"])
  fun testScriptParsing(script: String) {
    val result = Parser.script.parse(script)

    if (result.isSuccess) {
      println(result.get<String>())
    } else {
      throw ParseError(result.failure(result.message))
    }
  }

  @ParameterizedTest
  @ValueSource(
      strings =
          [
              ":produce-models true",
              ":smt-lib-version 2.6",
              ":funs ( (par (X) (emptySet (Set X)))\n" +
                  "(par (X) (univSet (Set X)))\n" +
                  "(par (X) (singleton X (Set X)))\n" +
                  "(par (X) (union (Set X) (Set X) (Set X) :left-assoc))\n" +
                  "(par (X) (inters (Set X) (Set X) (Set X) :left-assoc))\n" +
                  "(par (X) (in X (Set X) Bool))\n" +
                  "(par (X) (subset (Set X) (Set X) Bool :chainable)) )\n"])
  fun testAttributeParsing(attribute: String) {
    val result = Parser.attribute.parse(attribute)

    if (result.isSuccess) {
      println(result.get<String>())
    } else {
      throw ParseError(result.failure(result.message))
    }
  }

  @ParameterizedTest
  @MethodSource("getLogics")
  fun testLogicParsing(expected: Logic) {
    println(expected.toString())
    val result = Parser.logic.parse(expected.toString())

    if (result.isSuccess) {
      assertEquals(expected, result.get<Logic>())
    } else {
      throw ParseError(result.failure(result.message))
    }
  }

  private fun getLogics(): Stream<Arguments> {
    return Stream.of(
        arguments(AUFLIA),
        arguments(AUFLIRA),
        arguments(AUFNIRA),
        arguments(LIA),
        arguments(LRA),
        arguments(QF_ABV),
        arguments(QF_AUFBV),
        arguments(QF_AUFLIA),
        arguments(QF_AX),
        arguments(QF_BV),
        arguments(QF_IDL),
        arguments(QF_LIA),
        arguments(QF_LRA),
        arguments(QF_NIA),
        arguments(QF_NRA),
        arguments(QF_RDL),
        arguments(QF_UF),
        arguments(QF_UFBV),
        arguments(QF_UFIDL),
        arguments(QF_UFLIA),
        arguments(QF_UFLRA),
        arguments(QF_UFNRA),
        arguments(UFLRA),
        arguments(UFNIA))
  }
}
