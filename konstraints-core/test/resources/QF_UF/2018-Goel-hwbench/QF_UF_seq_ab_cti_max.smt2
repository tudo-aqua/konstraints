(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: seq
query-maker: "Yices 2"
query-time: 0.207000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$101 0)
(declare-fun Add_101_101_101 (utt$101 utt$101 ) utt$101)
(declare-fun Le_1_101_101 (utt$101 utt$101 ) Bool)
(declare-fun y$105 () Bool)
(declare-fun y$106 () Bool)
(declare-fun y$107 () Bool)
(declare-fun y$108 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$18 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$30 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$34 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$36 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$41 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$43 () Bool)
(declare-fun y$44 () Bool)
(declare-fun y$45 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$71 () Bool)
(declare-fun y$84 () Bool)
(declare-fun y$85 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$87 () Bool)
(declare-fun y$88 () Bool)
(declare-fun y$a () utt$101)
(declare-fun y$a$next () utt$101)
(declare-fun y$a$next_rhs () utt$101)
(declare-fun y$a$next_rhs_op () utt$101)
(declare-fun y$b () utt$101)
(declare-fun y$b$next () utt$101)
(declare-fun y$n0s101 () utt$101)
(declare-fun y$n100s101 () utt$101)
(declare-fun y$n1s101 () utt$101)
(declare-fun y$n200s101 () utt$101)
(declare-fun y$n2147483848s101 () utt$101)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0$next () Bool)
(declare-fun y$prop0$next_op () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$s$1 () utt$101)
(declare-fun y$s$1$next () utt$101)
(declare-fun y$s$1$next_op () utt$101)
(declare-fun y$s$1_op () utt$101)
(declare-fun y$s$2 () Bool)
(declare-fun y$s$2_op () Bool)
(assert (distinct y$n1s101 y$n0s101 y$n100s101 y$n200s101 y$n2147483848s101))
(assert (= y$prop0_op (Le_1_101_101 y$a y$n200s101)))
(assert (= y$23 (= y$prop y$prop0_op)))
(assert (= y$s$2_op (Le_1_101_101 y$a y$n100s101)))
(assert (= y$s$1_op (Add_101_101_101 y$b y$a)))
(assert (= y$a$next_rhs_op (ite y$s$2_op y$s$1_op y$a)))
(assert (= y$15 (= y$a$next y$a$next_rhs_op)))
(assert (= y$17 (= y$a y$b$next)))
(assert (= y$18 (and y$15 y$17)))
(assert (= y$prop0$next_op (Le_1_101_101 y$a$next y$n200s101)))
(assert (= y$34 (= y$prop0$next_op y$prop$next)))
(assert (= y$prop$next (not y$31)))
(assert (= y$41 (= y$n1s101 y$a$next)))
(assert (= y$prop0$next_op (not y$42)))
(assert (= y$43 (and y$41 y$42)))
(assert (= y$43 (not y$45)))
(assert (= y$2 (= y$n1s101 y$a)))
(assert (= y$prop0_op (not y$36)))
(assert (= y$40 (and y$2 y$36)))
(assert (= y$40 (not y$44)))
(assert (= y$s$1$next_op (Add_101_101_101 y$b$next y$a$next)))
(assert (= y$71 (not (= y$a$next y$s$1$next_op))))
(assert (= y$85 (= y$n0s101 y$b$next)))
(assert (= y$86 (and y$71 y$85)))
(assert (= y$86 (not y$88)))
(assert (= y$59 (not (= y$a y$s$1_op))))
(assert (= y$5 (= y$n0s101 y$b)))
(assert (= y$84 (and y$5 y$59)))
(assert (= y$84 (not y$87)))
(assert (= y$106 (and y$prop y$23 y$45 y$44 y$18 y$34 y$31 y$88 y$87)))
(assert y$106)
(assert (distinct y$n1s101 y$n0s101 y$n100s101 y$n200s101 y$n2147483848s101))
(check-sat)
(exit)
