(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: needham.3.prop1
query-maker: "Yices 2"
query-time: 0.002000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$8 0)
(declare-sort utt$16 0)
(declare-sort utt$32 0)
(declare-fun y$1 () Bool)
(declare-fun y$101 () Bool)
(declare-fun y$103 () Bool)
(declare-fun y$105 () Bool)
(declare-fun y$107 () Bool)
(declare-fun y$109 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$111 () Bool)
(declare-fun y$113 () Bool)
(declare-fun y$115 () Bool)
(declare-fun y$117 () Bool)
(declare-fun y$119 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$27 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$33 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$39 () Bool)
(declare-fun y$41 () Bool)
(declare-fun y$43 () Bool)
(declare-fun y$45 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$4922 () Bool)
(declare-fun y$4923 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$5041 () Bool)
(declare-fun y$5050 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$57 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$61 () Bool)
(declare-fun y$63 () Bool)
(declare-fun y$65 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$69 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$71 () Bool)
(declare-fun y$73 () Bool)
(declare-fun y$75 () Bool)
(declare-fun y$77 () Bool)
(declare-fun y$79 () Bool)
(declare-fun y$81 () Bool)
(declare-fun y$84 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$88 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$90 () Bool)
(declare-fun y$92 () Bool)
(declare-fun y$95 () Bool)
(declare-fun y$97 () Bool)
(declare-fun y$99 () Bool)
(declare-fun y$a_c1 () Bool)
(declare-fun y$a_c2 () Bool)
(declare-fun y$a_commited_initiator_0 () Bool)
(declare-fun y$a_commited_initiator_1 () Bool)
(declare-fun y$a_commited_initiator_2 () Bool)
(declare-fun y$a_corrupted_initiator_0 () Bool)
(declare-fun y$a_corrupted_initiator_1 () Bool)
(declare-fun y$a_corrupted_initiator_2 () Bool)
(declare-fun y$a_corrupted_responder_0 () Bool)
(declare-fun y$a_corrupted_responder_1 () Bool)
(declare-fun y$a_d1 () Bool)
(declare-fun y$a_e1 () Bool)
(declare-fun y$a_f1 () Bool)
(declare-fun y$a_finished_initiator_0 () Bool)
(declare-fun y$a_finished_initiator_1 () Bool)
(declare-fun y$a_finished_initiator_2 () Bool)
(declare-fun y$a_finished_responder_0 () Bool)
(declare-fun y$a_finished_responder_1 () Bool)
(declare-fun y$a_got2 () Bool)
(declare-fun y$a_got3 () Bool)
(declare-fun y$a_got_msg_responder_0 () Bool)
(declare-fun y$a_got_msg_responder_1 () Bool)
(declare-fun y$a_got_resp_initiator_0 () Bool)
(declare-fun y$a_got_resp_initiator_1 () Bool)
(declare-fun y$a_got_resp_initiator_2 () Bool)
(declare-fun y$a_got_resp_responder_0 () Bool)
(declare-fun y$a_got_resp_responder_1 () Bool)
(declare-fun y$a_q () Bool)
(declare-fun y$a_send_reply_responder_0 () Bool)
(declare-fun y$a_send_reply_responder_1 () Bool)
(declare-fun y$a_start_initiator_0 () Bool)
(declare-fun y$a_start_initiator_1 () Bool)
(declare-fun y$a_start_initiator_2 () Bool)
(declare-fun y$a_start_responder_0 () Bool)
(declare-fun y$a_start_responder_1 () Bool)
(declare-fun y$a_wait_resp_initiator_0 () Bool)
(declare-fun y$a_wait_resp_initiator_1 () Bool)
(declare-fun y$a_wait_resp_initiator_2 () Bool)
(declare-fun y$a_wait_resp_responder_0 () Bool)
(declare-fun y$a_wait_resp_responder_1 () Bool)
(declare-fun y$dve_invalid () Bool)
(declare-fun y$id62 () Bool)
(declare-fun y$id62_op () Bool)
(declare-fun y$n0s16 () utt$16)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n10s32 () utt$32)
(declare-fun y$n11s32 () utt$32)
(declare-fun y$n150s32 () utt$32)
(declare-fun y$n154s16 () utt$16)
(declare-fun y$n1591s16 () utt$16)
(declare-fun y$n15s32 () utt$32)
(declare-fun y$n1621s16 () utt$16)
(declare-fun y$n1636s16 () utt$16)
(declare-fun y$n165s32 () utt$32)
(declare-fun y$n1681s16 () utt$16)
(declare-fun y$n16s32 () utt$32)
(declare-fun y$n1726s16 () utt$16)
(declare-fun y$n1771s16 () utt$16)
(declare-fun y$n180s32 () utt$32)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n225s32 () utt$32)
(declare-fun y$n2296s16 () utt$16)
(declare-fun y$n2298s16 () utt$16)
(declare-fun y$n2299s16 () utt$16)
(declare-fun y$n2302s16 () utt$16)
(declare-fun y$n2305s16 () utt$16)
(declare-fun y$n2308s16 () utt$16)
(declare-fun y$n2356s16 () utt$16)
(declare-fun y$n2358s16 () utt$16)
(declare-fun y$n2359s16 () utt$16)
(declare-fun y$n2362s16 () utt$16)
(declare-fun y$n2365s16 () utt$16)
(declare-fun y$n2368s16 () utt$16)
(declare-fun y$n2401s16 () utt$16)
(declare-fun y$n2403s16 () utt$16)
(declare-fun y$n2404s16 () utt$16)
(declare-fun y$n2407s16 () utt$16)
(declare-fun y$n2410s16 () utt$16)
(declare-fun y$n2413s16 () utt$16)
(declare-fun y$n2597s16 () utt$16)
(declare-fun y$n2838s16 () utt$16)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n3s32 () utt$32)
(declare-fun y$n4s32 () utt$32)
(declare-fun y$n5s32 () utt$32)
(declare-fun y$n60s32 () utt$32)
(declare-fun y$n75s32 () utt$32)
(declare-fun y$n7s32 () utt$32)
(declare-fun y$n8s32 () utt$32)
(declare-fun y$n9s32 () utt$32)
(declare-fun y$prop () Bool)
(declare-fun y$v3_1517448501_60 () Bool)
(declare-fun y$v3_1517448501_60_op () Bool)
(declare-fun y$v_kNa () utt$8)
(declare-fun y$v_kNb () utt$8)
(declare-fun y$v_k_Na_A__B () utt$8)
(declare-fun y$v_k_Na_Nb__A () utt$8)
(declare-fun y$v_k_Nb__B () utt$8)
(declare-fun y$v_m_initiator_0 () utt$16)
(declare-fun y$v_m_initiator_1 () utt$16)
(declare-fun y$v_m_initiator_2 () utt$16)
(declare-fun y$v_m_intruder () utt$16)
(declare-fun y$v_m_responder_0 () utt$16)
(declare-fun y$v_m_responder_1 () utt$16)
(declare-fun y$v_party_nonce_initiator_0 () utt$16)
(declare-fun y$v_party_nonce_initiator_1 () utt$16)
(declare-fun y$v_party_nonce_initiator_2 () utt$16)
(declare-fun y$v_party_nonce_responder_0 () utt$16)
(declare-fun y$v_party_nonce_responder_1 () utt$16)
(declare-fun y$v_party_responder_0 () utt$16)
(declare-fun y$v_party_responder_1 () utt$16)
(assert (not (= y$n0s8 y$n1s8)))
(assert (distinct y$n0s16 y$n1771s16 y$n1636s16 y$n1591s16 y$n2362s16 y$n2308s16 y$n2413s16 y$n154s16 y$n2299s16 y$n2404s16 y$n2359s16 y$n2296s16 y$n2401s16 y$n2356s16 y$n1621s16 y$n1726s16 y$n1681s16 y$n2298s16 y$n2403s16 y$n2358s16 y$n2305s16 y$n2410s16 y$n2365s16 y$n2302s16 y$n2407s16 y$n2368s16 y$n2838s16 y$n2597s16))
(assert (distinct y$n75s32 y$n16s32 y$n15s32 y$n60s32 y$n1s32 y$n225s32 y$n180s32 y$n165s32 y$n150s32 y$n5s32 y$n7s32 y$n2s32 y$n8s32 y$n3s32 y$n9s32 y$n10s32 y$n4s32 y$n11s32))
(assert (= y$a_c1 (not y$1)))
(assert (= y$a_c2 (not y$3)))
(assert (= y$a_commited_initiator_0 (not y$5)))
(assert (= y$a_commited_initiator_1 (not y$7)))
(assert (= y$a_commited_initiator_2 (not y$9)))
(assert (= y$a_corrupted_initiator_0 (not y$11)))
(assert (= y$a_corrupted_initiator_1 (not y$13)))
(assert (= y$a_corrupted_initiator_2 (not y$15)))
(assert (= y$a_corrupted_responder_0 (not y$17)))
(assert (= y$a_corrupted_responder_1 (not y$19)))
(assert (= y$a_d1 (not y$21)))
(assert (= y$a_e1 (not y$23)))
(assert (= y$a_f1 (not y$25)))
(assert (= y$a_finished_initiator_0 (not y$27)))
(assert (= y$a_finished_initiator_1 (not y$29)))
(assert (= y$a_finished_initiator_2 (not y$31)))
(assert (= y$a_finished_responder_0 (not y$33)))
(assert (= y$a_finished_responder_1 (not y$35)))
(assert (= y$a_got2 (not y$37)))
(assert (= y$a_got3 (not y$39)))
(assert (= y$a_got_msg_responder_0 (not y$41)))
(assert (= y$a_got_msg_responder_1 (not y$43)))
(assert (= y$a_got_resp_initiator_0 (not y$45)))
(assert (= y$a_got_resp_initiator_1 (not y$47)))
(assert (= y$a_got_resp_initiator_2 (not y$49)))
(assert (= y$a_got_resp_responder_0 (not y$51)))
(assert (= y$a_got_resp_responder_1 (not y$53)))
(assert (= y$a_q (not y$55)))
(assert (= y$a_send_reply_responder_0 (not y$57)))
(assert (= y$a_send_reply_responder_1 (not y$59)))
(assert (= y$a_start_initiator_0 (not y$61)))
(assert (= y$a_start_initiator_1 (not y$63)))
(assert (= y$a_start_initiator_2 (not y$65)))
(assert (= y$a_start_responder_0 (not y$67)))
(assert (= y$a_start_responder_1 (not y$69)))
(assert (= y$a_wait_resp_initiator_0 (not y$71)))
(assert (= y$a_wait_resp_initiator_1 (not y$73)))
(assert (= y$a_wait_resp_initiator_2 (not y$75)))
(assert (= y$a_wait_resp_responder_0 (not y$77)))
(assert (= y$a_wait_resp_responder_1 (not y$79)))
(assert (= y$dve_invalid (not y$81)))
(assert (= y$84 (= y$n0s8 y$v_kNa)))
(assert (= y$86 (= y$n0s8 y$v_kNb)))
(assert (= y$88 (= y$n0s8 y$v_k_Na_A__B)))
(assert (= y$90 (= y$n0s8 y$v_k_Na_Nb__A)))
(assert (= y$92 (= y$n0s8 y$v_k_Nb__B)))
(assert (= y$95 (= y$n0s16 y$v_m_initiator_0)))
(assert (= y$97 (= y$n0s16 y$v_m_initiator_1)))
(assert (= y$99 (= y$n0s16 y$v_m_initiator_2)))
(assert (= y$101 (= y$n0s16 y$v_m_intruder)))
(assert (= y$103 (= y$n0s16 y$v_m_responder_0)))
(assert (= y$105 (= y$n0s16 y$v_m_responder_1)))
(assert (= y$107 (= y$n0s16 y$v_party_nonce_initiator_0)))
(assert (= y$109 (= y$n0s16 y$v_party_nonce_initiator_1)))
(assert (= y$111 (= y$n0s16 y$v_party_nonce_initiator_2)))
(assert (= y$113 (= y$n0s16 y$v_party_nonce_responder_0)))
(assert (= y$115 (= y$n0s16 y$v_party_nonce_responder_1)))
(assert (= y$117 (= y$n0s16 y$v_party_responder_0)))
(assert (= y$119 (= y$n0s16 y$v_party_responder_1)))
(assert (= y$prop (not y$5041)))
(assert (= y$v3_1517448501_60_op (and y$a_finished_initiator_0 y$a_finished_responder_0)))
(assert (= y$id62_op (and y$81 y$v3_1517448501_60_op)))
(assert (= y$id62_op (not y$4922)))
(assert (= y$4923 (= y$prop y$4922)))
(assert (= y$5050 (and y$1 y$3 y$5 y$7 y$9 y$11 y$13 y$15 y$17 y$19 y$21 y$23 y$25 y$27 y$29 y$31 y$33 y$35 y$37 y$39 y$41 y$43 y$45 y$47 y$49 y$51 y$53 y$55 y$57 y$59 y$61 y$63 y$65 y$67 y$69 y$71 y$73 y$75 y$77 y$79 y$81 y$84 y$86 y$88 y$90 y$92 y$95 y$97 y$99 y$101 y$103 y$105 y$107 y$109 y$111 y$113 y$115 y$117 y$119 y$5041 y$4923)))
(assert y$5050)
(check-sat)
(exit)
