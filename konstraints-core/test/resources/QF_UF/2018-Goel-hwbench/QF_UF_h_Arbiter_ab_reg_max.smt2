(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_Arbiter
query-maker: "Yices 2"
query-time: 4.374000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$2 0)
(declare-sort utt$30 0)
(declare-sort utt$31 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_1_31 (Bool utt$31 ) utt$32)
(declare-fun Concat_32_2_30 (utt$2 utt$30 ) utt$32)
(declare-fun Extract_2_1_0_32 (utt$32 ) utt$2)
(declare-fun y$10 () Bool)
(declare-fun y$113 () Bool)
(declare-fun y$115 () Bool)
(declare-fun y$12 () Bool)
(declare-fun y$124 () Bool)
(declare-fun y$126 () Bool)
(declare-fun y$14 () Bool)
(declare-fun y$143 () Bool)
(declare-fun y$145 () Bool)
(declare-fun y$150 () Bool)
(declare-fun y$156 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$168 () utt$2)
(declare-fun y$172 () utt$2)
(declare-fun y$174 () Bool)
(declare-fun y$189 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$213 () Bool)
(declare-fun y$215 () Bool)
(declare-fun y$220 () Bool)
(declare-fun y$225 () Bool)
(declare-fun y$231 () Bool)
(declare-fun y$24 () Bool)
(declare-fun y$246 () Bool)
(declare-fun y$26 () Bool)
(declare-fun y$270 () Bool)
(declare-fun y$272 () Bool)
(declare-fun y$277 () Bool)
(declare-fun y$282 () Bool)
(declare-fun y$288 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$303 () Bool)
(declare-fun y$327 () Bool)
(declare-fun y$328 () Bool)
(declare-fun y$334 () Bool)
(declare-fun y$337 () Bool)
(declare-fun y$342 () Bool)
(declare-fun y$351 () Bool)
(declare-fun y$352 () Bool)
(declare-fun y$360 () Bool)
(declare-fun y$361 () Bool)
(declare-fun y$364 () Bool)
(declare-fun y$367 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$372 () Bool)
(declare-fun y$381 () Bool)
(declare-fun y$382 () Bool)
(declare-fun y$383 () Bool)
(declare-fun y$388 () Bool)
(declare-fun y$389 () Bool)
(declare-fun y$39 () Bool)
(declare-fun y$390 () Bool)
(declare-fun y$391 () Bool)
(declare-fun y$392 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$403 () Bool)
(declare-fun y$404 () Bool)
(declare-fun y$405 () Bool)
(declare-fun y$406 () Bool)
(declare-fun y$407 () Bool)
(declare-fun y$461 () Bool)
(declare-fun y$462 () Bool)
(declare-fun y$468 () Bool)
(declare-fun y$470 () Bool)
(declare-fun y$472 () Bool)
(declare-fun y$477 () Bool)
(declare-fun y$481 () Bool)
(declare-fun y$482 () Bool)
(declare-fun y$486 () Bool)
(declare-fun y$490 () Bool)
(declare-fun y$496 () Bool)
(declare-fun y$498 () Bool)
(declare-fun y$500 () Bool)
(declare-fun y$505 () Bool)
(declare-fun y$509 () Bool)
(declare-fun y$510 () Bool)
(declare-fun y$514 () Bool)
(declare-fun y$515 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$534 () Bool)
(declare-fun y$535 () Bool)
(declare-fun y$536 () Bool)
(declare-fun y$54 () Bool)
(declare-fun y$6 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$66 () Bool)
(declare-fun y$8 () Bool)
(declare-fun y$83 () Bool)
(declare-fun y$85 () Bool)
(declare-fun y$94 () Bool)
(declare-fun y$96 () Bool)
(declare-fun y$active () Bool)
(declare-fun y$active_op () Bool)
(declare-fun y$arbiter.sel () utt$2)
(declare-fun y$arbiter.state () utt$2)
(declare-fun y$arbiter.state$next () utt$2)
(declare-fun y$arbiter.state$next_rhs () utt$2)
(declare-fun y$arbiter.state$next_rhs_op () utt$2)
(declare-fun y$clientA.req () Bool)
(declare-fun y$clientA.req$next () Bool)
(declare-fun y$clientA.req$next_rhs () Bool)
(declare-fun y$clientA.req$next_rhs_op () Bool)
(declare-fun y$clientA.state () utt$2)
(declare-fun y$clientA.state$next () utt$2)
(declare-fun y$clientA.state$next_rhs () utt$2)
(declare-fun y$clientA.state$next_rhs_op () utt$2)
(declare-fun y$clientB.req () Bool)
(declare-fun y$clientB.req$next () Bool)
(declare-fun y$clientB.req$next_rhs () Bool)
(declare-fun y$clientB.req$next_rhs_op () Bool)
(declare-fun y$clientB.state () utt$2)
(declare-fun y$clientB.state$next () utt$2)
(declare-fun y$clientB.state$next_rhs () utt$2)
(declare-fun y$clientB.state$next_rhs_op () utt$2)
(declare-fun y$clientC.req () Bool)
(declare-fun y$clientC.req$next () Bool)
(declare-fun y$clientC.req$next_rhs () Bool)
(declare-fun y$clientC.req$next_rhs_op () Bool)
(declare-fun y$clientC.state () utt$2)
(declare-fun y$clientC.state$next () utt$2)
(declare-fun y$clientC.state$next_rhs () utt$2)
(declare-fun y$clientC.state$next_rhs_op () utt$2)
(declare-fun y$controllerA.ack () Bool)
(declare-fun y$controllerA.ack$next () Bool)
(declare-fun y$controllerA.ack$next_rhs () Bool)
(declare-fun y$controllerA.ack$next_rhs_op () Bool)
(declare-fun y$controllerA.pass_token () Bool)
(declare-fun y$controllerA.pass_token$next () Bool)
(declare-fun y$controllerA.pass_token$next_rhs () Bool)
(declare-fun y$controllerA.pass_token$next_rhs_op () Bool)
(declare-fun y$controllerA.state () utt$2)
(declare-fun y$controllerA.state$next () utt$2)
(declare-fun y$controllerA.state$next_rhs () utt$2)
(declare-fun y$controllerA.state$next_rhs_op () utt$2)
(declare-fun y$controllerB.ack () Bool)
(declare-fun y$controllerB.ack$next () Bool)
(declare-fun y$controllerB.ack$next_rhs () Bool)
(declare-fun y$controllerB.ack$next_rhs_op () Bool)
(declare-fun y$controllerB.pass_token () Bool)
(declare-fun y$controllerB.pass_token$next () Bool)
(declare-fun y$controllerB.pass_token$next_rhs () Bool)
(declare-fun y$controllerB.pass_token$next_rhs_op () Bool)
(declare-fun y$controllerB.state () utt$2)
(declare-fun y$controllerB.state$next () utt$2)
(declare-fun y$controllerB.state$next_rhs () utt$2)
(declare-fun y$controllerB.state$next_rhs_op () utt$2)
(declare-fun y$controllerC.ack () Bool)
(declare-fun y$controllerC.ack$next () Bool)
(declare-fun y$controllerC.ack$next_rhs () Bool)
(declare-fun y$controllerC.ack$next_rhs_op () Bool)
(declare-fun y$controllerC.pass_token () Bool)
(declare-fun y$controllerC.pass_token$next () Bool)
(declare-fun y$controllerC.pass_token$next_rhs () Bool)
(declare-fun y$controllerC.pass_token$next_rhs_op () Bool)
(declare-fun y$controllerC.state () utt$2)
(declare-fun y$controllerC.state$next () utt$2)
(declare-fun y$controllerC.state$next_rhs () utt$2)
(declare-fun y$controllerC.state$next_rhs_op () utt$2)
(declare-fun y$n0s1 () Bool)
(declare-fun y$n0s2 () utt$2)
(declare-fun y$n0s30 () utt$30)
(declare-fun y$n0s31 () utt$31)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n1s1 () Bool)
(declare-fun y$n1s2 () utt$2)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n2s2 () utt$2)
(declare-fun y$n3s2 () utt$2)
(declare-fun y$n3s32 () utt$32)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$s$10 () Bool)
(declare-fun y$s$10$next () Bool)
(declare-fun y$s$10$next_op () Bool)
(declare-fun y$s$103 () Bool)
(declare-fun y$s$103_op () Bool)
(declare-fun y$s$104 () Bool)
(declare-fun y$s$104_op () Bool)
(declare-fun y$s$105 () utt$2)
(declare-fun y$s$105_op () utt$2)
(declare-fun y$s$106 () Bool)
(declare-fun y$s$106_op () Bool)
(declare-fun y$s$107 () utt$2)
(declare-fun y$s$107_op () utt$2)
(declare-fun y$s$108 () Bool)
(declare-fun y$s$108_op () Bool)
(declare-fun y$s$109 () utt$2)
(declare-fun y$s$109_op () utt$2)
(declare-fun y$s$10_op () Bool)
(declare-fun y$s$11 () Bool)
(declare-fun y$s$11$next () Bool)
(declare-fun y$s$11$next_op () Bool)
(declare-fun y$s$110 () Bool)
(declare-fun y$s$110_op () Bool)
(declare-fun y$s$111 () utt$2)
(declare-fun y$s$111_op () utt$2)
(declare-fun y$s$112 () utt$2)
(declare-fun y$s$112_op () utt$2)
(declare-fun y$s$113 () Bool)
(declare-fun y$s$113_op () Bool)
(declare-fun y$s$114 () Bool)
(declare-fun y$s$114_op () Bool)
(declare-fun y$s$117 () Bool)
(declare-fun y$s$117_op () Bool)
(declare-fun y$s$118 () Bool)
(declare-fun y$s$118_op () Bool)
(declare-fun y$s$11_op () Bool)
(declare-fun y$s$120 () utt$2)
(declare-fun y$s$120_op () utt$2)
(declare-fun y$s$121 () utt$2)
(declare-fun y$s$121_op () utt$2)
(declare-fun y$s$123 () utt$2)
(declare-fun y$s$123_op () utt$2)
(declare-fun y$s$125 () Bool)
(declare-fun y$s$125_op () Bool)
(declare-fun y$s$13 () utt$2)
(declare-fun y$s$134 () Bool)
(declare-fun y$s$134_op () Bool)
(declare-fun y$s$136 () Bool)
(declare-fun y$s$136_op () Bool)
(declare-fun y$s$138 () utt$2)
(declare-fun y$s$138_op () utt$2)
(declare-fun y$s$13_op () utt$2)
(declare-fun y$s$14 () Bool)
(declare-fun y$s$142 () Bool)
(declare-fun y$s$142_op () Bool)
(declare-fun y$s$143 () Bool)
(declare-fun y$s$143_op () Bool)
(declare-fun y$s$144 () utt$2)
(declare-fun y$s$144_op () utt$2)
(declare-fun y$s$145 () Bool)
(declare-fun y$s$145_op () Bool)
(declare-fun y$s$146 () utt$2)
(declare-fun y$s$146_op () utt$2)
(declare-fun y$s$147 () Bool)
(declare-fun y$s$147_op () Bool)
(declare-fun y$s$148 () utt$2)
(declare-fun y$s$148_op () utt$2)
(declare-fun y$s$149 () Bool)
(declare-fun y$s$149_op () Bool)
(declare-fun y$s$14_op () Bool)
(declare-fun y$s$15 () utt$2)
(declare-fun y$s$150 () utt$2)
(declare-fun y$s$150_op () utt$2)
(declare-fun y$s$151 () utt$2)
(declare-fun y$s$151_op () utt$2)
(declare-fun y$s$152 () Bool)
(declare-fun y$s$152_op () Bool)
(declare-fun y$s$153 () Bool)
(declare-fun y$s$153_op () Bool)
(declare-fun y$s$156 () Bool)
(declare-fun y$s$156_op () Bool)
(declare-fun y$s$157 () Bool)
(declare-fun y$s$157_op () Bool)
(declare-fun y$s$159 () utt$2)
(declare-fun y$s$159_op () utt$2)
(declare-fun y$s$15_op () utt$2)
(declare-fun y$s$16 () utt$2)
(declare-fun y$s$160 () utt$2)
(declare-fun y$s$160_op () utt$2)
(declare-fun y$s$162 () utt$2)
(declare-fun y$s$162_op () utt$2)
(declare-fun y$s$164 () Bool)
(declare-fun y$s$164_op () Bool)
(declare-fun y$s$16_op () utt$2)
(declare-fun y$s$17 () utt$2)
(declare-fun y$s$173 () Bool)
(declare-fun y$s$173_op () Bool)
(declare-fun y$s$175 () Bool)
(declare-fun y$s$175_op () Bool)
(declare-fun y$s$177 () utt$2)
(declare-fun y$s$177_op () utt$2)
(declare-fun y$s$17_op () utt$2)
(declare-fun y$s$181 () Bool)
(declare-fun y$s$181_op () Bool)
(declare-fun y$s$182 () Bool)
(declare-fun y$s$182_op () Bool)
(declare-fun y$s$183 () utt$2)
(declare-fun y$s$183_op () utt$2)
(declare-fun y$s$184 () Bool)
(declare-fun y$s$184_op () Bool)
(declare-fun y$s$185 () utt$2)
(declare-fun y$s$185_op () utt$2)
(declare-fun y$s$186 () Bool)
(declare-fun y$s$186_op () Bool)
(declare-fun y$s$187 () utt$2)
(declare-fun y$s$187_op () utt$2)
(declare-fun y$s$188 () Bool)
(declare-fun y$s$188_op () Bool)
(declare-fun y$s$189 () utt$2)
(declare-fun y$s$189_op () utt$2)
(declare-fun y$s$190 () utt$2)
(declare-fun y$s$190_op () utt$2)
(declare-fun y$s$191 () Bool)
(declare-fun y$s$191_op () Bool)
(declare-fun y$s$192 () Bool)
(declare-fun y$s$192_op () Bool)
(declare-fun y$s$195 () Bool)
(declare-fun y$s$195_op () Bool)
(declare-fun y$s$196 () Bool)
(declare-fun y$s$196_op () Bool)
(declare-fun y$s$198 () utt$2)
(declare-fun y$s$198_op () utt$2)
(declare-fun y$s$199 () utt$2)
(declare-fun y$s$199_op () utt$2)
(declare-fun y$s$201 () utt$2)
(declare-fun y$s$201_op () utt$2)
(declare-fun y$s$203 () Bool)
(declare-fun y$s$203_op () Bool)
(declare-fun y$s$212 () Bool)
(declare-fun y$s$212_op () Bool)
(declare-fun y$s$214 () Bool)
(declare-fun y$s$214_op () Bool)
(declare-fun y$s$216 () utt$2)
(declare-fun y$s$216_op () utt$2)
(declare-fun y$s$24 () Bool)
(declare-fun y$s$24_op () Bool)
(declare-fun y$s$25 () utt$2)
(declare-fun y$s$25_op () utt$2)
(declare-fun y$s$26 () Bool)
(declare-fun y$s$26_op () Bool)
(declare-fun y$s$27 () utt$2)
(declare-fun y$s$27_op () utt$2)
(declare-fun y$s$28 () utt$2)
(declare-fun y$s$28_op () utt$2)
(declare-fun y$s$29 () Bool)
(declare-fun y$s$29_op () Bool)
(declare-fun y$s$30 () utt$2)
(declare-fun y$s$30_op () utt$2)
(declare-fun y$s$31 () utt$2)
(declare-fun y$s$31_op () utt$2)
(declare-fun y$s$32 () Bool)
(declare-fun y$s$32_op () Bool)
(declare-fun y$s$37 () utt$2)
(declare-fun y$s$37_op () utt$2)
(declare-fun y$s$50 () Bool)
(declare-fun y$s$50_op () Bool)
(declare-fun y$s$51 () utt$2)
(declare-fun y$s$51_op () utt$2)
(declare-fun y$s$52 () Bool)
(declare-fun y$s$52_op () Bool)
(declare-fun y$s$53 () utt$2)
(declare-fun y$s$53_op () utt$2)
(declare-fun y$s$54 () utt$2)
(declare-fun y$s$54_op () utt$2)
(declare-fun y$s$55 () Bool)
(declare-fun y$s$55_op () Bool)
(declare-fun y$s$56 () utt$2)
(declare-fun y$s$56_op () utt$2)
(declare-fun y$s$57 () utt$2)
(declare-fun y$s$57_op () utt$2)
(declare-fun y$s$58 () Bool)
(declare-fun y$s$58_op () Bool)
(declare-fun y$s$6 () Bool)
(declare-fun y$s$6$next () Bool)
(declare-fun y$s$6$next_op () Bool)
(declare-fun y$s$63 () utt$2)
(declare-fun y$s$63_op () utt$2)
(declare-fun y$s$6_op () Bool)
(declare-fun y$s$7 () Bool)
(declare-fun y$s$7$next () Bool)
(declare-fun y$s$7$next_op () Bool)
(declare-fun y$s$76 () Bool)
(declare-fun y$s$76_op () Bool)
(declare-fun y$s$77 () utt$2)
(declare-fun y$s$77_op () utt$2)
(declare-fun y$s$78 () Bool)
(declare-fun y$s$78_op () Bool)
(declare-fun y$s$79 () utt$2)
(declare-fun y$s$79_op () utt$2)
(declare-fun y$s$7_op () Bool)
(declare-fun y$s$8 () Bool)
(declare-fun y$s$8$next () Bool)
(declare-fun y$s$8$next_op () Bool)
(declare-fun y$s$80 () utt$2)
(declare-fun y$s$80_op () utt$2)
(declare-fun y$s$81 () Bool)
(declare-fun y$s$81_op () Bool)
(declare-fun y$s$82 () utt$2)
(declare-fun y$s$82_op () utt$2)
(declare-fun y$s$83 () utt$2)
(declare-fun y$s$83_op () utt$2)
(declare-fun y$s$84 () Bool)
(declare-fun y$s$84_op () Bool)
(declare-fun y$s$89 () utt$2)
(declare-fun y$s$89_op () utt$2)
(declare-fun y$s$8_op () Bool)
(declare-fun y$s$9 () Bool)
(declare-fun y$s$9_op () Bool)
(declare-fun y$w$1 () utt$32)
(declare-fun y$w$1_op () utt$32)
(declare-fun y$w$2 () utt$32)
(declare-fun y$w$2$next () utt$32)
(declare-fun y$w$2$next_op () utt$32)
(declare-fun y$w$2_op () utt$32)
(declare-fun y$w$3 () utt$32)
(declare-fun y$w$3$next () utt$32)
(declare-fun y$w$3$next_op () utt$32)
(declare-fun y$w$3_op () utt$32)
(declare-fun y$w$4 () utt$32)
(declare-fun y$w$4$next () utt$32)
(declare-fun y$w$4$next_op () utt$32)
(declare-fun y$w$4_op () utt$32)
(declare-fun y$w$5 () utt$32)
(declare-fun y$w$5_op () utt$32)
(assert (distinct y$n0s2 y$n1s2 y$n2s2 y$n3s2))
(assert (distinct y$n3s32 y$n1s32 y$n0s32))
(assert (= (not (= y$n1s2 y$controllerB.state)) y$470))
(assert (= y$clientB.req (not y$8)))
(assert (= y$controllerB.ack (not y$21)))
(assert (= (not (= y$n1s2 y$controllerC.state)) y$498))
(assert (= y$clientC.req (not y$12)))
(assert (= y$controllerC.ack (not y$26)))
(assert (= y$w$2_op (Concat_32_1_31 y$controllerA.ack y$n0s31)))
(assert (= y$334 (= y$n1s32 y$w$2_op)))
(assert (= y$w$3_op (Concat_32_1_31 y$controllerB.ack y$n0s31)))
(assert (= y$337 (= y$n1s32 y$w$3_op)))
(assert (= y$s$7_op (and y$334 y$337)))
(assert (= y$w$4_op (Concat_32_1_31 y$controllerC.ack y$n0s31)))
(assert (= y$342 (= y$n1s32 y$w$4_op)))
(assert (= y$s$8_op (and y$337 y$342)))
(assert (= y$s$11_op (or y$s$7_op y$s$8_op)))
(assert (= y$s$6_op (and y$334 y$342)))
(assert (= y$s$10_op (or y$s$11_op y$s$6_op)))
(assert (= y$s$10_op (not y$351)))
(assert (= y$352 (= y$prop y$351)))
(assert (= y$s$9_op (or y$controllerA.pass_token y$controllerB.pass_token)))
(assert (= y$active_op (or y$controllerC.pass_token y$s$9_op)))
(assert (= y$37 (= y$n1s2 y$arbiter.state)))
(assert (= y$39 (= y$n2s2 y$arbiter.state)))
(assert (= y$s$14_op (or y$37 y$39)))
(assert (= y$s$15_op (ite y$39 y$n0s2 y$n2s2)))
(assert (= y$2 (= y$n0s2 y$arbiter.state)))
(assert (= y$s$16_op (ite y$2 y$n1s2 y$arbiter.state)))
(assert (= y$s$17_op (ite y$s$14_op y$s$15_op y$s$16_op)))
(assert (= y$s$13_op (ite y$active_op y$s$17_op y$n0s2)))
(assert (= y$arbiter.state$next_rhs_op (ite y$active_op y$s$13_op y$arbiter.state)))
(assert (= y$52 (= y$arbiter.state$next y$arbiter.state$next_rhs_op)))
(assert (= y$54 (= y$n2s2 y$clientA.state)))
(assert (= y$s$26_op (and y$clientA.req y$54)))
(assert (= y$6 (= y$n0s2 y$clientA.state)))
(assert (= y$s$24_op (and y$clientA.req y$6)))
(assert (= y$s$32_op (ite y$6 y$s$24_op y$clientA.req)))
(assert (= y$clientA.req$next_rhs_op (ite y$54 y$s$26_op y$s$32_op)))
(assert (= y$64 (= y$clientA.req$next y$clientA.req$next_rhs_op)))
(assert (= y$66 (= y$n1s2 y$clientA.state)))
(assert (= y$s$29_op (or y$54 y$66)))
(assert (= y$s$28_op (ite y$54 y$clientA.state y$n0s2)))
(assert (= y$s$37_op (ite y$controllerA.ack y$n2s2 y$clientA.state)))
(assert (= y$s$27_op (ite y$66 y$s$37_op y$n0s2)))
(assert (= y$s$30_op (ite y$54 y$s$28_op y$s$27_op)))
(assert (= y$s$25_op (ite y$6 y$clientA.state y$n0s2)))
(assert (= y$s$31_op (ite y$6 y$s$25_op y$clientA.state)))
(assert (= y$clientA.state$next_rhs_op (ite y$s$29_op y$s$30_op y$s$31_op)))
(assert (= y$83 (= y$clientA.state$next y$clientA.state$next_rhs_op)))
(assert (= y$85 (= y$n2s2 y$clientB.state)))
(assert (= y$s$52_op (and y$clientB.req y$85)))
(assert (= y$10 (= y$n0s2 y$clientB.state)))
(assert (= y$s$50_op (and y$clientB.req y$10)))
(assert (= y$s$58_op (ite y$10 y$s$50_op y$clientB.req)))
(assert (= y$clientB.req$next_rhs_op (ite y$85 y$s$52_op y$s$58_op)))
(assert (= y$94 (= y$clientB.req$next y$clientB.req$next_rhs_op)))
(assert (= y$96 (= y$n1s2 y$clientB.state)))
(assert (= y$s$55_op (or y$85 y$96)))
(assert (= y$s$54_op (ite y$85 y$clientB.state y$n0s2)))
(assert (= y$s$63_op (ite y$controllerB.ack y$n2s2 y$clientB.state)))
(assert (= y$s$53_op (ite y$96 y$s$63_op y$n0s2)))
(assert (= y$s$56_op (ite y$85 y$s$54_op y$s$53_op)))
(assert (= y$s$51_op (ite y$10 y$clientB.state y$n0s2)))
(assert (= y$s$57_op (ite y$10 y$s$51_op y$clientB.state)))
(assert (= y$clientB.state$next_rhs_op (ite y$s$55_op y$s$56_op y$s$57_op)))
(assert (= y$113 (= y$clientB.state$next y$clientB.state$next_rhs_op)))
(assert (= y$115 (= y$n2s2 y$clientC.state)))
(assert (= y$s$78_op (and y$clientC.req y$115)))
(assert (= y$14 (= y$n0s2 y$clientC.state)))
(assert (= y$s$76_op (and y$clientC.req y$14)))
(assert (= y$s$84_op (ite y$14 y$s$76_op y$clientC.req)))
(assert (= y$clientC.req$next_rhs_op (ite y$115 y$s$78_op y$s$84_op)))
(assert (= y$124 (= y$clientC.req$next y$clientC.req$next_rhs_op)))
(assert (= y$126 (= y$n1s2 y$clientC.state)))
(assert (= y$s$81_op (or y$115 y$126)))
(assert (= y$s$80_op (ite y$115 y$clientC.state y$n0s2)))
(assert (= y$s$89_op (ite y$controllerC.ack y$n2s2 y$clientC.state)))
(assert (= y$s$79_op (ite y$126 y$s$89_op y$n0s2)))
(assert (= y$s$82_op (ite y$115 y$s$80_op y$s$79_op)))
(assert (= y$s$77_op (ite y$14 y$clientC.state y$n0s2)))
(assert (= y$s$83_op (ite y$14 y$s$77_op y$clientC.state)))
(assert (= y$clientC.state$next_rhs_op (ite y$s$81_op y$s$82_op y$s$83_op)))
(assert (= y$143 (= y$clientC.state$next y$clientC.state$next_rhs_op)))
(assert (= y$145 (= y$n2s2 y$controllerA.state)))
(assert (= y$clientA.req (not y$4)))
(assert (= y$s$136_op (and (not y$4) y$controllerA.ack)))
(assert (= y$s$103_op (and y$145 y$s$136_op)))
(assert (= y$150 (= y$n1s2 y$controllerA.state)))
(assert (= y$s$114_op (or y$controllerA.ack y$150)))
(assert (= y$controllerA.ack$next_rhs_op (ite y$145 y$s$103_op y$s$114_op)))
(assert (= y$156 (= y$controllerA.ack$next y$controllerA.ack$next_rhs_op)))
(assert (= y$s$134_op (or y$4 y$controllerA.pass_token)))
(assert (= y$s$108_op (and y$145 y$s$134_op)))
(assert (= y$19 (= y$n0s2 y$controllerA.state)))
(assert (= y$w$5_op (Concat_32_2_30 y$arbiter.state y$n0s30)))
(assert (= y$w$1_op (ite y$active_op y$w$5_op y$n3s32)))
(assert (= y$172 (ite y$active_op y$arbiter.state y$n3s2)))
(assert (= y$168 (Extract_2_1_0_32 y$w$1_op)))
(assert (= y$172 y$168))
(assert (= y$174 (= y$n0s2 y$168)))
(assert (= y$clientA.req (not y$s$117_op)))
(assert (= y$s$118_op (and y$174 y$s$117_op)))
(assert (= y$s$106_op (and y$19 y$s$118_op)))
(assert (= y$s$125_op (and y$174 y$s$106_op)))
(assert (= y$s$104_op (and y$19 y$s$125_op)))
(assert (= y$s$113_op (ite y$19 y$s$104_op y$controllerA.pass_token)))
(assert (= y$controllerA.pass_token$next_rhs_op (ite y$145 y$s$108_op y$s$113_op)))
(assert (= y$189 (= y$controllerA.pass_token$next y$controllerA.pass_token$next_rhs_op)))
(assert (= y$s$110_op (or y$145 y$150)))
(assert (= y$s$138_op (ite y$4 y$n0s2 y$controllerA.state)))
(assert (= y$s$109_op (ite y$145 y$s$138_op y$n0s2)))
(assert (= y$s$111_op (ite y$145 y$s$109_op y$n2s2)))
(assert (= y$s$120_op (ite y$clientA.req y$n1s2 y$controllerA.state)))
(assert (= y$s$121_op (ite y$174 y$s$120_op y$n0s2)))
(assert (= y$s$107_op (ite y$19 y$s$121_op y$n0s2)))
(assert (= y$s$123_op (ite y$174 y$s$107_op y$controllerA.state)))
(assert (= y$s$105_op (ite y$19 y$s$123_op y$n0s2)))
(assert (= y$s$112_op (ite y$19 y$s$105_op y$controllerA.state)))
(assert (= y$controllerA.state$next_rhs_op (ite y$s$110_op y$s$111_op y$s$112_op)))
(assert (= y$213 (= y$controllerA.state$next y$controllerA.state$next_rhs_op)))
(assert (= y$215 (= y$n2s2 y$controllerB.state)))
(assert (= y$s$175_op (and (not y$8) y$controllerB.ack)))
(assert (= y$s$142_op (and y$215 y$s$175_op)))
(assert (= y$220 (= y$n1s2 y$controllerB.state)))
(assert (= y$s$153_op (or y$controllerB.ack y$220)))
(assert (= y$controllerB.ack$next_rhs_op (ite y$215 y$s$142_op y$s$153_op)))
(assert (= y$225 (= y$controllerB.ack$next y$controllerB.ack$next_rhs_op)))
(assert (= y$s$173_op (or y$8 y$controllerB.pass_token)))
(assert (= y$s$147_op (and y$215 y$s$173_op)))
(assert (= y$24 (= y$n0s2 y$controllerB.state)))
(assert (= y$231 (= y$n1s2 y$168)))
(assert (= y$clientB.req (not y$s$156_op)))
(assert (= y$s$157_op (and y$231 y$s$156_op)))
(assert (= y$s$145_op (and y$24 y$s$157_op)))
(assert (= y$s$164_op (and y$231 y$s$145_op)))
(assert (= y$s$143_op (and y$24 y$s$164_op)))
(assert (= y$s$152_op (ite y$24 y$s$143_op y$controllerB.pass_token)))
(assert (= y$controllerB.pass_token$next_rhs_op (ite y$215 y$s$147_op y$s$152_op)))
(assert (= y$246 (= y$controllerB.pass_token$next y$controllerB.pass_token$next_rhs_op)))
(assert (= y$s$149_op (or y$215 y$220)))
(assert (= y$s$177_op (ite y$8 y$n0s2 y$controllerB.state)))
(assert (= y$s$148_op (ite y$215 y$s$177_op y$n0s2)))
(assert (= y$s$150_op (ite y$215 y$s$148_op y$n2s2)))
(assert (= y$s$159_op (ite y$clientB.req y$n1s2 y$controllerB.state)))
(assert (= y$s$160_op (ite y$231 y$s$159_op y$n0s2)))
(assert (= y$s$146_op (ite y$24 y$s$160_op y$n0s2)))
(assert (= y$s$162_op (ite y$231 y$s$146_op y$controllerB.state)))
(assert (= y$s$144_op (ite y$24 y$s$162_op y$n0s2)))
(assert (= y$s$151_op (ite y$24 y$s$144_op y$controllerB.state)))
(assert (= y$controllerB.state$next_rhs_op (ite y$s$149_op y$s$150_op y$s$151_op)))
(assert (= y$270 (= y$controllerB.state$next y$controllerB.state$next_rhs_op)))
(assert (= y$272 (= y$n2s2 y$controllerC.state)))
(assert (= y$s$214_op (and (not y$12) y$controllerC.ack)))
(assert (= y$s$181_op (and y$272 y$s$214_op)))
(assert (= y$277 (= y$n1s2 y$controllerC.state)))
(assert (= y$s$192_op (or y$controllerC.ack y$277)))
(assert (= y$controllerC.ack$next_rhs_op (ite y$272 y$s$181_op y$s$192_op)))
(assert (= y$282 (= y$controllerC.ack$next y$controllerC.ack$next_rhs_op)))
(assert (= y$s$212_op (or y$12 y$controllerC.pass_token)))
(assert (= y$s$186_op (and y$272 y$s$212_op)))
(assert (= y$29 (= y$n0s2 y$controllerC.state)))
(assert (= y$288 (= y$n2s2 y$168)))
(assert (= y$clientC.req (not y$s$195_op)))
(assert (= y$s$196_op (and y$288 y$s$195_op)))
(assert (= y$s$184_op (and y$29 y$s$196_op)))
(assert (= y$s$203_op (and y$288 y$s$184_op)))
(assert (= y$s$182_op (and y$29 y$s$203_op)))
(assert (= y$s$191_op (ite y$29 y$s$182_op y$controllerC.pass_token)))
(assert (= y$controllerC.pass_token$next_rhs_op (ite y$272 y$s$186_op y$s$191_op)))
(assert (= y$303 (= y$controllerC.pass_token$next y$controllerC.pass_token$next_rhs_op)))
(assert (= y$s$188_op (or y$272 y$277)))
(assert (= y$s$216_op (ite y$12 y$n0s2 y$controllerC.state)))
(assert (= y$s$187_op (ite y$272 y$s$216_op y$n0s2)))
(assert (= y$s$189_op (ite y$272 y$s$187_op y$n2s2)))
(assert (= y$s$198_op (ite y$clientC.req y$n1s2 y$controllerC.state)))
(assert (= y$s$199_op (ite y$288 y$s$198_op y$n0s2)))
(assert (= y$s$185_op (ite y$29 y$s$199_op y$n0s2)))
(assert (= y$s$201_op (ite y$288 y$s$185_op y$controllerC.state)))
(assert (= y$s$183_op (ite y$29 y$s$201_op y$n0s2)))
(assert (= y$s$190_op (ite y$29 y$s$183_op y$controllerC.state)))
(assert (= y$controllerC.state$next_rhs_op (ite y$s$188_op y$s$189_op y$s$190_op)))
(assert (= y$327 (= y$controllerC.state$next y$controllerC.state$next_rhs_op)))
(assert (= y$328 (and y$52 y$64 y$83 y$94 y$113 y$124 y$143 y$156 y$189 y$213 y$225 y$246 y$270 y$282 y$303 y$327)))
(assert (= y$w$2$next_op (Concat_32_1_31 y$controllerA.ack$next y$n0s31)))
(assert (= y$364 (= y$n1s32 y$w$2$next_op)))
(assert (= y$w$3$next_op (Concat_32_1_31 y$controllerB.ack$next y$n0s31)))
(assert (= y$367 (= y$n1s32 y$w$3$next_op)))
(assert (= y$s$7$next_op (and y$364 y$367)))
(assert (= y$w$4$next_op (Concat_32_1_31 y$controllerC.ack$next y$n0s31)))
(assert (= y$372 (= y$n1s32 y$w$4$next_op)))
(assert (= y$s$8$next_op (and y$367 y$372)))
(assert (= y$s$11$next_op (or y$s$7$next_op y$s$8$next_op)))
(assert (= y$s$6$next_op (and y$364 y$372)))
(assert (= y$s$10$next_op (or y$s$11$next_op y$s$6$next_op)))
(assert (= y$s$10$next_op (not y$381)))
(assert (= y$382 (= y$prop$next y$381)))
(assert (= y$prop$next (not y$361)))
(assert (= y$controllerA.ack$next (not y$389)))
(assert (= y$390 (and y$364 y$389)))
(assert (= y$390 (not y$392)))
(assert (= y$controllerA.ack (not y$16)))
(assert (= y$388 (and y$16 y$334)))
(assert (= y$388 (not y$391)))
(assert (= y$536 (and y$8 y$12 y$21 y$26 y$prop y$352 y$392 y$391 y$328 y$382 y$361 y$470 y$498)))
(assert y$536)
(check-sat)
(exit)
