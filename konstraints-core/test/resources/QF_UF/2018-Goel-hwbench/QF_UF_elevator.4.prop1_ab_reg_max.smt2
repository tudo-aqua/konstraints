(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: elevator.4.prop1
query-maker: "Yices 2"
query-time: 0.001000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$8 0)
(declare-sort utt$32 0)
(declare-fun y$1 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$2191 () Bool)
(declare-fun y$2192 () Bool)
(declare-fun y$2243 () Bool)
(declare-fun y$2252 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$27 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$33 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$44 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$54 () Bool)
(declare-fun y$56 () Bool)
(declare-fun y$58 () Bool)
(declare-fun y$60 () Bool)
(declare-fun y$62 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$66 () Bool)
(declare-fun y$68 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$72 () Bool)
(declare-fun y$74 () Bool)
(declare-fun y$76 () Bool)
(declare-fun y$78 () Bool)
(declare-fun y$80 () Bool)
(declare-fun y$82 () Bool)
(declare-fun y$84 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$88 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$90 () Bool)
(declare-fun y$92 () Bool)
(declare-fun y$94 () Bool)
(declare-fun y$96 () Bool)
(declare-fun y$98 () Bool)
(declare-fun y$a_choose_next () Bool)
(declare-fun y$a_in_elevator_Person_0 () Bool)
(declare-fun y$a_in_elevator_Person_1 () Bool)
(declare-fun y$a_in_elevator_Person_2 () Bool)
(declare-fun y$a_in_elevator_Person_3 () Bool)
(declare-fun y$a_move_next () Bool)
(declare-fun y$a_out_Person_0 () Bool)
(declare-fun y$a_out_Person_1 () Bool)
(declare-fun y$a_out_Person_2 () Bool)
(declare-fun y$a_out_Person_3 () Bool)
(declare-fun y$a_q_Elevator () Bool)
(declare-fun y$a_q_Servis () Bool)
(declare-fun y$a_r () Bool)
(declare-fun y$a_transporting () Bool)
(declare-fun y$a_waiting_Person_0 () Bool)
(declare-fun y$a_waiting_Person_1 () Bool)
(declare-fun y$a_waiting_Person_2 () Bool)
(declare-fun y$a_waiting_Person_3 () Bool)
(declare-fun y$dve_invalid () Bool)
(declare-fun y$id52 () Bool)
(declare-fun y$id52_op () Bool)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n2s8 () utt$8)
(declare-fun y$n3s8 () utt$8)
(declare-fun y$n4s32 () utt$32)
(declare-fun y$prop () Bool)
(declare-fun y$v3_1517448494_50 () Bool)
(declare-fun y$v3_1517448494_50_op () Bool)
(declare-fun y$v_at_floor_Person_0 () utt$8)
(declare-fun y$v_at_floor_Person_1 () utt$8)
(declare-fun y$v_at_floor_Person_2 () utt$8)
(declare-fun y$v_at_floor_Person_3 () utt$8)
(declare-fun y$v_caller () utt$8)
(declare-fun y$v_current () utt$8)
(declare-fun y$v_floor () utt$8)
(declare-fun y$v_floor_queue_0_0 () utt$8)
(declare-fun y$v_floor_queue_0_1 () utt$8)
(declare-fun y$v_floor_queue_0_2 () utt$8)
(declare-fun y$v_floor_queue_0_3 () utt$8)
(declare-fun y$v_floor_queue_0_act () utt$8)
(declare-fun y$v_floor_queue_1_0 () utt$8)
(declare-fun y$v_floor_queue_1_1 () utt$8)
(declare-fun y$v_floor_queue_1_2 () utt$8)
(declare-fun y$v_floor_queue_1_3 () utt$8)
(declare-fun y$v_floor_queue_1_act () utt$8)
(declare-fun y$v_floor_queue_2_0 () utt$8)
(declare-fun y$v_floor_queue_2_1 () utt$8)
(declare-fun y$v_floor_queue_2_2 () utt$8)
(declare-fun y$v_floor_queue_2_3 () utt$8)
(declare-fun y$v_floor_queue_2_act () utt$8)
(declare-fun y$v_floor_queue_3_0 () utt$8)
(declare-fun y$v_floor_queue_3_1 () utt$8)
(declare-fun y$v_floor_queue_3_2 () utt$8)
(declare-fun y$v_floor_queue_3_3 () utt$8)
(declare-fun y$v_floor_queue_3_act () utt$8)
(declare-fun y$v_going_to () utt$8)
(declare-fun y$v_serving () utt$8)
(declare-fun y$v_who () utt$8)
(assert (distinct y$n0s8 y$n1s8 y$n2s8 y$n3s8))
(assert (not (= y$n1s32 y$n4s32)))
(assert (= y$a_choose_next (not y$1)))
(assert (= y$a_in_elevator_Person_0 (not y$3)))
(assert (= y$a_in_elevator_Person_1 (not y$5)))
(assert (= y$a_in_elevator_Person_2 (not y$7)))
(assert (= y$a_in_elevator_Person_3 (not y$9)))
(assert (= y$a_move_next (not y$11)))
(assert (= y$a_out_Person_0 (not y$13)))
(assert (= y$a_out_Person_1 (not y$15)))
(assert (= y$a_out_Person_2 (not y$17)))
(assert (= y$a_out_Person_3 (not y$19)))
(assert (= y$a_q_Elevator (not y$21)))
(assert (= y$a_q_Servis (not y$23)))
(assert (= y$a_r (not y$25)))
(assert (= y$a_transporting (not y$27)))
(assert (= y$a_waiting_Person_0 (not y$29)))
(assert (= y$a_waiting_Person_1 (not y$31)))
(assert (= y$a_waiting_Person_2 (not y$33)))
(assert (= y$a_waiting_Person_3 (not y$35)))
(assert (= y$dve_invalid (not y$37)))
(assert (= y$40 (= y$n0s8 y$v_at_floor_Person_0)))
(assert (= y$42 (= y$n0s8 y$v_at_floor_Person_1)))
(assert (= y$44 (= y$n0s8 y$v_at_floor_Person_2)))
(assert (= y$46 (= y$n0s8 y$v_at_floor_Person_3)))
(assert (= y$48 (= y$n0s8 y$v_caller)))
(assert (= y$50 (= y$n0s8 y$v_current)))
(assert (= y$52 (= y$n0s8 y$v_floor)))
(assert (= y$54 (= y$n0s8 y$v_floor_queue_0_0)))
(assert (= y$56 (= y$n0s8 y$v_floor_queue_0_1)))
(assert (= y$58 (= y$n0s8 y$v_floor_queue_0_2)))
(assert (= y$60 (= y$n0s8 y$v_floor_queue_0_3)))
(assert (= y$62 (= y$n0s8 y$v_floor_queue_0_act)))
(assert (= y$64 (= y$n0s8 y$v_floor_queue_1_0)))
(assert (= y$66 (= y$n0s8 y$v_floor_queue_1_1)))
(assert (= y$68 (= y$n0s8 y$v_floor_queue_1_2)))
(assert (= y$70 (= y$n0s8 y$v_floor_queue_1_3)))
(assert (= y$72 (= y$n0s8 y$v_floor_queue_1_act)))
(assert (= y$74 (= y$n0s8 y$v_floor_queue_2_0)))
(assert (= y$76 (= y$n0s8 y$v_floor_queue_2_1)))
(assert (= y$78 (= y$n0s8 y$v_floor_queue_2_2)))
(assert (= y$80 (= y$n0s8 y$v_floor_queue_2_3)))
(assert (= y$82 (= y$n0s8 y$v_floor_queue_2_act)))
(assert (= y$84 (= y$n0s8 y$v_floor_queue_3_0)))
(assert (= y$86 (= y$n0s8 y$v_floor_queue_3_1)))
(assert (= y$88 (= y$n0s8 y$v_floor_queue_3_2)))
(assert (= y$90 (= y$n0s8 y$v_floor_queue_3_3)))
(assert (= y$92 (= y$n0s8 y$v_floor_queue_3_act)))
(assert (= y$94 (= y$n0s8 y$v_going_to)))
(assert (= y$96 (= y$n0s8 y$v_serving)))
(assert (= y$98 (= y$n0s8 y$v_who)))
(assert (= y$prop (not y$2243)))
(assert (= y$v3_1517448494_50_op (and y$a_in_elevator_Person_0 y$a_in_elevator_Person_1)))
(assert (= y$id52_op (and y$37 y$v3_1517448494_50_op)))
(assert (= y$id52_op (not y$2191)))
(assert (= y$2192 (= y$prop y$2191)))
(assert (= y$2252 (and y$1 y$3 y$5 y$7 y$9 y$11 y$13 y$15 y$17 y$19 y$21 y$23 y$25 y$27 y$29 y$31 y$33 y$35 y$37 y$40 y$42 y$44 y$46 y$48 y$50 y$52 y$54 y$56 y$58 y$60 y$62 y$64 y$66 y$68 y$70 y$72 y$74 y$76 y$78 y$80 y$82 y$84 y$86 y$88 y$90 y$92 y$94 y$96 y$98 y$2243 y$2192)))
(assert y$2252)
(check-sat)
(exit)
