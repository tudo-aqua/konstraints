(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: driving_phils.2.prop1
query-maker: "Yices 2"
query-time: 0.190000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$8 0)
(declare-sort utt$16 0)
(declare-sort utt$32 0)
(declare-fun BitWiseNot_32_32 (utt$32 ) utt$32)
(declare-fun Concat_32_16_16 (utt$16 utt$16 ) utt$32)
(declare-fun Extract_1_15_15_16 (utt$16 ) Bool)
(declare-fun ShiftR_32_32_32 (utt$32 utt$32 ) utt$32)
(declare-fun y$1 () Bool)
(declare-fun y$104 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$132 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$184 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$1923 () Bool)
(declare-fun y$1926 () Bool)
(declare-fun y$1929 () Bool)
(declare-fun y$1932 () Bool)
(declare-fun y$1933 () Bool)
(declare-fun y$1974 () Bool)
(declare-fun y$2028 () Bool)
(declare-fun y$2054 () Bool)
(declare-fun y$2058 () Bool)
(declare-fun y$2059 () Bool)
(declare-fun y$2060 () Bool)
(declare-fun y$2061 () Bool)
(declare-fun y$2062 () Bool)
(declare-fun y$2063 () Bool)
(declare-fun y$2077 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$27 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$33 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$44 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$57 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$61 () Bool)
(declare-fun y$63 () Bool)
(declare-fun y$65 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$69 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$a_action_phil_0 () Bool)
(declare-fun y$a_action_phil_1 () Bool)
(declare-fun y$a_action_phil_2 () Bool)
(declare-fun y$a_action_round_about () Bool)
(declare-fun y$a_begin0 () Bool)
(declare-fun y$a_begin1 () Bool)
(declare-fun y$a_begin2 () Bool)
(declare-fun y$a_begin3 () Bool)
(declare-fun y$a_end0 () Bool)
(declare-fun y$a_end1 () Bool)
(declare-fun y$a_end2 () Bool)
(declare-fun y$a_end_phil_0 () Bool)
(declare-fun y$a_end_phil_1 () Bool)
(declare-fun y$a_end_phil_2 () Bool)
(declare-fun y$a_mutex_phil_0 () Bool)
(declare-fun y$a_mutex_phil_1 () Bool)
(declare-fun y$a_mutex_phil_2 () Bool)
(declare-fun y$a_reset () Bool)
(declare-fun y$dve_invalid () Bool)
(declare-fun y$id56 () Bool)
(declare-fun y$id56_op () Bool)
(declare-fun y$n0s16 () utt$16)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n16s32 () utt$32)
(declare-fun y$n1s16 () utt$16)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n2s8 () utt$8)
(declare-fun y$n3s32 () utt$32)
(declare-fun y$n3s8 () utt$8)
(declare-fun y$n4294967295s32 () utt$32)
(declare-fun y$n65535s16 () utt$16)
(declare-fun y$prop () Bool)
(declare-fun y$s$10 () utt$32)
(declare-fun y$s$10_op () utt$32)
(declare-fun y$s$5 () utt$32)
(declare-fun y$s$5_op () utt$32)
(declare-fun y$s$6 () utt$32)
(declare-fun y$s$6_op () utt$32)
(declare-fun y$s$7 () utt$32)
(declare-fun y$s$7_op () utt$32)
(declare-fun y$s$8 () utt$32)
(declare-fun y$s$8_op () utt$32)
(declare-fun y$s$9 () utt$32)
(declare-fun y$s$9_op () utt$32)
(declare-fun y$v3_1517448494_47 () utt$32)
(declare-fun y$v3_1517448494_47_op () utt$32)
(declare-fun y$v3_1517448494_48 () utt$32)
(declare-fun y$v3_1517448494_48_op () utt$32)
(declare-fun y$v3_1517448494_49 () utt$32)
(declare-fun y$v3_1517448494_49_op () utt$32)
(declare-fun y$v3_1517448494_52 () utt$32)
(declare-fun y$v3_1517448494_52_op () utt$32)
(declare-fun y$v3_1517448494_53 () utt$32)
(declare-fun y$v3_1517448494_53$next () utt$32)
(declare-fun y$v3_1517448494_53$next_op () utt$32)
(declare-fun y$v3_1517448494_53_op () utt$32)
(declare-fun y$v3_1517448494_54 () utt$32)
(declare-fun y$v3_1517448494_54_op () utt$32)
(declare-fun y$v3_1517448494_58 () utt$32)
(declare-fun y$v3_1517448494_58_op () utt$32)
(declare-fun y$v3_1517448494_59 () utt$32)
(declare-fun y$v3_1517448494_59_op () utt$32)
(declare-fun y$v3_1517448494_60 () utt$32)
(declare-fun y$v3_1517448494_60_op () utt$32)
(declare-fun y$v3_1517448494_64 () Bool)
(declare-fun y$v3_1517448494_64_op () Bool)
(declare-fun y$v_acquiring_0 () utt$16)
(declare-fun y$v_acquiring_1 () utt$16)
(declare-fun y$v_acquiring_2 () utt$16)
(declare-fun y$v_entryRound () utt$16)
(declare-fun y$v_fire () utt$8)
(declare-fun y$v_i_round_about () utt$16)
(declare-fun y$v_phase () utt$8)
(declare-fun y$v_res0_0 () utt$16)
(declare-fun y$v_res0_1 () utt$16)
(declare-fun y$v_res0_1$next () utt$16)
(declare-fun y$v_res0_2 () utt$16)
(declare-fun y$v_res1_0 () utt$16)
(declare-fun y$v_res1_1 () utt$16)
(declare-fun y$v_res1_2 () utt$16)
(declare-fun y$v_resources_0 () utt$8)
(declare-fun y$v_resources_1 () utt$8)
(declare-fun y$w$10 () Bool)
(declare-fun y$w$11 () utt$32)
(declare-fun y$w$11$next () utt$32)
(declare-fun y$w$11$next_op () utt$32)
(declare-fun y$w$11_op () utt$32)
(declare-fun y$w$12 () Bool)
(declare-fun y$w$13 () utt$32)
(declare-fun y$w$13_op () utt$32)
(declare-fun y$w$8 () Bool)
(declare-fun y$w$9 () utt$32)
(declare-fun y$w$9_op () utt$32)
(assert (distinct y$n0s8 y$n2s8 y$n1s8 y$n3s8))
(assert (distinct y$n0s16 y$n1s16 y$n65535s16))
(assert (distinct y$n0s32 y$n16s32 y$n1s32 y$n2s32 y$n3s32 y$n4294967295s32))
(assert (= y$a_action_phil_0 (not y$1)))
(assert (= y$a_action_phil_1 (not y$3)))
(assert (= y$a_action_phil_2 (not y$5)))
(assert (= y$a_action_round_about (not y$7)))
(assert (= y$a_begin0 (not y$9)))
(assert (= y$a_begin1 (not y$11)))
(assert (= y$a_begin2 (not y$13)))
(assert (= y$a_begin3 (not y$15)))
(assert (= y$a_end0 (not y$17)))
(assert (= y$a_end1 (not y$19)))
(assert (= y$a_end2 (not y$21)))
(assert (= y$a_end_phil_0 (not y$23)))
(assert (= y$a_end_phil_1 (not y$25)))
(assert (= y$a_end_phil_2 (not y$27)))
(assert (= y$a_mutex_phil_0 (not y$29)))
(assert (= y$a_mutex_phil_1 (not y$31)))
(assert (= y$a_mutex_phil_2 (not y$33)))
(assert (= y$a_reset (not y$35)))
(assert (= y$dve_invalid (not y$37)))
(assert (= y$40 (= y$n0s16 y$v_acquiring_0)))
(assert (= y$42 (= y$n0s16 y$v_acquiring_1)))
(assert (= y$44 (= y$n0s16 y$v_acquiring_2)))
(assert (= y$46 (= y$n0s16 y$v_entryRound)))
(assert (= y$49 (= y$n0s8 y$v_fire)))
(assert (= y$51 (= y$n0s16 y$v_i_round_about)))
(assert (= y$53 (= y$n0s8 y$v_phase)))
(assert (= y$55 (= y$n0s16 y$v_res0_0)))
(assert (= y$57 (= y$n0s16 y$v_res0_1)))
(assert (= y$59 (= y$n0s16 y$v_res0_2)))
(assert (= y$61 (= y$n0s16 y$v_res1_0)))
(assert (= y$63 (= y$n0s16 y$v_res1_1)))
(assert (= y$65 (= y$n0s16 y$v_res1_2)))
(assert (= y$67 (= y$n0s8 y$v_resources_0)))
(assert (= y$69 (= y$n0s8 y$v_resources_1)))
(assert (= y$prop (not y$1974)))
(assert (= y$104 (Extract_1_15_15_16 y$v_res0_1)))
(assert (= y$w$11_op (Concat_32_16_16 y$n0s16 y$v_res0_1)))
(assert (= y$s$8_op (BitWiseNot_32_32 y$w$11_op)))
(assert (= y$v3_1517448494_54_op (ShiftR_32_32_32 y$s$8_op y$n16s32)))
(assert (= y$s$7_op (BitWiseNot_32_32 y$v3_1517448494_54_op)))
(assert (= y$v3_1517448494_53_op (ShiftR_32_32_32 y$w$11_op y$n16s32)))
(assert (= y$v3_1517448494_52_op (ite y$104 y$s$7_op y$v3_1517448494_53_op)))
(assert (= y$132 (Extract_1_15_15_16 y$v_res0_0)))
(assert (= y$w$9_op (Concat_32_16_16 y$n0s16 y$v_res0_0)))
(assert (= y$s$6_op (BitWiseNot_32_32 y$w$9_op)))
(assert (= y$v3_1517448494_49_op (ShiftR_32_32_32 y$s$6_op y$n16s32)))
(assert (= y$s$5_op (BitWiseNot_32_32 y$v3_1517448494_49_op)))
(assert (= y$v3_1517448494_48_op (ShiftR_32_32_32 y$w$9_op y$n16s32)))
(assert (= y$v3_1517448494_47_op (ite y$132 y$s$5_op y$v3_1517448494_48_op)))
(assert (= y$1923 (not (= y$v3_1517448494_52_op y$v3_1517448494_47_op))))
(assert (= y$184 (Extract_1_15_15_16 y$v_res1_1)))
(assert (= y$w$13_op (Concat_32_16_16 y$n0s16 y$v_res1_1)))
(assert (= y$s$10_op (BitWiseNot_32_32 y$w$13_op)))
(assert (= y$v3_1517448494_60_op (ShiftR_32_32_32 y$s$10_op y$n16s32)))
(assert (= y$s$9_op (BitWiseNot_32_32 y$v3_1517448494_60_op)))
(assert (= y$v3_1517448494_59_op (ShiftR_32_32_32 y$w$13_op y$n16s32)))
(assert (= y$v3_1517448494_58_op (ite y$184 y$s$9_op y$v3_1517448494_59_op)))
(assert (= y$1926 (not (= y$v3_1517448494_47_op y$v3_1517448494_58_op))))
(assert (= y$v3_1517448494_64_op (and y$1923 y$1926)))
(assert (= y$v3_1517448494_64_op (not y$1929)))
(assert (= y$id56_op (and y$37 y$1929)))
(assert (= y$id56_op (not y$1932)))
(assert (= y$1933 (= y$prop y$1932)))
(assert (= y$2059 (= y$n0s16 y$v_res0_1$next)))
(assert (= y$w$11$next_op (Concat_32_16_16 y$n0s16 y$v_res0_1$next)))
(assert (= y$v3_1517448494_53$next_op (ShiftR_32_32_32 y$w$11$next_op y$n16s32)))
(assert (= y$2060 (not (= y$w$11$next_op y$v3_1517448494_53$next_op))))
(assert (= y$2061 (and y$2059 y$2060)))
(assert (= y$2061 (not y$2063)))
(assert (= y$2054 (not (= y$w$11_op y$v3_1517448494_53_op))))
(assert (= y$2058 (and y$57 y$2054)))
(assert (= y$2058 (not y$2062)))
(assert (= y$2077 (and y$1 y$3 y$5 y$7 y$9 y$11 y$13 y$15 y$17 y$19 y$21 y$23 y$25 y$27 y$29 y$31 y$33 y$35 y$37 y$40 y$42 y$44 y$46 y$49 y$51 y$53 y$55 y$57 y$59 y$61 y$63 y$65 y$67 y$69 y$1974 y$1933 y$2063 y$2062)))
(assert y$2077)
(check-sat)
(exit)
