(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_b07
query-maker: "Yices 2"
query-time: 0.137000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$8 0)
(declare-sort utt$24 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_8_24 (utt$8 utt$24 ) utt$32)
(declare-fun y$16 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$26 () Bool)
(declare-fun y$28 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$36 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$43 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$56 () Bool)
(declare-fun y$57 () Bool)
(declare-fun y$58 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$6 () Bool)
(declare-fun y$60 () Bool)
(declare-fun y$61 () Bool)
(declare-fun y$73 () Bool)
(declare-fun y$74 () Bool)
(declare-fun y$75 () Bool)
(declare-fun y$76 () Bool)
(declare-fun y$77 () Bool)
(declare-fun y$78 () Bool)
(declare-fun y$83 () Bool)
(declare-fun y$84 () Bool)
(declare-fun y$85 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$87 () Bool)
(declare-fun y$PUNTI_RETTA () utt$8)
(declare-fun y$PUNTI_RETTA$next () utt$8)
(declare-fun y$PUNTI_RETTA$next_rhs () utt$8)
(declare-fun y$PUNTI_RETTA$next_rhs_op () utt$8)
(declare-fun y$START () Bool)
(declare-fun y$n0s1 () Bool)
(declare-fun y$n0s24 () utt$24)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n148s32 () utt$32)
(declare-fun y$n1s1 () Bool)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$s$3 () utt$8)
(declare-fun y$s$3_op () utt$8)
(declare-fun y$s$4 () Bool)
(declare-fun y$s$4_op () Bool)
(declare-fun y$s$5 () Bool)
(declare-fun y$s$5_op () Bool)
(declare-fun y$s$6 () utt$8)
(declare-fun y$s$6_op () utt$8)
(declare-fun y$stato () Bool)
(declare-fun y$stato$next () Bool)
(declare-fun y$stato$next_rhs () Bool)
(declare-fun y$stato$next_rhs_op () Bool)
(declare-fun y$w$1 () utt$32)
(declare-fun y$w$1$next () utt$32)
(declare-fun y$w$1$next_op () utt$32)
(declare-fun y$w$1_op () utt$32)
(declare-fun y$x () utt$8)
(declare-fun y$x$next () utt$8)
(assert (not (= y$n148s32 y$n0s32)))
(assert (= y$w$1_op (Concat_32_8_24 y$x y$n0s24)))
(assert (= y$35 (not (= y$w$1_op y$n148s32))))
(assert (= y$36 (= y$prop y$35)))
(assert (= y$s$6_op (ite y$START y$PUNTI_RETTA y$n0s8)))
(assert (= y$s$3_op (ite y$stato y$s$6_op y$n0s8)))
(assert (= y$PUNTI_RETTA$next_rhs_op (ite y$stato y$s$3_op y$PUNTI_RETTA)))
(assert (= y$16 (= y$PUNTI_RETTA$next y$PUNTI_RETTA$next_rhs_op)))
(assert (= y$START (not y$s$5_op)))
(assert (= y$s$4_op (and y$stato y$s$5_op)))
(assert (= y$stato$next_rhs_op (=> y$stato y$s$4_op)))
(assert (= y$26 (= y$stato$next y$stato$next_rhs_op)))
(assert (= y$28 (= y$x y$x$next)))
(assert (= y$29 (and y$16 y$26 y$28)))
(assert (= y$prop$next (not y$43)))
(assert (= y$57 (= y$n0s8 y$x$next)))
(assert (= y$w$1$next_op (Concat_32_8_24 y$x$next y$n0s24)))
(assert (= y$58 (= y$n148s32 y$w$1$next_op)))
(assert (= y$59 (and y$57 y$58)))
(assert (= y$59 (not y$61)))
(assert (= y$6 (= y$n0s8 y$x)))
(assert (= (= y$w$1_op y$n148s32) y$50))
(assert (= y$56 (and y$6 y$50)))
(assert (= y$56 (not y$60)))
(assert (= y$87 (and y$prop y$36 y$61 y$60 y$29 y$43)))
(assert y$87)
(check-sat)
(exit)
