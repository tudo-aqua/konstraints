(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: bit-vector
query-maker: "Yices 2"
query-time: 0.134000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$2 0)
(declare-sort utt$3 0)
(declare-sort utt$29 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_3_29 (utt$3 utt$29 ) utt$32)
(declare-fun Concat_3_1_2 (Bool utt$2 ) utt$3)
(declare-fun Concat_3_2_1 (utt$2 Bool ) utt$3)
(declare-fun Extract_1_0_0_3 (utt$3 ) Bool)
(declare-fun Extract_1_2_2_3 (utt$3 ) Bool)
(declare-fun Extract_2_1_0_3 (utt$3 ) utt$2)
(declare-fun Extract_2_2_1_3 (utt$3 ) utt$2)
(declare-fun GrEq_1_32_32 (utt$32 utt$32 ) Bool)
(declare-fun y$10 () Bool)
(declare-fun y$108 () Bool)
(declare-fun y$109 () Bool)
(declare-fun y$123 () Bool)
(declare-fun y$124 () Bool)
(declare-fun y$125 () Bool)
(declare-fun y$126 () Bool)
(declare-fun y$14 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$18 () utt$2)
(declare-fun y$2 () Bool)
(declare-fun y$22 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$38 () Bool)
(declare-fun y$39 () Bool)
(declare-fun y$44 () Bool)
(declare-fun y$45 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$54 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$56 () Bool)
(declare-fun y$57 () Bool)
(declare-fun y$58 () Bool)
(declare-fun y$62 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$71 () Bool)
(declare-fun y$75 () Bool)
(declare-fun y$76 () Bool)
(declare-fun y$77 () Bool)
(declare-fun y$78 () Bool)
(declare-fun y$79 () Bool)
(declare-fun y$8 () utt$2)
(declare-fun y$82 () Bool)
(declare-fun y$83 () Bool)
(declare-fun y$a () utt$3)
(declare-fun y$a$next () utt$3)
(declare-fun y$a$next_rhs () utt$3)
(declare-fun y$a$next_rhs_op () utt$3)
(declare-fun y$b () utt$3)
(declare-fun y$b$next () utt$3)
(declare-fun y$b$next_rhs () utt$3)
(declare-fun y$b$next_rhs_op () utt$3)
(declare-fun y$n0s29 () utt$29)
(declare-fun y$n0s3 () utt$3)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n2s3 () utt$3)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n3s3 () utt$3)
(declare-fun y$n3s32 () utt$32)
(declare-fun y$n6s3 () utt$3)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0$next () Bool)
(declare-fun y$prop0$next_op () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$w$3 () utt$32)
(declare-fun y$w$3$next () utt$32)
(declare-fun y$w$3$next_op () utt$32)
(declare-fun y$w$3_op () utt$32)
(declare-fun y$w$4 () utt$2)
(declare-fun y$w$5 () Bool)
(declare-fun y$w$6 () Bool)
(declare-fun y$w$7 () utt$2)
(assert (distinct y$n2s3 y$n6s3 y$n3s3 y$n0s3))
(assert (distinct y$n2s32 y$n0s32 y$n3s32))
(assert (= y$w$3_op (Concat_32_3_29 y$a y$n0s29)))
(assert (= y$prop0_op (GrEq_1_32_32 y$w$3_op y$n2s32)))
(assert (= y$31 (= y$prop y$prop0_op)))
(assert (= y$8 (Extract_2_2_1_3 y$b)))
(assert (= y$10 (Extract_1_0_0_3 y$b)))
(assert (= y$a$next_rhs_op (Concat_3_2_1 y$8 y$10)))
(assert (= y$14 (= y$a$next y$a$next_rhs_op)))
(assert (= y$16 (Extract_1_2_2_3 y$a)))
(assert (= y$18 (Extract_2_1_0_3 y$a)))
(assert (= y$b$next_rhs_op (Concat_3_1_2 y$16 y$18)))
(assert (= y$22 (= y$b$next y$b$next_rhs_op)))
(assert (= y$23 (and y$14 y$22)))
(assert (= y$w$3$next_op (Concat_32_3_29 y$a$next y$n0s29)))
(assert (= y$prop0$next_op (GrEq_1_32_32 y$w$3$next_op y$n2s32)))
(assert (= y$44 (= y$prop0$next_op y$prop$next)))
(assert (= y$prop$next (not y$39)))
(assert (= y$54 (= y$n2s3 y$a$next)))
(assert (= y$55 (not (= y$n2s32 y$w$3$next_op))))
(assert (= y$56 (and y$54 y$55)))
(assert (= y$56 (not y$58)))
(assert (= y$2 (= y$n2s3 y$a)))
(assert (= y$50 (not (= y$w$3_op y$n2s32))))
(assert (= y$53 (and y$2 y$50)))
(assert (= y$53 (not y$57)))
(assert (= y$prop0$next_op (not y$76)))
(assert (= (= y$n2s32 y$w$3$next_op) y$62))
(assert (= y$77 (and y$76 y$62)))
(assert (= y$77 (not y$79)))
(assert (= y$prop0_op (not y$46)))
(assert (= (= y$w$3_op y$n2s32) y$70))
(assert (= y$75 (and y$46 y$70)))
(assert (= y$75 (not y$78)))
(assert (= y$5 (= y$n6s3 y$b)))
(assert (= y$108 (and y$5 y$76 y$14)))
(assert (= y$108 (not y$109)))
(assert (= y$124 (and y$prop y$31 y$58 y$57 y$79 y$78 y$23 y$44 y$39 y$109)))
(assert y$124)
(assert (distinct y$n2s3 y$n6s3 y$n3s3 y$n0s3))
(assert (distinct y$n2s32 y$n0s32 y$n3s32))
(check-sat)
(exit)
