(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: v_DAIO
query-maker: "Yices 2"
query-time: 0.017000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$2 0)
(declare-sort utt$4 0)
(declare-sort utt$7 0)
(declare-sort utt$9 0)
(declare-sort utt$20 0)
(declare-sort utt$31 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_1_31 (Bool utt$31 ) utt$32)
(declare-fun y$11 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$20 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$527 () Bool)
(declare-fun y$530 () Bool)
(declare-fun y$533 () Bool)
(declare-fun y$543 () Bool)
(declare-fun y$554 () Bool)
(declare-fun y$6 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$bit_count_A () utt$7)
(declare-fun y$bit_count_B () utt$7)
(declare-fun y$clock_out () Bool)
(declare-fun y$frame_counter () utt$9)
(declare-fun y$load_A () Bool)
(declare-fun y$load_B () Bool)
(declare-fun y$load_buff () Bool)
(declare-fun y$n0s20 () utt$20)
(declare-fun y$n0s31 () utt$31)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s4 () utt$4)
(declare-fun y$n0s7 () utt$7)
(declare-fun y$n0s9 () utt$9)
(declare-fun y$n10s4 () utt$4)
(declare-fun y$n191s32 () utt$32)
(declare-fun y$n1s2 () utt$2)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s4 () utt$4)
(declare-fun y$n1s7 () utt$7)
(declare-fun y$n1s9 () utt$9)
(declare-fun y$n2s2 () utt$2)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n2s4 () utt$4)
(declare-fun y$n31s32 () utt$32)
(declare-fun y$n32s32 () utt$32)
(declare-fun y$n3s2 () utt$2)
(declare-fun y$n3s32 () utt$32)
(declare-fun y$n3s4 () utt$4)
(declare-fun y$n4s32 () utt$32)
(declare-fun y$n4s4 () utt$4)
(declare-fun y$n4s7 () utt$7)
(declare-fun y$n5s32 () utt$32)
(declare-fun y$n5s4 () utt$4)
(declare-fun y$n6s32 () utt$32)
(declare-fun y$n6s4 () utt$4)
(declare-fun y$n7s4 () utt$4)
(declare-fun y$n8s32 () utt$32)
(declare-fun y$n8s4 () utt$4)
(declare-fun y$n9s4 () utt$4)
(declare-fun y$parity () Bool)
(declare-fun y$pc () utt$4)
(declare-fun y$prop () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$shift_reg () utt$20)
(declare-fun y$w$6 () utt$32)
(declare-fun y$w$6_op () utt$32)
(declare-fun y$w$7 () utt$32)
(declare-fun y$w$7_op () utt$32)
(assert (distinct y$n2s2 y$n3s2 y$n1s2))
(assert (distinct y$n0s4 y$n1s4 y$n7s4 y$n9s4 y$n5s4 y$n3s4 y$n6s4 y$n2s4 y$n8s4 y$n4s4 y$n10s4))
(assert (distinct y$n0s7 y$n1s7 y$n4s7))
(assert (not (= y$n0s9 y$n1s9)))
(assert (distinct y$n2s32 y$n4s32 y$n6s32 y$n8s32 y$n0s32 y$n1s32 y$n32s32 y$n31s32 y$n5s32 y$n3s32 y$n191s32))
(assert (= y$2 (= y$n0s7 y$bit_count_A)))
(assert (= y$4 (= y$n0s7 y$bit_count_B)))
(assert (= y$clock_out (not y$6)))
(assert (= y$9 (= y$n0s9 y$frame_counter)))
(assert (= y$load_A (not y$11)))
(assert (= y$load_B (not y$13)))
(assert (= y$load_buff (not y$15)))
(assert (= y$parity (not y$17)))
(assert (= y$20 (= y$n0s4 y$pc)))
(assert (= y$23 (= y$shift_reg y$n0s20)))
(assert (= y$prop (not y$543)))
(assert (= y$w$6_op (Concat_32_1_31 y$load_A y$n0s31)))
(assert (= y$527 (= y$n1s32 y$w$6_op)))
(assert (= y$w$7_op (Concat_32_1_31 y$load_B y$n0s31)))
(assert (= y$530 (= y$n0s32 y$w$7_op)))
(assert (= y$prop0_op (or y$527 y$530)))
(assert (= y$533 (= y$prop y$prop0_op)))
(assert (= y$554 (and y$2 y$4 y$6 y$9 y$11 y$13 y$15 y$17 y$20 y$23 y$543 y$533)))
(assert y$554)
(check-sat)
(exit)
