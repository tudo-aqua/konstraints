(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_b08
query-maker: "Yices 2"
query-time: 11.797000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$3 0)
(declare-sort utt$4 0)
(declare-sort utt$20 0)
(declare-sort utt$28 0)
(declare-sort utt$29 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_3_29 (utt$3 utt$29 ) utt$32)
(declare-fun Concat_32_4_28 (utt$4 utt$28 ) utt$32)
(declare-fun Extract_4_3_0_20 (utt$20 ) utt$4)
(declare-fun y$10 () Bool)
(declare-fun y$110 () utt$4)
(declare-fun y$154 () utt$4)
(declare-fun y$155 () utt$4)
(declare-fun y$156 () utt$4)
(declare-fun y$157 () utt$4)
(declare-fun y$158 () utt$4)
(declare-fun y$159 () utt$4)
(declare-fun y$160 () utt$4)
(declare-fun y$161 () utt$4)
(declare-fun y$162 () utt$4)
(declare-fun y$163 () utt$4)
(declare-fun y$164 () utt$4)
(declare-fun y$165 () utt$4)
(declare-fun y$166 () utt$4)
(declare-fun y$167 () utt$4)
(declare-fun y$168 () utt$4)
(declare-fun y$169 () utt$4)
(declare-fun y$170 () utt$4)
(declare-fun y$171 () utt$4)
(declare-fun y$172 () utt$4)
(declare-fun y$173 () utt$4)
(declare-fun y$174 () utt$4)
(declare-fun y$175 () utt$4)
(declare-fun y$176 () utt$4)
(declare-fun y$177 () utt$4)
(declare-fun y$178 () utt$4)
(declare-fun y$179 () utt$4)
(declare-fun y$180 () utt$4)
(declare-fun y$181 () utt$4)
(declare-fun y$186 () Bool)
(declare-fun y$187 () Bool)
(declare-fun y$193 () Bool)
(declare-fun y$194 () Bool)
(declare-fun y$197 () Bool)
(declare-fun y$198 () Bool)
(declare-fun y$199 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$200 () Bool)
(declare-fun y$201 () Bool)
(declare-fun y$202 () Bool)
(declare-fun y$203 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$26 () Bool)
(declare-fun y$260 () utt$4)
(declare-fun y$288 () utt$4)
(declare-fun y$289 () utt$4)
(declare-fun y$290 () utt$4)
(declare-fun y$291 () utt$4)
(declare-fun y$292 () utt$4)
(declare-fun y$293 () utt$4)
(declare-fun y$294 () utt$4)
(declare-fun y$295 () utt$4)
(declare-fun y$296 () utt$4)
(declare-fun y$297 () utt$4)
(declare-fun y$298 () utt$4)
(declare-fun y$299 () utt$4)
(declare-fun y$300 () utt$4)
(declare-fun y$301 () utt$4)
(declare-fun y$302 () utt$4)
(declare-fun y$303 () utt$4)
(declare-fun y$304 () utt$4)
(declare-fun y$305 () utt$4)
(declare-fun y$306 () utt$4)
(declare-fun y$307 () utt$4)
(declare-fun y$308 () utt$4)
(declare-fun y$309 () utt$4)
(declare-fun y$310 () utt$4)
(declare-fun y$311 () utt$4)
(declare-fun y$312 () utt$4)
(declare-fun y$313 () utt$4)
(declare-fun y$314 () utt$4)
(declare-fun y$315 () utt$4)
(declare-fun y$319 () Bool)
(declare-fun y$32 () Bool)
(declare-fun y$320 () Bool)
(declare-fun y$321 () Bool)
(declare-fun y$323 () Bool)
(declare-fun y$337 () Bool)
(declare-fun y$36 () Bool)
(declare-fun y$365 () Bool)
(declare-fun y$366 () Bool)
(declare-fun y$367 () Bool)
(declare-fun y$368 () Bool)
(declare-fun y$369 () Bool)
(declare-fun y$370 () Bool)
(declare-fun y$381 () Bool)
(declare-fun y$39 () Bool)
(declare-fun y$390 () Bool)
(declare-fun y$391 () Bool)
(declare-fun y$392 () Bool)
(declare-fun y$393 () Bool)
(declare-fun y$394 () Bool)
(declare-fun y$398 () Bool)
(declare-fun y$399 () Bool)
(declare-fun y$400 () Bool)
(declare-fun y$401 () Bool)
(declare-fun y$402 () Bool)
(declare-fun y$403 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$45 () Bool)
(declare-fun y$470 () Bool)
(declare-fun y$471 () Bool)
(declare-fun y$472 () Bool)
(declare-fun y$473 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$MAR () utt$3)
(declare-fun y$MAR$next () utt$3)
(declare-fun y$MAR$next_rhs () utt$3)
(declare-fun y$MAR$next_rhs_op () utt$3)
(declare-fun y$O () utt$4)
(declare-fun y$O$next () utt$4)
(declare-fun y$ROM_OUT () utt$20)
(declare-fun y$ROM_OUT$next () utt$20)
(declare-fun y$ROM_OUT$next_op () utt$20)
(declare-fun y$ROM_OUT_op () utt$20)
(declare-fun y$START () Bool)
(declare-fun y$STATO () Bool)
(declare-fun y$STATO$next () Bool)
(declare-fun y$STATO$next_rhs () Bool)
(declare-fun y$STATO$next_rhs_op () Bool)
(declare-fun y$n0s1 () Bool)
(declare-fun y$n0s20 () utt$20)
(declare-fun y$n0s28 () utt$28)
(declare-fun y$n0s29 () utt$29)
(declare-fun y$n0s3 () utt$3)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s4 () utt$4)
(declare-fun y$n1046202s20 () utt$20)
(declare-fun y$n1047464s20 () utt$20)
(declare-fun y$n1048430s20 () utt$20)
(declare-fun y$n10s32 () utt$32)
(declare-fun y$n10s4 () utt$4)
(declare-fun y$n11s4 () utt$4)
(declare-fun y$n14s4 () utt$4)
(declare-fun y$n15s4 () utt$4)
(declare-fun y$n196596s20 () utt$20)
(declare-fun y$n1s1 () Bool)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n236898s20 () utt$20)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n2s4 () utt$4)
(declare-fun y$n3s32 () utt$32)
(declare-fun y$n4s32 () utt$32)
(declare-fun y$n4s4 () utt$4)
(declare-fun y$n522618s20 () utt$20)
(declare-fun y$n5s32 () utt$32)
(declare-fun y$n692223s20 () utt$20)
(declare-fun y$n6s32 () utt$32)
(declare-fun y$n829275s20 () utt$20)
(declare-fun y$n8s4 () utt$4)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$s$17 () utt$20)
(declare-fun y$s$17$next () utt$20)
(declare-fun y$s$17$next_op () utt$20)
(declare-fun y$s$17_op () utt$20)
(declare-fun y$s$18 () utt$20)
(declare-fun y$s$18$next () utt$20)
(declare-fun y$s$18$next_op () utt$20)
(declare-fun y$s$18_op () utt$20)
(declare-fun y$s$19 () utt$20)
(declare-fun y$s$19$next () utt$20)
(declare-fun y$s$19$next_op () utt$20)
(declare-fun y$s$19_op () utt$20)
(declare-fun y$s$20 () Bool)
(declare-fun y$s$20_op () Bool)
(declare-fun y$s$22 () utt$20)
(declare-fun y$s$22$next () utt$20)
(declare-fun y$s$22$next_op () utt$20)
(declare-fun y$s$22_op () utt$20)
(declare-fun y$s$23 () utt$20)
(declare-fun y$s$23$next () utt$20)
(declare-fun y$s$23$next_op () utt$20)
(declare-fun y$s$23_op () utt$20)
(declare-fun y$s$24 () utt$20)
(declare-fun y$s$24$next () utt$20)
(declare-fun y$s$24$next_op () utt$20)
(declare-fun y$s$24_op () utt$20)
(declare-fun y$s$25 () utt$20)
(declare-fun y$s$25$next () utt$20)
(declare-fun y$s$25$next_op () utt$20)
(declare-fun y$s$25_op () utt$20)
(declare-fun y$s$26 () utt$20)
(declare-fun y$s$26$next () utt$20)
(declare-fun y$s$26$next_op () utt$20)
(declare-fun y$s$26_op () utt$20)
(declare-fun y$s$27 () utt$20)
(declare-fun y$s$27$next () utt$20)
(declare-fun y$s$27$next_op () utt$20)
(declare-fun y$s$27_op () utt$20)
(declare-fun y$s$28 () utt$20)
(declare-fun y$s$28$next () utt$20)
(declare-fun y$s$28$next_op () utt$20)
(declare-fun y$s$28_op () utt$20)
(declare-fun y$s$29 () utt$20)
(declare-fun y$s$29$next () utt$20)
(declare-fun y$s$29$next_op () utt$20)
(declare-fun y$s$29_op () utt$20)
(declare-fun y$s$3 () utt$20)
(declare-fun y$s$3$next () utt$20)
(declare-fun y$s$3$next_op () utt$20)
(declare-fun y$s$30 () utt$20)
(declare-fun y$s$30$next () utt$20)
(declare-fun y$s$30$next_op () utt$20)
(declare-fun y$s$30_op () utt$20)
(declare-fun y$s$31 () utt$20)
(declare-fun y$s$31$next () utt$20)
(declare-fun y$s$31$next_op () utt$20)
(declare-fun y$s$31_op () utt$20)
(declare-fun y$s$32 () utt$20)
(declare-fun y$s$32$next () utt$20)
(declare-fun y$s$32$next_op () utt$20)
(declare-fun y$s$32_op () utt$20)
(declare-fun y$s$33 () utt$20)
(declare-fun y$s$33$next () utt$20)
(declare-fun y$s$33$next_op () utt$20)
(declare-fun y$s$33_op () utt$20)
(declare-fun y$s$34 () utt$20)
(declare-fun y$s$34$next () utt$20)
(declare-fun y$s$34$next_op () utt$20)
(declare-fun y$s$34_op () utt$20)
(declare-fun y$s$35 () utt$20)
(declare-fun y$s$35$next () utt$20)
(declare-fun y$s$35$next_op () utt$20)
(declare-fun y$s$35_op () utt$20)
(declare-fun y$s$36 () utt$20)
(declare-fun y$s$36$next () utt$20)
(declare-fun y$s$36$next_op () utt$20)
(declare-fun y$s$36_op () utt$20)
(declare-fun y$s$37 () utt$20)
(declare-fun y$s$37$next () utt$20)
(declare-fun y$s$37$next_op () utt$20)
(declare-fun y$s$37_op () utt$20)
(declare-fun y$s$38 () utt$20)
(declare-fun y$s$38$next () utt$20)
(declare-fun y$s$38$next_op () utt$20)
(declare-fun y$s$38_op () utt$20)
(declare-fun y$s$39 () utt$20)
(declare-fun y$s$39$next () utt$20)
(declare-fun y$s$39$next_op () utt$20)
(declare-fun y$s$39_op () utt$20)
(declare-fun y$s$3_op () utt$20)
(declare-fun y$s$4 () Bool)
(declare-fun y$s$4_op () Bool)
(declare-fun y$s$5 () utt$20)
(declare-fun y$s$5$next () utt$20)
(declare-fun y$s$5$next_op () utt$20)
(declare-fun y$s$5_op () utt$20)
(declare-fun y$s$6 () utt$20)
(declare-fun y$s$6$next () utt$20)
(declare-fun y$s$6$next_op () utt$20)
(declare-fun y$s$6_op () utt$20)
(declare-fun y$s$7 () utt$20)
(declare-fun y$s$7$next () utt$20)
(declare-fun y$s$7$next_op () utt$20)
(declare-fun y$s$7_op () utt$20)
(declare-fun y$s$8 () utt$20)
(declare-fun y$s$8$next () utt$20)
(declare-fun y$s$8$next_op () utt$20)
(declare-fun y$s$8_op () utt$20)
(declare-fun y$s$9 () utt$20)
(declare-fun y$s$9$next () utt$20)
(declare-fun y$s$9$next_op () utt$20)
(declare-fun y$s$9_op () utt$20)
(declare-fun y$w$1 () utt$4)
(declare-fun y$w$1$next () utt$4)
(declare-fun y$w$2 () utt$32)
(declare-fun y$w$2$next () utt$32)
(declare-fun y$w$2$next_op () utt$32)
(declare-fun y$w$2_op () utt$32)
(declare-fun y$w$3 () utt$32)
(declare-fun y$w$3$next () utt$32)
(declare-fun y$w$3$next_op () utt$32)
(declare-fun y$w$3_op () utt$32)
(assert (distinct y$n0s4 y$n10s4 y$n2s4 y$n15s4 y$n14s4 y$n8s4 y$n11s4 y$n4s4))
(assert (distinct y$n522618s20 y$n0s20 y$n236898s20 y$n692223s20 y$n1046202s20 y$n1048430s20 y$n1047464s20 y$n829275s20 y$n196596s20))
(assert (distinct y$n0s32 y$n1s32 y$n2s32 y$n3s32 y$n4s32 y$n5s32 y$n6s32 y$n10s32))
(assert (= y$w$3_op (Concat_32_3_29 y$MAR y$n0s29)))
(assert (= y$32 (= y$n0s32 y$w$3_op)))
(assert (= y$36 (= y$n1s32 y$w$3_op)))
(assert (= y$39 (= y$n2s32 y$w$3_op)))
(assert (= y$42 (= y$n3s32 y$w$3_op)))
(assert (= y$45 (= y$n4s32 y$w$3_op)))
(assert (= y$48 (= y$n5s32 y$w$3_op)))
(assert (= y$51 (= y$n6s32 y$w$3_op)))
(assert (= y$s$22_op (ite y$51 y$n829275s20 y$n196596s20)))
(assert (= y$s$23_op (ite y$48 y$n0s20 y$s$22_op)))
(assert (= y$s$24_op (ite y$45 y$n0s20 y$s$23_op)))
(assert (= y$s$25_op (ite y$42 y$n0s20 y$s$24_op)))
(assert (= y$s$26_op (ite y$39 y$n0s20 y$s$25_op)))
(assert (= y$s$27_op (ite y$36 y$n0s20 y$s$26_op)))
(assert (= y$s$9_op (ite y$32 y$n0s20 y$s$27_op)))
(assert (= y$s$28_op (ite y$48 y$n1047464s20 y$s$9_op)))
(assert (= y$s$29_op (ite y$45 y$n0s20 y$s$28_op)))
(assert (= y$s$30_op (ite y$42 y$n0s20 y$s$29_op)))
(assert (= y$s$31_op (ite y$39 y$n0s20 y$s$30_op)))
(assert (= y$s$32_op (ite y$36 y$n0s20 y$s$31_op)))
(assert (= y$s$8_op (ite y$32 y$n0s20 y$s$32_op)))
(assert (= y$s$33_op (ite y$45 y$n1048430s20 y$s$8_op)))
(assert (= y$s$34_op (ite y$42 y$n0s20 y$s$33_op)))
(assert (= y$s$35_op (ite y$39 y$n0s20 y$s$34_op)))
(assert (= y$s$36_op (ite y$36 y$n0s20 y$s$35_op)))
(assert (= y$s$7_op (ite y$32 y$n0s20 y$s$36_op)))
(assert (= y$s$37_op (ite y$42 y$n1046202s20 y$s$7_op)))
(assert (= y$s$38_op (ite y$39 y$n0s20 y$s$37_op)))
(assert (= y$s$39_op (ite y$36 y$n0s20 y$s$38_op)))
(assert (= y$s$6_op (ite y$32 y$n0s20 y$s$39_op)))
(assert (= y$s$17_op (ite y$39 y$n692223s20 y$s$6_op)))
(assert (= y$s$18_op (ite y$36 y$n0s20 y$s$17_op)))
(assert (= y$s$5_op (ite y$32 y$n0s20 y$s$18_op)))
(assert (= y$s$19_op (ite y$36 y$n236898s20 y$s$5_op)))
(assert (= y$s$3_op (ite y$32 y$n0s20 y$s$19_op)))
(assert (= y$ROM_OUT_op (ite y$32 y$n522618s20 y$s$3_op)))
(assert (= y$154 (ite y$51 y$n11s4 y$n4s4)))
(assert (= y$155 (ite y$48 y$n0s4 y$154)))
(assert (= y$156 (ite y$45 y$n0s4 y$155)))
(assert (= y$157 (ite y$42 y$n0s4 y$156)))
(assert (= y$158 (ite y$39 y$n0s4 y$157)))
(assert (= y$159 (ite y$36 y$n0s4 y$158)))
(assert (= y$160 (ite y$32 y$n0s4 y$159)))
(assert (= y$161 (ite y$48 y$n8s4 y$160)))
(assert (= y$162 (ite y$45 y$n0s4 y$161)))
(assert (= y$163 (ite y$42 y$n0s4 y$162)))
(assert (= y$164 (ite y$39 y$n0s4 y$163)))
(assert (= y$165 (ite y$36 y$n0s4 y$164)))
(assert (= y$166 (ite y$32 y$n0s4 y$165)))
(assert (= y$167 (ite y$45 y$n14s4 y$166)))
(assert (= y$168 (ite y$42 y$n0s4 y$167)))
(assert (= y$169 (ite y$39 y$n0s4 y$168)))
(assert (= y$170 (ite y$36 y$n0s4 y$169)))
(assert (= y$171 (ite y$32 y$n0s4 y$170)))
(assert (= y$172 (ite y$42 y$n10s4 y$171)))
(assert (= y$173 (ite y$39 y$n0s4 y$172)))
(assert (= y$174 (ite y$36 y$n0s4 y$173)))
(assert (= y$175 (ite y$32 y$n0s4 y$174)))
(assert (= y$176 (ite y$39 y$n15s4 y$175)))
(assert (= y$177 (ite y$36 y$n0s4 y$176)))
(assert (= y$178 (ite y$32 y$n0s4 y$177)))
(assert (= y$179 (ite y$36 y$n2s4 y$178)))
(assert (= y$180 (ite y$32 y$n0s4 y$179)))
(assert (= y$181 (ite y$32 y$n10s4 y$180)))
(assert (= y$110 (Extract_4_3_0_20 y$ROM_OUT_op)))
(assert (= y$181 y$110))
(assert (= y$w$2_op (Concat_32_4_28 y$110 y$n0s28)))
(assert (= y$186 (not (= y$n0s32 y$w$2_op))))
(assert (= y$187 (= y$prop y$186)))
(assert (= y$10 (= y$O y$O$next)))
(assert (= y$STATO (not y$7)))
(assert (= y$s$20_op (or y$STATO y$START)))
(assert (= y$s$4_op (and y$7 y$s$20_op)))
(assert (= y$STATO$next_rhs_op (and (not y$STATO) y$s$4_op)))
(assert (= y$21 (= y$STATO$next y$STATO$next_rhs_op)))
(assert (= y$MAR$next_rhs_op (ite y$STATO y$n0s3 y$MAR)))
(assert (= y$25 (= y$MAR$next y$MAR$next_rhs_op)))
(assert (= y$26 (and y$10 y$21 y$25)))
(assert (= y$w$3$next_op (Concat_32_3_29 y$MAR$next y$n0s29)))
(assert (= (= y$n0s32 y$w$3$next_op) y$197))
(assert (= y$198 (= y$n1s32 y$w$3$next_op)))
(assert (= y$199 (= y$n2s32 y$w$3$next_op)))
(assert (= y$200 (= y$n3s32 y$w$3$next_op)))
(assert (= y$201 (= y$n4s32 y$w$3$next_op)))
(assert (= y$202 (= y$n5s32 y$w$3$next_op)))
(assert (= y$203 (= y$n6s32 y$w$3$next_op)))
(assert (= y$s$22$next_op (ite y$203 y$n829275s20 y$n196596s20)))
(assert (= y$s$23$next_op (ite y$202 y$n0s20 y$s$22$next_op)))
(assert (= y$s$24$next_op (ite y$201 y$n0s20 y$s$23$next_op)))
(assert (= y$s$25$next_op (ite y$200 y$n0s20 y$s$24$next_op)))
(assert (= y$s$26$next_op (ite y$199 y$n0s20 y$s$25$next_op)))
(assert (= y$s$27$next_op (ite y$198 y$n0s20 y$s$26$next_op)))
(assert (= y$s$9$next_op (ite y$197 y$n0s20 y$s$27$next_op)))
(assert (= y$s$28$next_op (ite y$202 y$n1047464s20 y$s$9$next_op)))
(assert (= y$s$29$next_op (ite y$201 y$n0s20 y$s$28$next_op)))
(assert (= y$s$30$next_op (ite y$200 y$n0s20 y$s$29$next_op)))
(assert (= y$s$31$next_op (ite y$199 y$n0s20 y$s$30$next_op)))
(assert (= y$s$32$next_op (ite y$198 y$n0s20 y$s$31$next_op)))
(assert (= y$s$8$next_op (ite y$197 y$n0s20 y$s$32$next_op)))
(assert (= y$s$33$next_op (ite y$201 y$n1048430s20 y$s$8$next_op)))
(assert (= y$s$34$next_op (ite y$200 y$n0s20 y$s$33$next_op)))
(assert (= y$s$35$next_op (ite y$199 y$n0s20 y$s$34$next_op)))
(assert (= y$s$36$next_op (ite y$198 y$n0s20 y$s$35$next_op)))
(assert (= y$s$7$next_op (ite y$197 y$n0s20 y$s$36$next_op)))
(assert (= y$s$37$next_op (ite y$200 y$n1046202s20 y$s$7$next_op)))
(assert (= y$s$38$next_op (ite y$199 y$n0s20 y$s$37$next_op)))
(assert (= y$s$39$next_op (ite y$198 y$n0s20 y$s$38$next_op)))
(assert (= y$s$6$next_op (ite y$197 y$n0s20 y$s$39$next_op)))
(assert (= y$s$17$next_op (ite y$199 y$n692223s20 y$s$6$next_op)))
(assert (= y$s$18$next_op (ite y$198 y$n0s20 y$s$17$next_op)))
(assert (= y$s$5$next_op (ite y$197 y$n0s20 y$s$18$next_op)))
(assert (= y$s$19$next_op (ite y$198 y$n236898s20 y$s$5$next_op)))
(assert (= y$s$3$next_op (ite y$197 y$n0s20 y$s$19$next_op)))
(assert (= y$ROM_OUT$next_op (ite y$197 y$n522618s20 y$s$3$next_op)))
(assert (= y$288 (ite y$203 y$n11s4 y$n4s4)))
(assert (= y$289 (ite y$202 y$n0s4 y$288)))
(assert (= y$290 (ite y$201 y$n0s4 y$289)))
(assert (= y$291 (ite y$200 y$n0s4 y$290)))
(assert (= y$292 (ite y$199 y$n0s4 y$291)))
(assert (= y$293 (ite y$198 y$n0s4 y$292)))
(assert (= y$294 (ite y$197 y$n0s4 y$293)))
(assert (= y$295 (ite y$202 y$n8s4 y$294)))
(assert (= y$296 (ite y$201 y$n0s4 y$295)))
(assert (= y$297 (ite y$200 y$n0s4 y$296)))
(assert (= y$298 (ite y$199 y$n0s4 y$297)))
(assert (= y$299 (ite y$198 y$n0s4 y$298)))
(assert (= y$300 (ite y$197 y$n0s4 y$299)))
(assert (= y$301 (ite y$201 y$n14s4 y$300)))
(assert (= y$302 (ite y$200 y$n0s4 y$301)))
(assert (= y$303 (ite y$199 y$n0s4 y$302)))
(assert (= y$304 (ite y$198 y$n0s4 y$303)))
(assert (= y$305 (ite y$197 y$n0s4 y$304)))
(assert (= y$306 (ite y$200 y$n10s4 y$305)))
(assert (= y$307 (ite y$199 y$n0s4 y$306)))
(assert (= y$308 (ite y$198 y$n0s4 y$307)))
(assert (= y$309 (ite y$197 y$n0s4 y$308)))
(assert (= y$310 (ite y$199 y$n15s4 y$309)))
(assert (= y$311 (ite y$198 y$n0s4 y$310)))
(assert (= y$312 (ite y$197 y$n0s4 y$311)))
(assert (= y$313 (ite y$198 y$n2s4 y$312)))
(assert (= y$314 (ite y$197 y$n0s4 y$313)))
(assert (= y$315 (ite y$197 y$n10s4 y$314)))
(assert (= y$260 (Extract_4_3_0_20 y$ROM_OUT$next_op)))
(assert (= y$315 y$260))
(assert (= y$w$2$next_op (Concat_32_4_28 y$260 y$n0s28)))
(assert (= (not (= y$n0s32 y$w$2$next_op)) y$319))
(assert (= y$320 (= y$prop$next y$319)))
(assert (= y$prop$next (not y$194)))
(assert (= y$366 (= y$n0s3 y$MAR$next)))
(assert (= y$367 (not (= y$n0s32 y$w$3$next_op))))
(assert (= y$368 (and y$366 y$367)))
(assert (= y$368 (not y$370)))
(assert (= y$2 (= y$MAR y$n0s3)))
(assert (= (not (= y$n0s32 y$w$3_op)) y$323))
(assert (= y$365 (and y$2 y$323)))
(assert (= y$365 (not y$369)))
(assert (= y$391 (= y$n0s32 y$w$2$next_op)))
(assert (= y$392 (and y$197 y$391)))
(assert (= y$392 (not y$394)))
(assert (= (= y$n0s32 y$w$2_op) y$337))
(assert (= y$390 (and y$32 y$337)))
(assert (= y$390 (not y$393)))
(assert (= (and y$prop y$187 y$370 y$369 y$394 y$393 y$26 y$320 y$194) y$473))
(assert y$473)
(check-sat)
(exit)
