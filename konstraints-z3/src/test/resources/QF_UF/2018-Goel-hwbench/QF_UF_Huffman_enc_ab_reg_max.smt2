(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: Huffman_enc
query-maker: "Yices 2"
query-time: 1.313000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$5 0)
(declare-sort utt$8 0)
(declare-sort utt$9 0)
(declare-sort utt$10 0)
(declare-sort utt$22 0)
(declare-sort utt$23 0)
(declare-sort utt$24 0)
(declare-sort utt$27 0)
(declare-sort utt$32 0)
(declare-fun Add_32_32_32 (utt$32 utt$32 ) utt$32)
(declare-fun Concat_10_9_1 (utt$9 Bool ) utt$10)
(declare-fun Concat_32_10_22 (utt$10 utt$22 ) utt$32)
(declare-fun Concat_32_5_27 (utt$5 utt$27 ) utt$32)
(declare-fun Concat_32_8_24 (utt$8 utt$24 ) utt$32)
(declare-fun Concat_32_9_23 (utt$9 utt$23 ) utt$32)
(declare-fun Extract_8_7_0_32 (utt$32 ) utt$8)
(declare-fun Extract_9_9_1_10 (utt$10 ) utt$9)
(declare-fun Le_1_32_32 (utt$32 utt$32 ) Bool)
(declare-fun y$100 () Bool)
(declare-fun y$103 () Bool)
(declare-fun y$106 () Bool)
(declare-fun y$109 () Bool)
(declare-fun y$171 () Bool)
(declare-fun y$177 () Bool)
(declare-fun y$179 () Bool)
(declare-fun y$182 () Bool)
(declare-fun y$190 () Bool)
(declare-fun y$191 () Bool)
(declare-fun y$194 () Bool)
(declare-fun y$195 () Bool)
(declare-fun y$198 () Bool)
(declare-fun y$199 () Bool)
(declare-fun y$200 () Bool)
(declare-fun y$201 () Bool)
(declare-fun y$202 () Bool)
(declare-fun y$203 () Bool)
(declare-fun y$204 () Bool)
(declare-fun y$209 () Bool)
(declare-fun y$210 () Bool)
(declare-fun y$211 () Bool)
(declare-fun y$212 () Bool)
(declare-fun y$23 () utt$8)
(declare-fun y$24 () utt$8)
(declare-fun y$27 () utt$8)
(declare-fun y$3 () utt$9)
(declare-fun y$33 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$38 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$43 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$58 () Bool)
(declare-fun y$61 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$73 () Bool)
(declare-fun y$76 () Bool)
(declare-fun y$79 () Bool)
(declare-fun y$82 () Bool)
(declare-fun y$85 () Bool)
(declare-fun y$88 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$91 () Bool)
(declare-fun y$94 () Bool)
(declare-fun y$97 () Bool)
(declare-fun y$addr () utt$5)
(declare-fun y$encoder.shiftreg () utt$10)
(declare-fun y$encoder.shiftreg$next () utt$10)
(declare-fun y$encoder.shiftreg$next_rhs () utt$10)
(declare-fun y$encoder.shiftreg$next_rhs_op () utt$10)
(declare-fun y$n0s1 () Bool)
(declare-fun y$n0s10 () utt$10)
(declare-fun y$n0s22 () utt$22)
(declare-fun y$n0s23 () utt$23)
(declare-fun y$n0s24 () utt$24)
(declare-fun y$n0s27 () utt$27)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n108s10 () utt$10)
(declare-fun y$n10s10 () utt$10)
(declare-fun y$n118s10 () utt$10)
(declare-fun y$n119s10 () utt$10)
(declare-fun y$n11s10 () utt$10)
(declare-fun y$n151s10 () utt$10)
(declare-fun y$n17s10 () utt$10)
(declare-fun y$n1s1 () Bool)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n20s10 () utt$10)
(declare-fun y$n215s10 () utt$10)
(declare-fun y$n21s10 () utt$10)
(declare-fun y$n25s10 () utt$10)
(declare-fun y$n268s10 () utt$10)
(declare-fun y$n26s32 () utt$32)
(declare-fun y$n29s10 () utt$10)
(declare-fun y$n30s10 () utt$10)
(declare-fun y$n31s10 () utt$10)
(declare-fun y$n32s10 () utt$10)
(declare-fun y$n32s32 () utt$32)
(declare-fun y$n32s8 () utt$8)
(declare-fun y$n332s10 () utt$10)
(declare-fun y$n38s10 () utt$10)
(declare-fun y$n39s10 () utt$10)
(declare-fun y$n40s10 () utt$10)
(declare-fun y$n460s10 () utt$10)
(declare-fun y$n48s10 () utt$10)
(declare-fun y$n56s10 () utt$10)
(declare-fun y$n60s10 () utt$10)
(declare-fun y$n652s10 () utt$10)
(declare-fun y$n65s32 () utt$32)
(declare-fun y$n66s32 () utt$32)
(declare-fun y$n67s32 () utt$32)
(declare-fun y$n68s32 () utt$32)
(declare-fun y$n69s32 () utt$32)
(declare-fun y$n70s32 () utt$32)
(declare-fun y$n71s32 () utt$32)
(declare-fun y$n72s32 () utt$32)
(declare-fun y$n73s32 () utt$32)
(declare-fun y$n74s32 () utt$32)
(declare-fun y$n75s32 () utt$32)
(declare-fun y$n76s32 () utt$32)
(declare-fun y$n77s32 () utt$32)
(declare-fun y$n78s32 () utt$32)
(declare-fun y$n79s32 () utt$32)
(declare-fun y$n80s32 () utt$32)
(declare-fun y$n81s32 () utt$32)
(declare-fun y$n82s32 () utt$32)
(declare-fun y$n83s32 () utt$32)
(declare-fun y$n84s32 () utt$32)
(declare-fun y$n85s32 () utt$32)
(declare-fun y$n86s10 () utt$10)
(declare-fun y$n86s32 () utt$32)
(declare-fun y$n87s32 () utt$32)
(declare-fun y$n88s32 () utt$32)
(declare-fun y$n89s32 () utt$32)
(declare-fun y$n908s10 () utt$10)
(declare-fun y$n90s32 () utt$32)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0$next () Bool)
(declare-fun y$prop0$next_op () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$s$1 () utt$32)
(declare-fun y$s$1_op () utt$32)
(declare-fun y$s$33 () Bool)
(declare-fun y$s$33_op () Bool)
(declare-fun y$s$34 () utt$10)
(declare-fun y$s$34_op () utt$10)
(declare-fun y$s$35 () utt$10)
(declare-fun y$s$35_op () utt$10)
(declare-fun y$s$36 () utt$10)
(declare-fun y$s$36_op () utt$10)
(declare-fun y$s$37 () utt$10)
(declare-fun y$s$37_op () utt$10)
(declare-fun y$s$38 () utt$10)
(declare-fun y$s$38_op () utt$10)
(declare-fun y$s$39 () utt$10)
(declare-fun y$s$39_op () utt$10)
(declare-fun y$s$40 () utt$10)
(declare-fun y$s$40_op () utt$10)
(declare-fun y$s$41 () utt$10)
(declare-fun y$s$41_op () utt$10)
(declare-fun y$s$42 () utt$10)
(declare-fun y$s$42_op () utt$10)
(declare-fun y$s$43 () utt$10)
(declare-fun y$s$43_op () utt$10)
(declare-fun y$s$44 () utt$10)
(declare-fun y$s$44_op () utt$10)
(declare-fun y$s$45 () utt$10)
(declare-fun y$s$45_op () utt$10)
(declare-fun y$s$46 () utt$10)
(declare-fun y$s$46_op () utt$10)
(declare-fun y$s$47 () utt$10)
(declare-fun y$s$47_op () utt$10)
(declare-fun y$s$48 () utt$10)
(declare-fun y$s$48_op () utt$10)
(declare-fun y$s$49 () utt$10)
(declare-fun y$s$49_op () utt$10)
(declare-fun y$s$50 () utt$10)
(declare-fun y$s$50_op () utt$10)
(declare-fun y$s$51 () utt$10)
(declare-fun y$s$51_op () utt$10)
(declare-fun y$s$52 () utt$10)
(declare-fun y$s$52_op () utt$10)
(declare-fun y$s$53 () utt$10)
(declare-fun y$s$53_op () utt$10)
(declare-fun y$s$54 () utt$10)
(declare-fun y$s$54_op () utt$10)
(declare-fun y$s$55 () utt$10)
(declare-fun y$s$55_op () utt$10)
(declare-fun y$s$56 () utt$10)
(declare-fun y$s$56_op () utt$10)
(declare-fun y$s$57 () utt$10)
(declare-fun y$s$57_op () utt$10)
(declare-fun y$s$58 () utt$10)
(declare-fun y$s$58_op () utt$10)
(declare-fun y$s$59 () utt$10)
(declare-fun y$s$59_op () utt$10)
(declare-fun y$s$60 () utt$10)
(declare-fun y$s$60_op () utt$10)
(declare-fun y$s$61 () utt$32)
(declare-fun y$s$61_op () utt$32)
(declare-fun y$w$1 () utt$8)
(declare-fun y$w$2 () utt$32)
(declare-fun y$w$2_op () utt$32)
(declare-fun y$w$3 () utt$32)
(declare-fun y$w$3$next () utt$32)
(declare-fun y$w$3$next_op () utt$32)
(declare-fun y$w$3_op () utt$32)
(declare-fun y$w$4 () utt$9)
(declare-fun y$w$5 () utt$32)
(declare-fun y$w$5_op () utt$32)
(declare-fun y$w$6 () utt$32)
(declare-fun y$w$6_op () utt$32)
(declare-fun y$w$7 () utt$10)
(declare-fun y$w$7_op () utt$10)
(assert (distinct y$n10s10 y$n11s10 y$n20s10 y$n30s10 y$n17s10 y$n25s10 y$n21s10 y$n29s10 y$n31s10 y$n32s10 y$n48s10 y$n40s10 y$n56s10 y$n60s10 y$n38s10 y$n39s10 y$n108s10 y$n86s10 y$n118s10 y$n119s10 y$n151s10 y$n215s10 y$n268s10 y$n332s10 y$n460s10 y$n652s10 y$n908s10 y$n0s10))
(assert (distinct y$n1s32 y$n26s32 y$n65s32 y$n32s32 y$n69s32 y$n83s32 y$n73s32 y$n79s32 y$n82s32 y$n78s32 y$n84s32 y$n85s32 y$n80s32 y$n70s32 y$n67s32 y$n76s32 y$n72s32 y$n68s32 y$n87s32 y$n71s32 y$n89s32 y$n77s32 y$n66s32 y$n86s32 y$n81s32 y$n75s32 y$n88s32 y$n90s32 y$n74s32 y$n0s32))
(assert (= y$w$3_op (Concat_32_10_22 y$encoder.shiftreg y$n0s22)))
(assert (= y$177 (= y$n0s32 y$w$3_op)))
(assert (= (not (= y$n0s32 y$w$3_op)) y$179))
(assert (= y$prop0_op (or y$177 y$179)))
(assert (= y$182 (= y$prop y$prop0_op)))
(assert (= y$3 (Extract_9_9_1_10 y$encoder.shiftreg)))
(assert (= y$w$5_op (Concat_32_9_23 y$3 y$n0s23)))
(assert (= y$9 (= y$n1s32 y$w$5_op)))
(assert (= y$w$6_op (Concat_32_5_27 y$addr y$n0s27)))
(assert (= y$s$33_op (Le_1_32_32 y$w$6_op y$n26s32)))
(assert (= y$s$1_op (Add_32_32_32 y$n65s32 y$w$6_op)))
(assert (= y$s$61_op (ite y$s$33_op y$s$1_op y$n32s32)))
(assert (= y$24 (Extract_8_7_0_32 y$s$1_op)))
(assert (= y$27 (ite y$s$33_op y$24 y$n32s8)))
(assert (= y$23 (Extract_8_7_0_32 y$s$61_op)))
(assert (= y$27 y$23))
(assert (= y$w$2_op (Concat_32_8_24 y$23 y$n0s24)))
(assert (= y$33 (= y$n69s32 y$w$2_op)))
(assert (= y$35 (= y$n32s32 y$w$2_op)))
(assert (= y$38 (= y$n83s32 y$w$2_op)))
(assert (= y$40 (= y$n65s32 y$w$2_op)))
(assert (= y$43 (= y$n73s32 y$w$2_op)))
(assert (= y$46 (= y$n79s32 y$w$2_op)))
(assert (= y$49 (= y$n82s32 y$w$2_op)))
(assert (= y$52 (= y$n78s32 y$w$2_op)))
(assert (= y$55 (= y$n84s32 y$w$2_op)))
(assert (= y$58 (= y$n85s32 y$w$2_op)))
(assert (= y$61 (= y$n80s32 y$w$2_op)))
(assert (= y$64 (= y$n70s32 y$w$2_op)))
(assert (= y$67 (= y$n67s32 y$w$2_op)))
(assert (= y$70 (= y$n76s32 y$w$2_op)))
(assert (= y$73 (= y$n72s32 y$w$2_op)))
(assert (= y$76 (= y$n68s32 y$w$2_op)))
(assert (= y$79 (= y$n87s32 y$w$2_op)))
(assert (= y$82 (= y$n71s32 y$w$2_op)))
(assert (= y$85 (= y$n89s32 y$w$2_op)))
(assert (= y$88 (= y$n77s32 y$w$2_op)))
(assert (= y$91 (= y$n66s32 y$w$2_op)))
(assert (= y$94 (= y$n86s32 y$w$2_op)))
(assert (= y$97 (= y$n81s32 y$w$2_op)))
(assert (= y$100 (= y$n75s32 y$w$2_op)))
(assert (= y$103 (= y$n88s32 y$w$2_op)))
(assert (= y$106 (= y$n90s32 y$w$2_op)))
(assert (= y$109 (= y$n74s32 y$w$2_op)))
(assert (= y$s$34_op (ite y$109 y$n908s10 y$n0s10)))
(assert (= y$s$35_op (ite y$106 y$n652s10 y$s$34_op)))
(assert (= y$s$36_op (ite y$103 y$n460s10 y$s$35_op)))
(assert (= y$s$37_op (ite y$100 y$n332s10 y$s$36_op)))
(assert (= y$s$38_op (ite y$97 y$n268s10 y$s$37_op)))
(assert (= y$s$39_op (ite y$94 y$n215s10 y$s$38_op)))
(assert (= y$s$40_op (ite y$91 y$n151s10 y$s$39_op)))
(assert (= y$s$41_op (ite y$88 y$n119s10 y$s$40_op)))
(assert (= y$s$42_op (ite y$85 y$n118s10 y$s$41_op)))
(assert (= y$s$43_op (ite y$82 y$n86s10 y$s$42_op)))
(assert (= y$s$44_op (ite y$79 y$n108s10 y$s$43_op)))
(assert (= y$s$45_op (ite y$76 y$n39s10 y$s$44_op)))
(assert (= y$s$46_op (ite y$73 y$n38s10 y$s$45_op)))
(assert (= y$s$47_op (ite y$70 y$n60s10 y$s$46_op)))
(assert (= y$s$48_op (ite y$67 y$n56s10 y$s$47_op)))
(assert (= y$s$49_op (ite y$64 y$n40s10 y$s$48_op)))
(assert (= y$s$50_op (ite y$61 y$n48s10 y$s$49_op)))
(assert (= y$s$51_op (ite y$58 y$n32s10 y$s$50_op)))
(assert (= y$s$52_op (ite y$55 y$n31s10 y$s$51_op)))
(assert (= y$s$53_op (ite y$52 y$n29s10 y$s$52_op)))
(assert (= y$s$54_op (ite y$49 y$n21s10 y$s$53_op)))
(assert (= y$s$55_op (ite y$46 y$n25s10 y$s$54_op)))
(assert (= y$s$56_op (ite y$43 y$n17s10 y$s$55_op)))
(assert (= y$s$57_op (ite y$40 y$n30s10 y$s$56_op)))
(assert (= y$s$58_op (ite y$38 y$n20s10 y$s$57_op)))
(assert (= y$s$59_op (ite y$35 y$n11s10 y$s$58_op)))
(assert (= y$s$60_op (ite y$33 y$n10s10 y$s$59_op)))
(assert (= y$w$7_op (Concat_10_9_1 y$3 false)))
(assert (= y$encoder.shiftreg$next_rhs_op (ite y$9 y$s$60_op y$w$7_op)))
(assert (= y$171 (= y$encoder.shiftreg$next y$encoder.shiftreg$next_rhs_op)))
(assert (= y$prop$next (not y$191)))
(assert (= y$212 (and y$prop y$182 y$171 y$191)))
(assert y$212)
(check-sat)
(exit)
