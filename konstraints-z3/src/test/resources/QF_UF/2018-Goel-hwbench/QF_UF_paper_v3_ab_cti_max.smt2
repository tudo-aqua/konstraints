(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: paper_v3
query-maker: "Yices 2"
query-time: 0.237000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$8 0)
(declare-fun Add_8_8_8 (utt$8 utt$8 ) utt$8)
(declare-fun Gr_1_8_8 (utt$8 utt$8 ) Bool)
(declare-fun y$11 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$32 () Bool)
(declare-fun y$34 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$42 () Bool)
(declare-fun y$43 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$54 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$66 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$68 () Bool)
(declare-fun y$85 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$87 () Bool)
(declare-fun y$88 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$93 () Bool)
(declare-fun y$94 () Bool)
(declare-fun y$95 () Bool)
(declare-fun y$96 () Bool)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n255s8 () utt$8)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$s$10 () Bool)
(declare-fun y$s$10_op () Bool)
(declare-fun y$s$13 () utt$8)
(declare-fun y$s$13_op () utt$8)
(declare-fun y$s$14 () utt$8)
(declare-fun y$s$14_op () utt$8)
(declare-fun y$s$2 () utt$8)
(declare-fun y$s$2_op () utt$8)
(declare-fun y$s$3 () utt$8)
(declare-fun y$s$3_op () utt$8)
(declare-fun y$s$8 () Bool)
(declare-fun y$s$8$next () Bool)
(declare-fun y$s$8$next_op () Bool)
(declare-fun y$s$8_op () Bool)
(declare-fun y$s$9 () Bool)
(declare-fun y$s$9_op () Bool)
(declare-fun y$x () utt$8)
(declare-fun y$x$next () utt$8)
(declare-fun y$x$next_rhs () utt$8)
(declare-fun y$x$next_rhs_op () utt$8)
(declare-fun y$y () utt$8)
(declare-fun y$y$next () utt$8)
(declare-fun y$y$next_rhs () utt$8)
(declare-fun y$y$next_rhs_op () utt$8)
(assert (distinct y$n0s8 y$n255s8 y$n1s8))
(assert (= y$s$8_op (Gr_1_8_8 y$y y$x)))
(assert (= y$s$8_op (not y$34)))
(assert (= y$35 (= y$prop y$34)))
(assert (= y$9 (= y$x y$y)))
(assert (= y$11 (not (= y$n255s8 y$x))))
(assert (= y$s$9_op (or y$9 y$11)))
(assert (= y$s$2_op (Add_8_8_8 y$x y$n1s8)))
(assert (= y$s$13_op (ite y$s$9_op y$s$2_op y$y)))
(assert (= y$x$next_rhs_op (ite y$s$8_op y$x y$s$13_op)))
(assert (= y$21 (= y$x$next y$x$next_rhs_op)))
(assert (= y$s$3_op (Add_8_8_8 y$y y$n1s8)))
(assert (= y$s$10_op (or y$s$8_op y$11)))
(assert (= y$s$14_op (ite y$s$10_op y$y y$x)))
(assert (= y$y$next_rhs_op (ite y$9 y$s$3_op y$s$14_op)))
(assert (= y$31 (= y$y$next y$y$next_rhs_op)))
(assert (= y$32 (and y$21 y$31)))
(assert (= y$s$8$next_op (Gr_1_8_8 y$y$next y$x$next)))
(assert (= y$s$8$next_op (not y$46)))
(assert (= y$47 (= y$prop$next y$46)))
(assert (= y$prop$next (not y$43)))
(assert (= y$52 (= y$n0s8 y$y$next)))
(assert (= y$53 (and y$s$8$next_op y$52)))
(assert (= y$53 (not y$55)))
(assert (= y$4 (= y$n0s8 y$y)))
(assert (= y$51 (and y$4 y$s$8_op)))
(assert (= y$51 (not y$54)))
(assert (= y$86 (and y$s$8_op y$9)))
(assert (= y$86 (not y$88)))
(assert (= y$68 (= y$y$next y$x$next)))
(assert (= y$85 (and y$s$8$next_op y$68)))
(assert (= y$85 (not y$87)))
(assert (= y$94 (and y$prop y$35 y$55 y$54 y$32 y$47 y$43 y$88 y$87)))
(assert y$94)
(assert (distinct y$n0s8 y$n255s8 y$n1s8))
(check-sat)
(exit)
