(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: diagonal_v
query-maker: "Yices 2"
query-time: 0.590000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$4 0)
(declare-fun Add_4_4_4 (utt$4 utt$4 ) utt$4)
(declare-fun Gr_1_4_4 (utt$4 utt$4 ) Bool)
(declare-fun Le_1_4_4 (utt$4 utt$4 ) Bool)
(declare-fun ShiftR_4_4_4 (utt$4 utt$4 ) utt$4)
(declare-fun y$103 () Bool)
(declare-fun y$106 () Bool)
(declare-fun y$113 () Bool)
(declare-fun y$126 () Bool)
(declare-fun y$127 () Bool)
(declare-fun y$128 () Bool)
(declare-fun y$129 () Bool)
(declare-fun y$135 () Bool)
(declare-fun y$14 () Bool)
(declare-fun y$142 () Bool)
(declare-fun y$143 () Bool)
(declare-fun y$144 () Bool)
(declare-fun y$145 () Bool)
(declare-fun y$154 () Bool)
(declare-fun y$155 () Bool)
(declare-fun y$156 () Bool)
(declare-fun y$16 () Bool)
(declare-fun y$161 () Bool)
(declare-fun y$162 () Bool)
(declare-fun y$163 () Bool)
(declare-fun y$164 () Bool)
(declare-fun y$165 () Bool)
(declare-fun y$166 () Bool)
(declare-fun y$182 () Bool)
(declare-fun y$183 () Bool)
(declare-fun y$184 () Bool)
(declare-fun y$185 () Bool)
(declare-fun y$189 () Bool)
(declare-fun y$193 () Bool)
(declare-fun y$194 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$203 () Bool)
(declare-fun y$204 () Bool)
(declare-fun y$205 () Bool)
(declare-fun y$206 () Bool)
(declare-fun y$207 () Bool)
(declare-fun y$212 () Bool)
(declare-fun y$216 () Bool)
(declare-fun y$218 () Bool)
(declare-fun y$231 () Bool)
(declare-fun y$233 () Bool)
(declare-fun y$244 () Bool)
(declare-fun y$245 () Bool)
(declare-fun y$246 () Bool)
(declare-fun y$247 () Bool)
(declare-fun y$248 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$255 () Bool)
(declare-fun y$260 () Bool)
(declare-fun y$261 () Bool)
(declare-fun y$267 () Bool)
(declare-fun y$268 () Bool)
(declare-fun y$269 () Bool)
(declare-fun y$270 () Bool)
(declare-fun y$275 () Bool)
(declare-fun y$276 () Bool)
(declare-fun y$286 () Bool)
(declare-fun y$287 () Bool)
(declare-fun y$290 () Bool)
(declare-fun y$291 () Bool)
(declare-fun y$35 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$58 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$62 () Bool)
(declare-fun y$63 () Bool)
(declare-fun y$64 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$68 () Bool)
(declare-fun y$69 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$71 () Bool)
(declare-fun y$72 () Bool)
(declare-fun y$82 () Bool)
(declare-fun y$83 () Bool)
(declare-fun y$84 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$90 () Bool)
(declare-fun y$91 () Bool)
(declare-fun y$97 () Bool)
(declare-fun y$X () utt$4)
(declare-fun y$X$next () utt$4)
(declare-fun y$X$next_rhs () utt$4)
(declare-fun y$X$next_rhs_op () utt$4)
(declare-fun y$Y () utt$4)
(declare-fun y$Y$next () utt$4)
(declare-fun y$Y$next_rhs () utt$4)
(declare-fun y$Y$next_rhs_op () utt$4)
(declare-fun y$n0s4 () utt$4)
(declare-fun y$n14s4 () utt$4)
(declare-fun y$n15s4 () utt$4)
(declare-fun y$n1s4 () utt$4)
(declare-fun y$n7s4 () utt$4)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$reset () Bool)
(declare-fun y$reset$next () Bool)
(declare-fun y$s$14 () Bool)
(declare-fun y$s$14_op () Bool)
(declare-fun y$s$15 () Bool)
(declare-fun y$s$15_op () Bool)
(declare-fun y$s$17 () Bool)
(declare-fun y$s$17$next () Bool)
(declare-fun y$s$17$next_op () Bool)
(declare-fun y$s$17_op () Bool)
(declare-fun y$s$2 () utt$4)
(declare-fun y$s$2$next () utt$4)
(declare-fun y$s$2$next_op () utt$4)
(declare-fun y$s$20 () utt$4)
(declare-fun y$s$20_op () utt$4)
(declare-fun y$s$21 () utt$4)
(declare-fun y$s$21$next () utt$4)
(declare-fun y$s$21$next_op () utt$4)
(declare-fun y$s$21_op () utt$4)
(declare-fun y$s$22 () utt$4)
(declare-fun y$s$22_op () utt$4)
(declare-fun y$s$23 () utt$4)
(declare-fun y$s$23_op () utt$4)
(declare-fun y$s$24 () utt$4)
(declare-fun y$s$24_op () utt$4)
(declare-fun y$s$2_op () utt$4)
(declare-fun y$s$3 () utt$4)
(declare-fun y$s$3$next () utt$4)
(declare-fun y$s$3$next_op () utt$4)
(declare-fun y$s$3_op () utt$4)
(declare-fun y$s$4 () utt$4)
(declare-fun y$s$4$next () utt$4)
(declare-fun y$s$4$next_op () utt$4)
(declare-fun y$s$4_op () utt$4)
(declare-fun y$s$8 () Bool)
(declare-fun y$s$8$next () Bool)
(declare-fun y$s$8$next_op () Bool)
(declare-fun y$s$8_op () Bool)
(declare-fun y$s$9 () Bool)
(declare-fun y$s$9_op () Bool)
(assert (distinct y$n1s4 y$n0s4 y$n15s4 y$n14s4 y$n7s4))
(assert (= y$s$17_op (Le_1_4_4 y$X y$Y)))
(assert (= y$s$17_op (not y$49)))
(assert (= y$50 (= y$prop y$49)))
(assert (= y$reset (not y$9)))
(assert (= y$s$8_op (Gr_1_4_4 y$X y$Y)))
(assert (= y$s$9_op (and y$9 y$s$8_op)))
(assert (= y$s$8_op (not y$14)))
(assert (= y$16 (not (= y$n15s4 y$X))))
(assert (= y$s$15_op (or y$14 y$16)))
(assert (= y$s$4_op (Add_4_4_4 y$Y y$n1s4)))
(assert (= y$s$24_op (ite y$s$15_op y$s$4_op y$X)))
(assert (= y$Y$next_rhs_op (ite y$s$9_op y$Y y$s$24_op)))
(assert (= y$25 (= y$Y$next y$Y$next_rhs_op)))
(assert (= y$s$20_op (ShiftR_4_4_4 y$n15s4 y$n1s4)))
(assert (= y$s$21_op (ShiftR_4_4_4 y$X y$n1s4)))
(assert (= y$s$3_op (Add_4_4_4 y$s$20_op y$s$21_op)))
(assert (= y$35 (= y$X y$Y)))
(assert (= y$s$14_op (or y$16 y$35)))
(assert (= y$s$2_op (Add_4_4_4 y$X y$n1s4)))
(assert (= y$s$22_op (ite y$s$14_op y$s$2_op y$Y)))
(assert (= y$s$23_op (ite y$s$17_op y$X y$s$22_op)))
(assert (= y$X$next_rhs_op (ite y$s$9_op y$s$3_op y$s$23_op)))
(assert (= y$46 (= y$X$next y$X$next_rhs_op)))
(assert (= y$47 (and y$25 y$46)))
(assert (= y$s$17$next_op (Le_1_4_4 y$X$next y$Y$next)))
(assert (= y$s$17$next_op (not y$62)))
(assert (= y$63 (= y$prop$next y$62)))
(assert (= y$prop$next (not y$59)))
(assert (= y$68 (= y$n0s4 y$Y$next)))
(assert (= y$69 (and y$s$17$next_op y$68)))
(assert (= y$69 (not y$71)))
(assert (= y$5 (= y$n0s4 y$Y)))
(assert (= y$67 (and y$5 y$s$17_op)))
(assert (= y$67 (not y$70)))
(assert (= y$106 (= y$n1s4 y$X$next)))
(assert (= y$s$8$next_op (Gr_1_4_4 y$X$next y$Y$next)))
(assert (= y$s$8$next_op (not y$103)))
(assert (= y$127 (and y$68 y$106 y$103)))
(assert (= y$127 (not y$129)))
(assert (= y$2 (= y$n1s4 y$X)))
(assert (= y$s$8_op (not y$84)))
(assert (= y$126 (and y$2 y$5 y$84)))
(assert (= y$126 (not y$128)))
(assert (= y$s$4$next_op (Add_4_4_4 y$Y$next y$n1s4)))
(assert (= y$113 (not (= y$n1s4 y$s$4$next_op))))
(assert (= y$143 (and y$68 y$113)))
(assert (= y$143 (not y$145)))
(assert (= y$97 (not (= y$n1s4 y$s$4_op))))
(assert (= y$142 (and y$5 y$97)))
(assert (= y$142 (not y$144)))
(assert (= y$162 (= y$X y$s$4_op)))
(assert (= y$163 (= y$n1s4 y$Y)))
(assert (= y$164 (and y$s$17_op y$162 y$163)))
(assert (= y$164 (not y$166)))
(assert (= y$156 (= y$X$next y$s$4$next_op)))
(assert (= y$155 (= y$n1s4 y$Y$next)))
(assert (= y$161 (and y$s$17$next_op y$156 y$155)))
(assert (= y$161 (not y$165)))
(assert (= y$183 (and y$prop y$50 y$71 y$70 y$47 y$63 y$59 y$129 y$128 y$145 y$144 y$166 y$165)))
(assert y$183)
(assert (distinct y$n1s4 y$n0s4 y$n15s4 y$n14s4 y$n7s4))
(assert (= y$106 (= y$n1s4 y$X$next)))
(assert (= y$s$2$next_op (Add_4_4_4 y$X$next y$n1s4)))
(assert (= y$194 (= y$n15s4 y$s$2$next_op)))
(assert (= y$204 (and y$106 y$194)))
(assert (= y$204 (not y$206)))
(assert y$206)
(assert (= y$2 (= y$n1s4 y$X)))
(assert (= y$s$2_op (Add_4_4_4 y$X y$n1s4)))
(assert (= y$193 (= y$n15s4 y$s$2_op)))
(assert (= y$203 (and y$2 y$193)))
(assert (= y$203 (not y$205)))
(assert y$205)
(assert (distinct y$n1s4 y$n0s4 y$n15s4 y$n14s4 y$n7s4))
(assert (= y$106 (= y$n1s4 y$X$next)))
(assert (= y$68 (= y$n0s4 y$Y$next)))
(assert (= y$s$21$next_op (ShiftR_4_4_4 y$X$next y$n1s4)))
(assert (= y$233 (not (= y$Y$next y$s$21$next_op))))
(assert (= y$245 (and y$68 y$106 y$233)))
(assert (= y$245 (not y$247)))
(assert y$247)
(assert (= y$2 (= y$n1s4 y$X)))
(assert (= y$5 (= y$n0s4 y$Y)))
(assert (= y$s$21_op (ShiftR_4_4_4 y$X y$n1s4)))
(assert (= y$218 (not (= y$Y y$s$21_op))))
(assert (= y$244 (and y$2 y$5 y$218)))
(assert (= y$244 (not y$246)))
(assert y$246)
(assert (distinct y$n1s4 y$n0s4 y$n15s4 y$n14s4 y$n7s4))
(assert (= y$5 (= y$n0s4 y$Y)))
(assert (= y$s$20_op (ShiftR_4_4_4 y$n15s4 y$n1s4)))
(assert (= y$260 (= y$Y y$s$20_op)))
(assert (= y$267 (and y$5 y$260)))
(assert (= y$267 (not y$269)))
(assert y$269)
(assert (= y$68 (= y$n0s4 y$Y$next)))
(assert (= y$s$20_op (ShiftR_4_4_4 y$n15s4 y$n1s4)))
(assert (= y$261 (= y$Y$next y$s$20_op)))
(assert (= y$268 (and y$68 y$261)))
(assert (= y$268 (not y$275)))
(assert y$275)
(assert (distinct y$n1s4 y$n0s4 y$n15s4 y$n14s4 y$n7s4))
(assert (= y$s$20_op (ShiftR_4_4_4 y$n15s4 y$n1s4)))
(assert (= y$s$21_op (ShiftR_4_4_4 y$X y$n1s4)))
(assert (= y$s$3_op (Add_4_4_4 y$s$20_op y$s$21_op)))
(assert (= (not (= y$n15s4 y$s$3_op)) y$286))
(assert y$286)
(assert (= y$s$20_op (ShiftR_4_4_4 y$n15s4 y$n1s4)))
(assert (= y$s$21$next_op (ShiftR_4_4_4 y$X$next y$n1s4)))
(assert (= y$s$3$next_op (Add_4_4_4 y$s$20_op y$s$21$next_op)))
(assert (= (not (= y$n15s4 y$s$3$next_op)) y$290))
(assert y$290)
(assert (distinct y$n1s4 y$n0s4 y$n15s4 y$n14s4 y$n7s4))
(check-sat)
(exit)
