(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: driving_phils.1.prop1
query-maker: "Yices 2"
query-time: 0.191000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$8 0)
(declare-sort utt$16 0)
(declare-sort utt$32 0)
(declare-fun BitWiseNot_32_32 (utt$32 ) utt$32)
(declare-fun Concat_32_16_16 (utt$16 utt$16 ) utt$32)
(declare-fun Extract_1_15_15_16 (utt$16 ) Bool)
(declare-fun ShiftR_32_32_32 (utt$32 utt$32 ) utt$32)
(declare-fun y$1 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$144 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$1940 () Bool)
(declare-fun y$1943 () Bool)
(declare-fun y$1946 () Bool)
(declare-fun y$1949 () Bool)
(declare-fun y$1950 () Bool)
(declare-fun y$1993 () Bool)
(declare-fun y$2047 () Bool)
(declare-fun y$2073 () Bool)
(declare-fun y$2077 () Bool)
(declare-fun y$2078 () Bool)
(declare-fun y$2079 () Bool)
(declare-fun y$2080 () Bool)
(declare-fun y$2081 () Bool)
(declare-fun y$2082 () Bool)
(declare-fun y$2096 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$27 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$31 () Bool)
(declare-fun y$34 () Bool)
(declare-fun y$36 () Bool)
(declare-fun y$38 () Bool)
(declare-fun y$41 () Bool)
(declare-fun y$43 () Bool)
(declare-fun y$45 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$57 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$61 () Bool)
(declare-fun y$66 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$96 () Bool)
(declare-fun y$a_action_phil_0 () Bool)
(declare-fun y$a_action_phil_1 () Bool)
(declare-fun y$a_action_round_about () Bool)
(declare-fun y$a_begin0 () Bool)
(declare-fun y$a_begin1 () Bool)
(declare-fun y$a_begin2 () Bool)
(declare-fun y$a_begin3 () Bool)
(declare-fun y$a_end0 () Bool)
(declare-fun y$a_end1 () Bool)
(declare-fun y$a_end2 () Bool)
(declare-fun y$a_end_phil_0 () Bool)
(declare-fun y$a_end_phil_1 () Bool)
(declare-fun y$a_mutex_phil_0 () Bool)
(declare-fun y$a_mutex_phil_1 () Bool)
(declare-fun y$a_reset () Bool)
(declare-fun y$dve_invalid () Bool)
(declare-fun y$id47 () Bool)
(declare-fun y$id47_op () Bool)
(declare-fun y$n0s16 () utt$16)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n0s8 () utt$8)
(declare-fun y$n16s32 () utt$32)
(declare-fun y$n1s16 () utt$16)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n1s8 () utt$8)
(declare-fun y$n2s32 () utt$32)
(declare-fun y$n2s8 () utt$8)
(declare-fun y$n4294967295s32 () utt$32)
(declare-fun y$n65535s16 () utt$16)
(declare-fun y$prop () Bool)
(declare-fun y$s$4 () utt$32)
(declare-fun y$s$4_op () utt$32)
(declare-fun y$s$5 () utt$32)
(declare-fun y$s$5_op () utt$32)
(declare-fun y$s$6 () utt$32)
(declare-fun y$s$6_op () utt$32)
(declare-fun y$s$7 () utt$32)
(declare-fun y$s$7_op () utt$32)
(declare-fun y$s$8 () utt$32)
(declare-fun y$s$8_op () utt$32)
(declare-fun y$s$9 () utt$32)
(declare-fun y$s$9_op () utt$32)
(declare-fun y$v3_1517448494_38 () utt$32)
(declare-fun y$v3_1517448494_38_op () utt$32)
(declare-fun y$v3_1517448494_39 () utt$32)
(declare-fun y$v3_1517448494_39_op () utt$32)
(declare-fun y$v3_1517448494_40 () utt$32)
(declare-fun y$v3_1517448494_40_op () utt$32)
(declare-fun y$v3_1517448494_43 () utt$32)
(declare-fun y$v3_1517448494_43_op () utt$32)
(declare-fun y$v3_1517448494_44 () utt$32)
(declare-fun y$v3_1517448494_44$next () utt$32)
(declare-fun y$v3_1517448494_44$next_op () utt$32)
(declare-fun y$v3_1517448494_44_op () utt$32)
(declare-fun y$v3_1517448494_45 () utt$32)
(declare-fun y$v3_1517448494_45_op () utt$32)
(declare-fun y$v3_1517448494_49 () utt$32)
(declare-fun y$v3_1517448494_49_op () utt$32)
(declare-fun y$v3_1517448494_50 () utt$32)
(declare-fun y$v3_1517448494_50_op () utt$32)
(declare-fun y$v3_1517448494_51 () utt$32)
(declare-fun y$v3_1517448494_51_op () utt$32)
(declare-fun y$v3_1517448494_55 () Bool)
(declare-fun y$v3_1517448494_55_op () Bool)
(declare-fun y$v_acquiring_0 () utt$16)
(declare-fun y$v_acquiring_1 () utt$16)
(declare-fun y$v_entryRound () utt$16)
(declare-fun y$v_fire () utt$8)
(declare-fun y$v_i_phil_0 () utt$16)
(declare-fun y$v_i_phil_1 () utt$16)
(declare-fun y$v_i_round_about () utt$16)
(declare-fun y$v_phase () utt$8)
(declare-fun y$v_res0_0 () utt$16)
(declare-fun y$v_res0_1 () utt$16)
(declare-fun y$v_res0_1$next () utt$16)
(declare-fun y$v_res1_0 () utt$16)
(declare-fun y$v_res1_1 () utt$16)
(declare-fun y$v_resources_0 () utt$8)
(declare-fun y$v_resources_1 () utt$8)
(declare-fun y$w$18 () Bool)
(declare-fun y$w$19 () utt$32)
(declare-fun y$w$19_op () utt$32)
(declare-fun y$w$20 () Bool)
(declare-fun y$w$21 () utt$32)
(declare-fun y$w$21$next () utt$32)
(declare-fun y$w$21$next_op () utt$32)
(declare-fun y$w$21_op () utt$32)
(declare-fun y$w$22 () Bool)
(declare-fun y$w$23 () utt$32)
(declare-fun y$w$23_op () utt$32)
(assert (distinct y$n0s8 y$n2s8 y$n1s8))
(assert (distinct y$n0s16 y$n1s16 y$n65535s16))
(assert (distinct y$n0s32 y$n16s32 y$n1s32 y$n2s32 y$n4294967295s32))
(assert (= y$a_action_phil_0 (not y$1)))
(assert (= y$a_action_phil_1 (not y$3)))
(assert (= y$a_action_round_about (not y$5)))
(assert (= y$a_begin0 (not y$7)))
(assert (= y$a_begin1 (not y$9)))
(assert (= y$a_begin2 (not y$11)))
(assert (= y$a_begin3 (not y$13)))
(assert (= y$a_end0 (not y$15)))
(assert (= y$a_end1 (not y$17)))
(assert (= y$a_end2 (not y$19)))
(assert (= y$a_end_phil_0 (not y$21)))
(assert (= y$a_end_phil_1 (not y$23)))
(assert (= y$a_mutex_phil_0 (not y$25)))
(assert (= y$a_mutex_phil_1 (not y$27)))
(assert (= y$a_reset (not y$29)))
(assert (= y$dve_invalid (not y$31)))
(assert (= y$34 (= y$n0s16 y$v_acquiring_0)))
(assert (= y$36 (= y$n0s16 y$v_acquiring_1)))
(assert (= y$38 (= y$n0s16 y$v_entryRound)))
(assert (= y$41 (= y$n0s8 y$v_fire)))
(assert (= y$43 (= y$n0s16 y$v_i_phil_0)))
(assert (= y$45 (= y$n0s16 y$v_i_phil_1)))
(assert (= y$47 (= y$n0s16 y$v_i_round_about)))
(assert (= y$49 (= y$n0s8 y$v_phase)))
(assert (= y$51 (= y$n0s16 y$v_res0_0)))
(assert (= y$53 (= y$n0s16 y$v_res0_1)))
(assert (= y$55 (= y$n0s16 y$v_res1_0)))
(assert (= y$57 (= y$n0s16 y$v_res1_1)))
(assert (= y$59 (= y$n0s8 y$v_resources_0)))
(assert (= y$61 (= y$n0s8 y$v_resources_1)))
(assert (= y$prop (not y$1993)))
(assert (= y$66 (Extract_1_15_15_16 y$v_res0_1)))
(assert (= y$w$21_op (Concat_32_16_16 y$n0s16 y$v_res0_1)))
(assert (= y$s$7_op (BitWiseNot_32_32 y$w$21_op)))
(assert (= y$v3_1517448494_45_op (ShiftR_32_32_32 y$s$7_op y$n16s32)))
(assert (= y$s$6_op (BitWiseNot_32_32 y$v3_1517448494_45_op)))
(assert (= y$v3_1517448494_44_op (ShiftR_32_32_32 y$w$21_op y$n16s32)))
(assert (= y$v3_1517448494_43_op (ite y$66 y$s$6_op y$v3_1517448494_44_op)))
(assert (= y$96 (Extract_1_15_15_16 y$v_res0_0)))
(assert (= y$w$19_op (Concat_32_16_16 y$n0s16 y$v_res0_0)))
(assert (= y$s$5_op (BitWiseNot_32_32 y$w$19_op)))
(assert (= y$v3_1517448494_40_op (ShiftR_32_32_32 y$s$5_op y$n16s32)))
(assert (= y$s$4_op (BitWiseNot_32_32 y$v3_1517448494_40_op)))
(assert (= y$v3_1517448494_39_op (ShiftR_32_32_32 y$w$19_op y$n16s32)))
(assert (= y$v3_1517448494_38_op (ite y$96 y$s$4_op y$v3_1517448494_39_op)))
(assert (= y$1940 (not (= y$v3_1517448494_43_op y$v3_1517448494_38_op))))
(assert (= y$144 (Extract_1_15_15_16 y$v_res1_1)))
(assert (= y$w$23_op (Concat_32_16_16 y$n0s16 y$v_res1_1)))
(assert (= y$s$9_op (BitWiseNot_32_32 y$w$23_op)))
(assert (= y$v3_1517448494_51_op (ShiftR_32_32_32 y$s$9_op y$n16s32)))
(assert (= y$s$8_op (BitWiseNot_32_32 y$v3_1517448494_51_op)))
(assert (= y$v3_1517448494_50_op (ShiftR_32_32_32 y$w$23_op y$n16s32)))
(assert (= y$v3_1517448494_49_op (ite y$144 y$s$8_op y$v3_1517448494_50_op)))
(assert (= y$1943 (not (= y$v3_1517448494_38_op y$v3_1517448494_49_op))))
(assert (= y$v3_1517448494_55_op (and y$1940 y$1943)))
(assert (= y$v3_1517448494_55_op (not y$1946)))
(assert (= y$id47_op (and y$31 y$1946)))
(assert (= y$id47_op (not y$1949)))
(assert (= y$1950 (= y$prop y$1949)))
(assert (= y$2078 (= y$n0s16 y$v_res0_1$next)))
(assert (= y$w$21$next_op (Concat_32_16_16 y$n0s16 y$v_res0_1$next)))
(assert (= y$v3_1517448494_44$next_op (ShiftR_32_32_32 y$w$21$next_op y$n16s32)))
(assert (= y$2079 (not (= y$w$21$next_op y$v3_1517448494_44$next_op))))
(assert (= y$2080 (and y$2078 y$2079)))
(assert (= y$2080 (not y$2082)))
(assert (= y$2073 (not (= y$w$21_op y$v3_1517448494_44_op))))
(assert (= y$2077 (and y$53 y$2073)))
(assert (= y$2077 (not y$2081)))
(assert (= y$2096 (and y$1 y$3 y$5 y$7 y$9 y$11 y$13 y$15 y$17 y$19 y$21 y$23 y$25 y$27 y$29 y$31 y$34 y$36 y$38 y$41 y$43 y$45 y$47 y$49 y$51 y$53 y$55 y$57 y$59 y$61 y$1993 y$1950 y$2082 y$2081)))
(assert y$2096)
(check-sat)
(exit)
