(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: synabs
query-maker: "Yices 2"
query-time: 0.017000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$5 0)
(declare-fun Add_5_5_5 (utt$5 utt$5 ) utt$5)
(declare-fun y$11 () Bool)
(declare-fun y$12 () Bool)
(declare-fun y$14 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$25 () Bool)
(declare-fun y$27 () Bool)
(declare-fun y$32 () Bool)
(declare-fun y$33 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$38 () Bool)
(declare-fun y$45 () Bool)
(declare-fun y$46 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$48 () Bool)
(declare-fun y$49 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$50 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$57 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$68 () Bool)
(declare-fun y$69 () Bool)
(declare-fun y$70 () Bool)
(declare-fun y$71 () Bool)
(declare-fun y$72 () Bool)
(declare-fun y$73 () Bool)
(declare-fun y$74 () Bool)
(declare-fun y$79 () Bool)
(declare-fun y$8 () Bool)
(declare-fun y$80 () Bool)
(declare-fun y$81 () Bool)
(declare-fun y$82 () Bool)
(declare-fun y$84 () Bool)
(declare-fun y$85 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$87 () Bool)
(declare-fun y$88 () Bool)
(declare-fun y$89 () Bool)
(declare-fun y$90 () Bool)
(declare-fun y$91 () Bool)
(declare-fun y$92 () Bool)
(declare-fun y$93 () Bool)
(declare-fun y$a () utt$5)
(declare-fun y$a$next () utt$5)
(declare-fun y$a$next_rhs () utt$5)
(declare-fun y$a$next_rhs_op () utt$5)
(declare-fun y$b () utt$5)
(declare-fun y$b$next () utt$5)
(declare-fun y$c () utt$5)
(declare-fun y$c$next () utt$5)
(declare-fun y$n11s5 () utt$5)
(declare-fun y$n1s5 () utt$5)
(declare-fun y$n2s5 () utt$5)
(declare-fun y$n3s5 () utt$5)
(declare-fun y$n5s5 () utt$5)
(declare-fun y$n7s5 () utt$5)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$s$6 () utt$5)
(declare-fun y$s$6_op () utt$5)
(declare-fun y$s$7 () utt$5)
(declare-fun y$s$7_op () utt$5)
(declare-fun y$t () utt$5)
(declare-fun y$t$next () utt$5)
(declare-fun y$t$next_rhs () utt$5)
(declare-fun y$t$next_rhs_op () utt$5)
(assert (distinct y$n1s5 y$n5s5 y$n7s5 y$n11s5 y$n3s5 y$n2s5))
(assert (= y$37 (not (= y$n2s5 y$a))))
(assert (= y$38 (= y$prop y$37)))
(assert (= y$5 (= y$n5s5 y$b)))
(assert (= y$14 (= y$n1s5 y$c)))
(assert (= y$15 (= y$n1s5 y$b)))
(assert (= y$s$6_op (ite y$15 y$n3s5 y$t)))
(assert (= y$s$7_op (ite y$14 y$n7s5 y$s$6_op)))
(assert (= y$a$next_rhs_op (ite y$5 y$n5s5 y$s$7_op)))
(assert (= y$23 (= y$a$next y$a$next_rhs_op)))
(assert (= y$25 (= y$c y$b$next)))
(assert (= y$27 (= y$a y$c$next)))
(assert (= y$t$next_rhs_op (Add_5_5_5 y$t y$n2s5)))
(assert (= y$32 (= y$t$next y$t$next_rhs_op)))
(assert (= y$33 (and y$23 y$25 y$27 y$32)))
(assert (= y$47 (not (= y$n2s5 y$a$next))))
(assert (= y$48 (= y$prop$next y$47)))
(assert (= y$prop$next (not y$46)))
(assert (= y$51 (and y$prop y$38 y$33 y$48 y$46)))
(assert y$51)
(assert (distinct y$n1s5 y$n5s5 y$n7s5 y$n11s5 y$n3s5 y$n2s5))
(check-sat)
(exit)
