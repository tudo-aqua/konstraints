(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_b02
query-maker: "Yices 2"
query-time: 0.001000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status unsat)
(declare-sort utt$3 0)
(declare-sort utt$29 0)
(declare-sort utt$31 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_1_31 (Bool utt$31 ) utt$32)
(declare-fun Concat_32_3_29 (utt$3 utt$29 ) utt$32)
(declare-fun y$1 () Bool)
(declare-fun y$103 () Bool)
(declare-fun y$115 () Bool)
(declare-fun y$116 () Bool)
(declare-fun y$117 () Bool)
(declare-fun y$118 () Bool)
(declare-fun y$119 () Bool)
(declare-fun y$120 () Bool)
(declare-fun y$127 () Bool)
(declare-fun y$4 () Bool)
(declare-fun y$77 () Bool)
(declare-fun y$79 () Bool)
(declare-fun y$83 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$92 () Bool)
(declare-fun y$U () Bool)
(declare-fun y$U$next () Bool)
(declare-fun y$n0s29 () utt$29)
(declare-fun y$n0s3 () utt$3)
(declare-fun y$n0s31 () utt$31)
(declare-fun y$n0s32 () utt$32)
(declare-fun y$n1s3 () utt$3)
(declare-fun y$n1s32 () utt$32)
(declare-fun y$n2s3 () utt$3)
(declare-fun y$n3s3 () utt$3)
(declare-fun y$n4s3 () utt$3)
(declare-fun y$n5s3 () utt$3)
(declare-fun y$n6s3 () utt$3)
(declare-fun y$prop () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$stato () utt$3)
(declare-fun y$w$1 () utt$32)
(declare-fun y$w$1$next () utt$32)
(declare-fun y$w$1$next_op () utt$32)
(declare-fun y$w$1_op () utt$32)
(declare-fun y$w$2 () utt$32)
(declare-fun y$w$2_op () utt$32)
(assert (distinct y$n0s3 y$n3s3 y$n4s3 y$n5s3 y$n6s3 y$n1s3 y$n2s3))
(assert (not (= y$n0s32 y$n1s32)))
(assert (= y$U (not y$1)))
(assert (= y$4 (= y$n0s3 y$stato)))
(assert (= y$prop (not y$92)))
(assert (= y$w$1_op (Concat_32_1_31 y$U y$n0s31)))
(assert (= y$79 (not (= y$n1s32 y$w$1_op))))
(assert (= y$w$2_op (Concat_32_3_29 y$stato y$n0s29)))
(assert (= y$83 (= y$n1s32 y$w$2_op)))
(assert (= y$prop0_op (or y$79 y$83)))
(assert (= y$86 (= y$prop y$prop0_op)))
(assert (= y$w$1$next_op (Concat_32_1_31 y$U$next y$n0s31)))
(assert (= y$116 (= y$n1s32 y$w$1$next_op)))
(assert (= y$U$next (not y$117)))
(assert (= y$118 (and y$116 y$117)))
(assert (= y$118 (not y$120)))
(assert (= (= y$n1s32 y$w$1_op) y$77))
(assert (= y$115 (and y$1 y$77)))
(assert (= y$115 (not y$119)))
(assert (= y$127 (and y$1 y$4 y$92 y$86 y$120 y$119)))
(assert y$127)
(check-sat)
(exit)
