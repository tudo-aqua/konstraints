(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: swap_two
query-maker: "Yices 2"
query-time: 0.071000 ms
query-class: abstract
query-category: oneshot
query-type: cti
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-sort utt$12 0)
(declare-sort utt$20 0)
(declare-sort utt$32 0)
(declare-fun Concat_32_20_12 (utt$20 utt$12 ) utt$32)
(declare-fun y$10 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$2 () Bool)
(declare-fun y$22 () Bool)
(declare-fun y$29 () Bool)
(declare-fun y$30 () Bool)
(declare-fun y$33 () Bool)
(declare-fun y$34 () Bool)
(declare-fun y$37 () Bool)
(declare-fun y$38 () Bool)
(declare-fun y$40 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$52 () Bool)
(declare-fun y$53 () Bool)
(declare-fun y$54 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$56 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$68 () Bool)
(declare-fun y$75 () Bool)
(declare-fun y$8 () Bool)
(declare-fun y$85 () Bool)
(declare-fun y$86 () Bool)
(declare-fun y$96 () Bool)
(declare-fun y$97 () Bool)
(declare-fun y$98 () Bool)
(declare-fun y$99 () Bool)
(declare-fun y$a () utt$20)
(declare-fun y$a$next () utt$20)
(declare-fun y$b () utt$20)
(declare-fun y$b$next () utt$20)
(declare-fun y$n0s12 () utt$12)
(declare-fun y$n100s20 () utt$20)
(declare-fun y$n100s32 () utt$32)
(declare-fun y$n200s20 () utt$20)
(declare-fun y$n200s32 () utt$32)
(declare-fun y$n201s20 () utt$20)
(declare-fun y$n201s32 () utt$32)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$prop0 () Bool)
(declare-fun y$prop0$next () Bool)
(declare-fun y$prop0$next_op () Bool)
(declare-fun y$prop0_op () Bool)
(declare-fun y$w$1 () utt$32)
(declare-fun y$w$1$next () utt$32)
(declare-fun y$w$1$next_op () utt$32)
(declare-fun y$w$1_op () utt$32)
(assert (distinct y$n100s20 y$n200s20 y$n201s20))
(assert (distinct y$n100s32 y$n200s32 y$n201s32))
(assert (= y$w$1_op (Concat_32_20_12 y$a y$n0s12)))
(assert (= y$17 (= y$n100s32 y$w$1_op)))
(assert (= y$19 (= y$n200s32 y$w$1_op)))
(assert (= y$prop0_op (or y$17 y$19)))
(assert (= y$22 (= y$prop y$prop0_op)))
(assert (= y$8 (= y$a y$b$next)))
(assert (= y$10 (= y$b y$a$next)))
(assert (= y$11 (and y$8 y$10)))
(assert (= y$w$1$next_op (Concat_32_20_12 y$a$next y$n0s12)))
(assert (= (= y$n100s32 y$w$1$next_op) y$33))
(assert (= y$34 (= y$n200s32 y$w$1$next_op)))
(assert (= y$prop0$next_op (or y$33 y$34)))
(assert (= y$37 (= y$prop$next y$prop0$next_op)))
(assert (= y$prop$next (not y$30)))
(assert (= y$52 (= y$n100s20 y$a$next)))
(assert (= y$53 (not (= y$n100s32 y$w$1$next_op))))
(assert (= y$54 (and y$52 y$53)))
(assert (= y$54 (not y$56)))
(assert (= y$2 (= y$n100s20 y$a)))
(assert (= (not (= y$n100s32 y$w$1_op)) y$40))
(assert (= y$51 (and y$2 y$40)))
(assert (= y$51 (not y$55)))
(assert (= y$5 (= y$n200s20 y$b)))
(assert (= (not (= y$n200s32 y$w$1$next_op)) y$75))
(assert (= y$85 (and y$5 y$10 y$75)))
(assert (= y$85 (not y$86)))
(assert (= y$97 (and y$prop y$22 y$56 y$55 y$11 y$37 y$30 y$86)))
(assert y$97)
(assert (distinct y$n100s20 y$n200s20 y$n201s20))
(assert (distinct y$n100s32 y$n200s32 y$n201s32))
(check-sat)
(exit)
