(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: eq_sdp_v2
query-maker: "Yices 2"
query-time: 0.218000 ms
query-class: abstract
query-category: oneshot
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

;
(set-info :status sat)
(declare-fun Add_1_1_1 (Bool Bool ) Bool)
(declare-fun Sub_1_1_1 (Bool Bool ) Bool)
(declare-fun y$1 () Bool)
(declare-fun y$103 () Bool)
(declare-fun y$104 () Bool)
(declare-fun y$106 () Bool)
(declare-fun y$107 () Bool)
(declare-fun y$11 () Bool)
(declare-fun y$119 () Bool)
(declare-fun y$120 () Bool)
(declare-fun y$121 () Bool)
(declare-fun y$122 () Bool)
(declare-fun y$123 () Bool)
(declare-fun y$124 () Bool)
(declare-fun y$13 () Bool)
(declare-fun y$15 () Bool)
(declare-fun y$17 () Bool)
(declare-fun y$19 () Bool)
(declare-fun y$21 () Bool)
(declare-fun y$23 () Bool)
(declare-fun y$3 () Bool)
(declare-fun y$47 () Bool)
(declare-fun y$5 () Bool)
(declare-fun y$51 () Bool)
(declare-fun y$55 () Bool)
(declare-fun y$59 () Bool)
(declare-fun y$63 () Bool)
(declare-fun y$67 () Bool)
(declare-fun y$7 () Bool)
(declare-fun y$71 () Bool)
(declare-fun y$75 () Bool)
(declare-fun y$79 () Bool)
(declare-fun y$89 () Bool)
(declare-fun y$9 () Bool)
(declare-fun y$93 () Bool)
(declare-fun y$a () Bool)
(declare-fun y$b () Bool)
(declare-fun y$c () Bool)
(declare-fun y$ctl_1 () Bool)
(declare-fun y$ctl_2 () Bool)
(declare-fun y$im.p1_a () Bool)
(declare-fun y$im.p1_a$next () Bool)
(declare-fun y$im.p1_a$next_rhs () Bool)
(declare-fun y$im.p1_a$next_rhs_op () Bool)
(declare-fun y$im.p1_b () Bool)
(declare-fun y$im.p1_b$next () Bool)
(declare-fun y$im.p1_b$next_rhs () Bool)
(declare-fun y$im.p1_b$next_rhs_op () Bool)
(declare-fun y$im.p1_c () Bool)
(declare-fun y$im.p1_c$next () Bool)
(declare-fun y$im.p1_c$next_rhs () Bool)
(declare-fun y$im.p1_c$next_rhs_op () Bool)
(declare-fun y$im.p1_ctl_1 () Bool)
(declare-fun y$im.p1_ctl_1$next () Bool)
(declare-fun y$im.p1_ctl_1$next_rhs () Bool)
(declare-fun y$im.p1_ctl_1$next_rhs_op () Bool)
(declare-fun y$im.p1_ctl_2 () Bool)
(declare-fun y$im.p1_ctl_2$next () Bool)
(declare-fun y$im.p1_ctl_2$next_rhs () Bool)
(declare-fun y$im.p1_ctl_2$next_rhs_op () Bool)
(declare-fun y$im.p2_c () Bool)
(declare-fun y$im.p2_c$next () Bool)
(declare-fun y$im.p2_c$next_rhs () Bool)
(declare-fun y$im.p2_c$next_rhs_op () Bool)
(declare-fun y$im.p2_ctl_2 () Bool)
(declare-fun y$im.p2_ctl_2$next () Bool)
(declare-fun y$im.p2_ctl_2$next_rhs () Bool)
(declare-fun y$im.p2_ctl_2$next_rhs_op () Bool)
(declare-fun y$im.p2_m () Bool)
(declare-fun y$im.p2_m$next () Bool)
(declare-fun y$im.p2_m$next_rhs () Bool)
(declare-fun y$im.p2_m$next_rhs_op () Bool)
(declare-fun y$im.p3_n () Bool)
(declare-fun y$im.p3_n$next () Bool)
(declare-fun y$im.p3_n$next_rhs () Bool)
(declare-fun y$im.p3_n$next_rhs_op () Bool)
(declare-fun y$im.reset () Bool)
(declare-fun y$n0s1 () Bool)
(declare-fun y$prop () Bool)
(declare-fun y$prop$next () Bool)
(declare-fun y$s$13 () Bool)
(declare-fun y$s$13_op () Bool)
(declare-fun y$s$14 () Bool)
(declare-fun y$s$14_op () Bool)
(declare-fun y$s$16 () Bool)
(declare-fun y$s$16_op () Bool)
(declare-fun y$s$17 () Bool)
(declare-fun y$s$17_op () Bool)
(declare-fun y$s$18 () Bool)
(declare-fun y$s$18_op () Bool)
(declare-fun y$s$19 () Bool)
(declare-fun y$s$19_op () Bool)
(declare-fun y$s$20 () Bool)
(declare-fun y$s$20_op () Bool)
(declare-fun y$s$21 () Bool)
(declare-fun y$s$21_op () Bool)
(declare-fun y$s$22 () Bool)
(declare-fun y$s$22_op () Bool)
(declare-fun y$s$23 () Bool)
(declare-fun y$s$23_op () Bool)
(declare-fun y$s1 () Bool)
(declare-fun y$s1$next () Bool)
(declare-fun y$s1$next_rhs () Bool)
(declare-fun y$s1$next_rhs_op () Bool)
(declare-fun y$s2 () Bool)
(declare-fun y$s2$next () Bool)
(declare-fun y$s2$next_rhs () Bool)
(declare-fun y$s2$next_rhs_op () Bool)
(declare-fun y$s3 () Bool)
(declare-fun y$s3$next () Bool)
(declare-fun y$s3$next_rhs () Bool)
(declare-fun y$s3$next_rhs_op () Bool)
(declare-fun y$s_out () Bool)
(declare-fun y$s_out_op () Bool)
(declare-fun y$sp.m () Bool)
(declare-fun y$sp.m_op () Bool)
(assert (= y$im.p1_a (not y$1)))
(assert (= y$im.p1_b (not y$3)))
(assert (= y$im.p1_c (not y$5)))
(assert (= y$im.p1_ctl_1 (not y$7)))
(assert (= y$im.p1_ctl_2 (not y$9)))
(assert (= y$im.p2_c (not y$11)))
(assert (= y$im.p2_ctl_2 (not y$13)))
(assert (= y$im.p2_m (not y$15)))
(assert (= y$im.p3_n (not y$17)))
(assert (= y$s1 (not y$19)))
(assert (= y$s2 (not y$21)))
(assert (= y$s3 (not y$23)))
(assert (= y$s$20_op (Add_1_1_1 y$a y$b)))
(assert (= y$s$22_op (Sub_1_1_1 y$a y$b)))
(assert (= y$sp.m_op (ite y$ctl_1 y$s$20_op y$s$22_op)))
(assert (= y$s$21_op (Add_1_1_1 y$sp.m_op y$c)))
(assert (= y$s$23_op (Sub_1_1_1 y$sp.m_op y$c)))
(assert (= y$s_out_op (ite y$ctl_2 y$s$21_op y$s$23_op)))
(assert (= y$s1$next_rhs_op (and (not y$im.reset) y$s_out_op)))
(assert (= y$47 (= y$s1$next y$s1$next_rhs_op)))
(assert (= y$s2$next_rhs_op (and y$s1 (not y$im.reset))))
(assert (= y$51 (= y$s2$next y$s2$next_rhs_op)))
(assert (= y$s3$next_rhs_op (and y$s2 (not y$im.reset))))
(assert (= y$55 (= y$s3$next y$s3$next_rhs_op)))
(assert (= y$im.p1_ctl_1$next_rhs_op (and (not y$im.reset) y$ctl_1)))
(assert (= y$59 (= y$im.p1_ctl_1$next y$im.p1_ctl_1$next_rhs_op)))
(assert (= y$im.p1_ctl_2$next_rhs_op (and (not y$im.reset) y$ctl_2)))
(assert (= y$63 (= y$im.p1_ctl_2$next y$im.p1_ctl_2$next_rhs_op)))
(assert (= y$im.p1_a$next_rhs_op (and (not y$im.reset) y$a)))
(assert (= y$67 (= y$im.p1_a$next y$im.p1_a$next_rhs_op)))
(assert (= y$im.p1_b$next_rhs_op (and (not y$im.reset) y$b)))
(assert (= y$71 (= y$im.p1_b$next y$im.p1_b$next_rhs_op)))
(assert (= y$im.p1_c$next_rhs_op (and (not y$im.reset) y$c)))
(assert (= y$75 (= y$im.p1_c$next y$im.p1_c$next_rhs_op)))
(assert (= y$im.p2_ctl_2$next_rhs_op (and y$im.p1_ctl_2 (not y$im.reset))))
(assert (= y$79 (= y$im.p2_ctl_2$next y$im.p2_ctl_2$next_rhs_op)))
(assert (= y$s$13_op (Add_1_1_1 y$im.p1_a y$im.p1_b)))
(assert (= y$s$16_op (Sub_1_1_1 y$im.p1_a y$im.p1_b)))
(assert (= y$s$18_op (ite y$im.p1_ctl_1 y$s$13_op y$s$16_op)))
(assert (= y$im.p2_m$next_rhs_op (and (not y$im.reset) y$s$18_op)))
(assert (= y$89 (= y$im.p2_m$next y$im.p2_m$next_rhs_op)))
(assert (= y$im.p2_c$next_rhs_op (and y$im.p1_c (not y$im.reset))))
(assert (= y$93 (= y$im.p2_c$next y$im.p2_c$next_rhs_op)))
(assert (= y$s$14_op (Add_1_1_1 y$im.p2_m y$im.p2_c)))
(assert (= y$s$17_op (Sub_1_1_1 y$im.p2_m y$im.p2_c)))
(assert (= y$s$19_op (ite y$im.p2_ctl_2 y$s$14_op y$s$17_op)))
(assert (= y$im.p3_n$next_rhs_op (and (not y$im.reset) y$s$19_op)))
(assert (= y$103 (= y$im.p3_n$next y$im.p3_n$next_rhs_op)))
(assert (= y$104 (and y$47 y$51 y$55 y$59 y$63 y$67 y$71 y$75 y$79 y$89 y$93 y$103)))
(assert (= y$121 (= y$s3$next y$im.p3_n$next)))
(assert (= y$122 (= y$prop$next y$121)))
(assert (= y$prop$next (not y$120)))
(assert (= y$124 (and y$1 y$3 y$5 y$7 y$9 y$11 y$13 y$15 y$17 y$19 y$21 y$23 y$104 y$122 y$120)))
(assert y$124)
(check-sat)
(exit)
